<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rdf:RDF [
	<!ENTITY core "tag:champtc:core#">
	<!ENTITY ctcapec "tag:champtc:ctcapec#">
	<!ENTITY owl "http://www.w3.org/2002/07/owl#">
	<!ENTITY rdf "http://www.w3.org/1999/02/22-rdf-syntax-ns#">
	<!ENTITY rdfs "http://www.w3.org/2000/01/rdf-schema#">
	<!ENTITY xsd "http://www.w3.org/2001/XMLSchema#">
]>
<rdf:RDF
	xmlns="tag:champtc:ctcapec#"
	xmlns:core="tag:champtc:core#"
	xmlns:ctcapec="tag:champtc:ctcapec#"
	xmlns:owl="http://www.w3.org/2002/07/owl#"
	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema#">
	
	<owl:Ontology rdf:about="tag:champtc:ctcapec">
	</owl:Ontology>
	
	<owl:Class rdf:about="http://capec.mitre.org/capec#AttackPattern">
	</owl:Class>
	
	<owl:AnnotationProperty rdf:about="&core;appIconId">
	</owl:AnnotationProperty>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-1-AccessingFunctionalityNotProperlyConstrainedByACLs">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-122-PrivilegeAbuse"/>
		<rdfs:label>Accessing Functionality Not Properly Constrained By ACLs</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

In applications, particularly web applications, access to functionality is mitigated by the authorization framework, whose job it is to map ACLs to elements of the application&apos;s functionality; particularly URL&apos;s for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application or can run queries for data that he is otherwise not supposed to.
+ Attack Prerequisites

    The application must be navigable in a manner that associates elements (subsections) of the application with ACLs.

    The various resources, or individual URLs, must be somehow discoverable by the attacker

    The administrator must have forgotten to associate an ACL or has associated an inappropriately permissive ACL with a particular navigable resource.

+ Solutions and Mitigations

In a J2EE setting, administrators can associate a role that is impossible for the authenticator to grant users, such as &quot;NoAccess&quot;, with all Servlets to which access is guarded by a limited number of servlets visible to, and accessible by, the user.

Having done so, any direct access to those protected Servlets will be prohibited by the web container.

In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-10-BufferOverflowViaEnvironmentVariables">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-100-OverflowBuffers"/>
		<rdfs:label>Buffer Overflow Via Environment Variables</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the attacker finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables.
+ Attack Prerequisites

    The application uses environment variables.

    An environment variable exposed to the user is vulnerable to a buffer overflow.

    The vulnerable environment variable uses untrusted data.

    Tainted data used in the environment variables is not properly validated. For instance boundary checking is not done before copying the input data to a buffer.

+ Solutions and Mitigations

Do not expose environment variable to the user.

Do not use untrusted data in your environment variables.

Use a language or compiler that performs automatic bounds checking

There are tools such as Sharefuzz [R.10.3] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-100-OverflowBuffers">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-123-BufferManipulation"/>
		<rdfs:label>Overflow Buffers</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an attacker. As a consequence, an attacker is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the attackers&apos; choice.
+ Attack Prerequisites

    Targeted software performs buffer operations.

    Targeted software inadequately performs bounds-checking on buffer operations.

    Attacker has the capability to influence the input to buffer operations.

+ Solutions and Mitigations

Use a language or compiler that performs automatic bounds checking.

Use secure functions not vulnerable to buffer overflow.

If you have to use dangerous functions, make sure that you do boundary checking.

Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.

Use OS-level preventative functionality. Not a complete solution.

Utilize static source code analysis tools to identify potential buffer overflow weaknesses in the software.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-101-ServerSideIncludeSSIInjection">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-253-RemoteCodeInclusion"/>
		<rdfs:label>Server Side Include SSI Injection</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker can use Server Side Include (SSI) Injection to send code to a web application that then gets executed by the web server. Doing so enables the attacker to achieve similar results to Cross Site Scripting, viz., arbitrary code execution and information disclosure, albeit on a more limited scale, since the SSI directives are nowhere near as powerful as a full-fledged scripting language. Nonetheless, the attacker can conveniently gain access to sensitive files, such as password files, and execute shell commands.
+ Attack Prerequisites

    A web server that supports server side includes and has them enabled

    User controllable input that can carry include directives to the web server

+ Solutions and Mitigations

Set the OPTIONS IncludesNOEXEC in the global access.conf file or local .htaccess (Apache) file to deny SSI execution in directories that do not need them

All user controllable input must be appropriately sanitized before use in the application. This includes omitting, or encoding, certain characters or strings that have the potential of being interpreted as part of an SSI directive

Server Side Includes must be enabled only if there is a strong business reason to do so. Every additional component enabled on the web server increases the attack surface as well as administrative overhead</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-102-SessionSidejacking">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-21-ExploitationOfTrustedCredentials"/>
		<rdfs:label>Session Sidejacking</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

Session sidejacking takes advantage of an unencrypted communication channel between a victim and target system. The attacker sniffs traffic on a network looking for session tokens in unencrypted traffic. Once a session token is captured, the attacker performs malicious actions by using the stolen token with the targeted application to impersonate the victim.

This attack is a specific method of session hijacking, which is exploiting a valid session token to gain unauthorized access to a target system or information. Other methods to perform a session hijacking are session fixation, cross-site scripting, or compromising a user or server machine and stealing the session token.
+ Attack Prerequisites

    An attacker and the victim are both using the same WiFi network.

    The victim has an active session with a target system.

    The victim is not using a secure channel to communicate with the target system (e.g. SSL, VPN, etc.)

    The victim initiated communication with a target system that requires transfer of the session token or the target application uses AJAX and thereby periodically &quot;rings home&quot; asynchronously using the session token

+ Solutions and Mitigations

Make sure that HTTPS is used to communicate with the target system. Alternatively, use VPN if possible. It is important to ensure that all communication between the client and the server happens via an encrypted secure channel.

Modify the session token with each transmission and protect it with cryptography. Add the idea of request sequencing that gives the server an ability to detect replay attacks.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-103-Clickjacking">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-173-ActionSpoofing"/>
		<rdfs:label>Clickjacking</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

In a clickjacking attack the victim is tricked into unknowingly initiating some action in one system while interacting with the UI from seemingly completely different system. While being logged in to some target system, the victim visits the attackers&apos; malicious site which displays a UI that the victim wishes to interact with. In reality, the clickjacked page has a transparent layer above the visible UI with action controls that the attacker wishes the victim to execute. The victim clicks on buttons or other UI elements they see on the page which actually triggers the action controls in the transparent overlaying layer. Depending on what that action control is, the attacker may have just tricked the victim into executing some potentially privileged (and most certainly undesired) functionality in the target system to which the victim is authenticated. The basic problem here is that there is a dichotomy between what the victim thinks he&apos;s clicking on versus what he or she is actually clicking on.
+ Attack Prerequisites

    The victim is communicating with the target application via a web based UI and not a thick client

    The victim&apos;s browser security policies allow at least one of the following JavaScript, Flash, iFrames, ActiveX, or CSS.

    The victim uses a modern browser that supports UI elements like clickable buttons (i.e. not using an old text only browser)

    The victim has an active session with the target system.

    The target system&apos;s interaction window is open in the victim&apos;s browser and supports the ability for initiating sensitive actions on behalf of the user in the target system

+ Solutions and Mitigations

If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.

Turn off JavaScript, Flash and disable CSS.

When maintaining an authenticated session with a privileged target system, do not use the same browser to navigate to unfamiliar sites to perform other activities. Finish working with the target system and logout first before proceeding to other tasks.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-104-CrossZoneScripting">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-233-PrivilegeEscalation"/>
		<rdfs:label>Cross Zone Scripting</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker is able to cause a victim to load content into their web-browser that bypasses security zone controls and gain access to increased privileges to execute scripting code or other web objects such as unsigned ActiveX controls or applets. This is a privilege elevation attack targeted at zone-based web-browser security. In a zone-based model, pages belong to one of a set of zones corresponding to the level of privilege assigned to that page. Pages in an untrusted zone would have a lesser level of access to the system and/or be restricted in the types of executable content it was allowed to invoke. In a cross-zone scripting attack, a page that should be assigned to a less privileged zone is granted the privileges of a more trusted zone. This can be accomplished by exploiting bugs in the browser, exploiting incorrect configuration in the zone controls, through a cross-site scripting attack that causes the attackers&apos; content to be treated as coming from a more trusted page, or by leveraging some piece of system functionality that is accessible from both the trusted and less trusted zone. This attack differs from &quot;Restful Privilege Escalation&quot; in that the latter correlates to the inadequate securing of RESTful access methods (such as HTTP DELETE) on the server, while cross-zone scripting attacks the concept of security zones as implemented by a browser.
+ Attack Prerequisites

    The target must be using a zone-aware browser.

+ Solutions and Mitigations

Disable script execution.

Ensure that sufficient input validation is performed for any potentially untrusted data before it is used in any privileged context or zone

Limit the flow of untrusted data into the privileged areas of the system that run in the higher trust zone

Limit the sites that are being added to the local machine zone and restrict the privileges of the code running in that zone to the bare minimum

Ensure proper HTML output encoding before writing user supplied data to the page</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-105-HTTPRequestSplitting">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-220-ClientServerProtocolManipulation"/>
		<rdfs:label>HTTP Request Splitting</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

HTTP Request Splitting (also known as HTTP Request Smuggling) is an attack pattern where an attacker attempts to insert additional HTTP requests in the body of the original (enveloping) HTTP request in such a way that the browser interprets it as one request but the web server interprets it as two.

There are several ways to perform HTTP request splitting attacks. One way is to include double Content-Length headers in the request to exploit the fact that the devices parsing the request may each use a different header. Another way is to submit an HTTP request with a &quot;Transfer Encoding: chunked&quot; in the request header set with setRequestHeader to allow a payload in the HTTP Request that can be considered as another HTTP Request by a subsequent parsing entity. A third way is to use the &quot;Double CR in an HTTP header&quot; technique. There are also a few less general techniques targeting specific parsing vulnerabilities in certain web servers.
+ Attack Prerequisites

    User-manipulateable HTTP Request headers are processed by the web server

+ Solutions and Mitigations

Make sure to install the latest vendor security patches available for the web server.

If possible, make use of SSL.

Install a web application firewall that has been secured against HTTP Request Splitting

Use web servers that employ a tight HTTP parsing process</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-106-CrossSiteScriptingThroughLogFiles">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-18-EmbeddingScriptsInNonScriptElements"/>
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-63-SimpleScriptInjection"/>
		<rdfs:label>Cross Site Scripting Through Log Files</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker may leverage a system weakness where logs are susceptible to log injection to insert scripts into the system&apos;s logs. If these logs are later viewed by an administrator through a thin administrative interface and the log data is not properly HTML encoded before being written to the page, the attackers&apos; scripts stored in the log will be executed in the administrative interface with potentially serious consequences. This attack pattern is really a combination of two other attack patterns: log injection and stored cross site scripting.
+ Attack Prerequisites

    The system uses a web based interface

    The system does not cleanse / validate user supplied data before writing it to logs

    Information from logs is displayed in a web based interface

    The web based log interface does not HTML output encode the log data prior to displaying it in the administrator console.

+ Solutions and Mitigations

Cleanse all user supplied data before placing it in the logs. Reject all bad data. Ensure that the data is in the expected form.

Use proper HTML output encoding techniques to strip the log data of potentially dangerous scripting characters before displaying it in the administrative console

If possible, disable script execution in the administrative interface.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-107-CrossSiteTracing">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-86-EmbeddingScriptXXSInHTTPHeaders"/>
		<rdfs:label>Cross Site Tracing</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

Cross Site Tracing (XST) enables an attacker to steal the victim&apos;s session cookie and possibly other authentication credentials transmitted in the header of the HTTP request when the victim&apos;s browser communicates to destination system&apos;s web server. The attacker first gets a malicious script to run in the victim&apos;s browser that induces the browser to initiate an HTTP TRACE request to the web server. If the destination web server allows HTTP TRACE requests, it will proceed to return a response to the victim&apos;s web browser that contains the original HTTP request in its body. The function of HTTP TRACE, as defined by the HTTP specification, is to echo the request that the web server receives from the client back to the client. Since the HTTP header of the original request had the victim&apos;s session cookie in it, that session cookie can now be picked off the HTTP TRACE response and sent to the attackers&apos; malicious site. XST becomes relevant when direct access to the session cookie via the &quot;document.cookie&quot; object is disabled with the use of httpOnly attribute which ensures that the cookie can be transmitted in HTTP requests but cannot be accessed in other ways. Using SSL does not protect against XST.

If the system with which the victim is interacting is susceptible to XSS, an attacker can exploit that weakness directly to get his or her malicious script to issue an HTTP TRACE request to the destination system&apos;s web server. In the absence of an XSS weakness on the site with which the victim is interacting, an attacker can get the script to come from the site that he controls and get it to execute in the victim&apos;s browser (if he can trick the victim&apos;s into visiting his malicious website or clicking on the link that he supplies). However, in that case, due to the same origin policy protection mechanism in the browser, the attackers&apos; malicious script cannot directly issue an HTTP TRACE request to the destination system&apos;s web server because the malicious script did not originate at that domain. An attacker will then need to find a way to exploit another weakness that would enable him or her to get around the same origin policy protection.
+ Attack Prerequisites

    HTTP TRACE is enabled on the web server

    The destination system is susceptible to XSS or an attacker can leverage some other weakness to bypass the same origin policy

    Scripting is enabled in the client&apos;s browser

    HTTP is used as the communication protocol between the server and the client

+ Solutions and Mitigations

Administrators should disable support for HTTP TRACE at the destination&apos;s web server. Vendors should disable TRACE by default.

Patch web browser against known security origin policy bypass exploits.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-107-EmbeddingScriptXXSInHTTPHeaders">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-86-EmbeddingScriptXSSInHTTPHeaders"/>
		<rdfs:label>Embedding Script XXS In HTTP Headers</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attack of this type exploits web applications that generate web content, such as links in a HTML page, based on unvalidated or improperly validated data submitted by other actors. XSS in HTTP Headers attacks target the HTTP headers which are hidden from most users and may not be validated by web applications.
+ Attack Prerequisites

    Target software must be a client that allows scripting communication from remote hosts, and attacker must control a remote site of some sort to redirect client and data to.

+ Solutions and Mitigations

Design: Use browser technologies that do not allow client side scripting.

Design: Utilize strict type, character, and encoding enforcement

Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client&apos;s browser has no way of discerning where the data is originating from.

Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.

Implementation: Perform input validation for all remote content.

Implementation: Perform output validation for all remote content.

Implementation: Disable scripting languages such as JavaScript in browser

Implementation: Session tokens for specific host

Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-108-CommandLineExecutionThroughSQLInjection">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-66-SQLInjection"/>
		<rdfs:label>Command Line Execution Through SQL Injection</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker uses standard SQL injection methods to inject data into the command line for execution. This could be done directly through misuse of directives such as MSSQL_xp_cmdshell or indirectly through injection of data into the database that would be interpreted as shell commands. Sometime later, an unscrupulous backend application (or could be part of the functionality of the same application) fetches the injected data stored in the database and uses this data as command line arguments without performing proper validation. The malicious data escapes that data plane by spawning new commands to be executed on the host.
+ Attack Prerequisites

    The application does not properly validate data before storing in the database

    Backend application implicitly trusts the data stored in the database

    Malicious data is used on the backend as a command line argument

+ Solutions and Mitigations

Disable MSSQL xp_cmdshell directive on the database

Properly validate the data (syntactically and semantically) before writing it to the database.

Do not implicitly trust the data stored in the database. Re-validate it prior to usage to make sure that it is safe to use in a given context (e.g. as a command line argument).</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-109-ObjectRelationalMappingInjection">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-66-SQLInjection"/>
		<rdfs:label>Object Relational Mapping Injection</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker leverages a weakness present in the database access layer code generated with an Object Relational Mapping (ORM) tool or a weakness in the way that a developer used a persistence framework to inject his or her own SQL commands to be executed against the underlying database. The attack here is similar to plain SQL injection, except that the application does not use JDBC to directly talk to the database, but instead it uses a data access layer generated by an ORM tool or framework (e.g. Hibernate). While most of the time code generated by an ORM tool contains safe access methods that are immune to SQL injection, sometimes either due to some weakness in the generated code or due to the fact that the developer failed to use the generated access methods properly, SQL injection is still possible.
+ Attack Prerequisites

    An application uses data access layer generated by an ORM tool or framework

    An application uses user supplied data in queries executed against the database

    The separation between data plane and control plane is not ensured, through either developer error or an underlying weakness in the data access layer code generation framework

+ Solutions and Mitigations

Remember to understand how to use the data access methods generated by the ORM tool / framework properly in a way that would leverage the built-in security mechanisms of the framework

Ensure to keep up to date with security relevant updates to the persistence framework used within your application.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-11-CauseWebServerMisclassification">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-165-FileManipulation"/>
		<rdfs:label>Cause Web Server Misclassification</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attack of this type exploits a Web server&apos;s decision to take action based on filename or file extension. Because different file types are handled by different server processes, misclassification may force the Web server to take unexpected action, or expected actions in an unexpected sequence. This may cause the server to exhaust resources, supply debug or system data to the attacker, or bind an attacker to a remote process.

This type of vulnerability has been found in many widely used servers including IIS, Lotus Domino, and Orion. The attacker&apos;s job in this case is straightforward, standard communication protocols and methods are used and are generally appended with malicious information at the tail end of an otherwise legitimate request. The attack payload varies, but it could be special characters like a period or simply appending a tag that has a special meaning for operations on the server side like .jsp for a java application server. The essence of this attack is that the attacker deceives the server into executing functionality based on the name of the request, i.e. login.jsp, not the contents.
+ Attack Prerequisites

    Web server software must rely on file name or file extension for processing.

+ Solutions and Mitigations

Implementation: Server routines should be determined by content not determined by filename or file extension.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-110-SQLInjectionThroughSOAPParameterTampering">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-66-SQLInjection"/>
		<rdfs:label>SQL Injection Through SOAP Parameter Tampering</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker modifies the parameters of the SOAP message that is sent from the service consumer to the service provider to initiate a SQL injection attack. On the service provider side, the SOAP message is parsed and parameters are not properly validated before being used to access a database in a way that does not use parameter binding, thus enabling the attacker to control the structure of the executed SQL query. This pattern describes a SQL injection attack with the delivery mechanism being a SOAP message.
+ Attack Prerequisites

    SOAP messages are used as a communication mechanism in the system

    SOAP parameters are not properly validated at the service provider

    The service provider does not properly utilize parameter binding when building SQL queries

+ Solutions and Mitigations

Properly validate and sanitize/reject user input at the service provider.

Ensure that prepared statements or other mechanism that enables parameter binding is used when accessing the database in a way that would prevent the attackers&apos; supplied data from controlling the structure of the executed query.

At the database level, ensure that the database user used by the application in a particular context has the minimum needed privileges to the database that are needed to perform the operation. When possible, run queries against pre-generated views rather than the tables directly.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-111-JSONHijackingAkaJavaScriptHijacking">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-212-FunctionalityMisuse"/>
		<rdfs:label>JSON Hijacking aka JavaScript Hijacking</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker targets a system that uses JavaScript Object Notation (JSON) as a transport mechanism between the client and the server (common in Web 2.0 systems using AJAX) to steal possibly confidential information transmitted from the server back to the client inside the JSON object by taking advantage of the loophole in the browser&apos;s Same Origin Policy that does not prohibit JavaScript from one website to be included and executed in the context of another website.

An attacker gets the victim to visit his or her malicious page that contains a script tag whose source points to the vulnerable system with a URL that requests a response from the server containing a JSON object with possibly confidential information. The malicious page also contains malicious code to capture the JSON object returned by the server before any other processing on it can take place, typically by overriding the JavaScript function used to create new objects. This hook allows the malicious code to get access to the creation of each object and transmit the possibly sensitive contents of the captured JSON object to the attackers&apos; server.

There is nothing in the browser&apos;s security model to prevent the attackers&apos; malicious JavaScript code (originating from attacker&apos;s domain) to set up an environment (as described above) to intercept a JSON object response (coming from the vulnerable target system&apos;s domain), read its contents and transmit to the attackers&apos; controlled site. The same origin policy protects the domain object model (DOM), but not the JSON.
+ Attack Prerequisites

    JSON is used as a transport mechanism between the client and the server

    The target server cannot differentiate real requests from forged requests

    The JSON object returned from the server can be accessed by the attackers&apos; malicious code via a script tag

+ Solutions and Mitigations

Ensure that server side code can differentiate between legitimate requests and forged requests. The solution is similar to protection against Cross Site Request Forger (CSRF), which is to use a hard to guess random nonce (that is unique to the victim&apos;s session with the server) that the attacker has no way of knowing (at least in the absence of other weaknesses). Each request from the client to the server should contain this nonce and the server should reject all requests that do not contain the nonce.

On the client side, the system&apos;s design could make it difficult to get access to the JSON object content via the script tag. Since the JSON object is never assigned locally to a variable, it cannot be readily modified by the attacker before being used by a script tag. For instance, if while(1) was added to the beginning of the JavaScript returned by the server, trying to access it with a script tag would result in an infinite loop. On the other hand, legitimate client side code can remove the while(1) statement after which the JavaScript can be evaluated. A similar result can be achieved by surrounding the returned JavaScript with comment tags, or using other similar techniques (e.g. wrapping the JavaScript with HTML tags).

Make the URLs in the system used to retrieve JSON objects unpredictable and unique for each user session.

Ensure that to the extent possible, no sensitive data is passed from the server to the client via JSON objects. JavaScript was never intended to play that role, hence the same origin policy does not adequate address this scenario.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-112-BruteForce">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Brute Force</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

In this attack, some asset (information, functionality, identity, etc.) is protected by a finite secret value. The attacker attempts to gain access to this asset by using trial-and-error to exhaustively explore all the possible secret values in the hope of finding the secret (or a value that is functionally equivalent) that will unlock the asset. Examples of secrets can include, but are not limited to, passwords, encryption keys, database lookup keys, and initial values to one-way functions.

The key factor in this attack is the attackers&apos; ability to explore the possible secret space rapidly. This, in turn, is a function of the size of the secret space and the computational power the attacker is able to bring to bear on the problem. If the attacker has modest resources and the secret space is large, the challenge facing the attacker is intractable. While the defender cannot control the resources available to an attacker, they can control the size of the secret space. Creating a large secret space involves selecting one&apos;s secret from as large a field of equally likely alternative secrets as possible and ensuring that an attacker is unable to reduce the size of this field using available clues or cryptanalysis. Doing this is more difficult than it sounds since elimination of patterns (which, in turn, would provide an attacker clues that would help them reduce the space of potential secrets) is difficult to do using deterministic machines, such as computers. Assuming a finite secret space, a brute force attack will eventually succeed. The defender must rely on making sure that the time and resources necessary to do so will exceed the value of the information. For example, a secret space that will likely take hundreds of years to explore is likely safe from raw-brute force attacks.
+ Attack Prerequisites

    The attacker must be able to determine when they have successfully guessed the secret. As such, one-time pads are immune to this type of attack since there is no way to determine when a guess is correct.

+ Solutions and Mitigations

Select a provably large secret space for selection of the secret. Provably large means that the procedure by which the secret is selected does not have artifacts that significantly reduce the size of the total secret space.

Do not provide the means for an attacker to determine success independently. This forces the attacker to check their guesses against an external authority, which can slow the attack and warn the defender. This mitigation may not be possible if testing material must appear externally, such as with a transmitted cryptotext.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-113-APIManipulation">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>API Manipulation</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An adversary manipulates the use or processing of an Application Programming Interface (API) resulting in an adverse impact upon the security of the system implementing the API. This can allow the adversary to execute functionality not intended by the API implementation, possibly compromising the system which integrates the API. API manipulation can take on a number of forms including forcing the unexpected use of an API, or the use of an API in an unintended way. For example, an adversary may make a request to an application that leverages a non-standard API that is known to incorrectly validate its data and thus it may be manipulated by supplying metacharacters or alternate encodings as input, resulting in any number of injection flaws, including SQL injection, cross-site scripting, or command execution. Another example could be API methods that should be disabled in a production application but were not, thus exposing dangerous functionality within a production environment.
+ Attack Prerequisites

    The target system must expose API functionality in a manner that can be discovered and manipulated by an adversary. This may require reverse engineering the API syntax or decrypting/de-obfuscating client-server exchanges.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-114-AuthenticationAbuse">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Authentication Abuse</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker obtains unauthorized access to an application, service or device either through knowledge of the inherent weaknesses of an authentication mechanism, or by exploiting a flaw in the authentication scheme&apos;s implementation. In such an attack an authentication mechanism is functioning but a carefully controlled sequence of events causes the mechanism to grant access to the attacker. This attack may exploit assumptions made by the target&apos;s authentication procedures, such as assumptions regarding trust relationships or assumptions regarding the generation of secret values. This attack differs from Authentication Bypass attacks in that Authentication Abuse allows the attacker to be certified as a valid user through illegitimate means, while Authentication Bypass allows the user to access protected material without ever being certified as an authenticated user. This attack does not rely on prior sessions established by successfully authenticating users, as relied upon for the &quot;Exploitation of Session Variables, Resource IDs and other Trusted Credentials&quot; attack patterns.
+ Attack Prerequisites

    An authentication mechanism or subsystem implementing some form of authentication such as passwords, digest authentication, security certificates, etc. which is flawed in some way.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-115-AuthenticationBypass">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Authentication Bypass</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place. This refers to an attacker gaining access equivalent to an authenticated user without ever going through an authentication procedure. This is usually the result of the attacker using an unexpected access procedure that does not go through the proper checkpoints where authentication should occur. For example, a web site might assume that all users will click through a given link in order to get to secure material and simply authenticate everyone that clicks the link. However, an attacker might be able to reach secured web content by explicitly entering the path to the content rather than clicking through the authentication link, thereby avoiding the check entirely. This attack pattern differs from other authentication attacks in that attacks of this pattern avoid authentication entirely, rather than faking authentication by exploiting flaws or by stealing credentials from legitimate users.
+ Attack Prerequisites

    An authentication mechanism or subsystem implementing some form of authentication such as passwords, digest authentication, security certificates, etc.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-116-Excavation">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Excavation</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">An adversary actively probes the target in a manner that is designed to solicit information relevant to system security. This is achieved by exploring the target via ordinary interactions for the purpose of gathering intelligence about the target, or by sending data that is syntactically invalid or non-standard in an attempt to produce a response that contains the desired data. As a result of the excavation activities, the adversary is able to obtain information from the target that aids the attacker in making inferences about its security, configuration, or potential vulnerabilities. Examplar exchanges with the target may trigger unhandled exceptions or verbose error messages that reveal information like stack traces, configuration information, path information, or database design. This type of attack also includes the manipulation of query strings in a URI to produce invalid SQL queries, or by trying alternative path values in the hope that the server will return useful information.

Excavated data is often moved from the target system to some other adversary controlled system. Data found on a target system might require extensive resources to be fully analyzed. Using these resources on the target system might enable a defender to detect the adversary. Additionally, proper analysis tools required might not be available on the target system.

This attack differs from Data Interception and other data collection attacks in that the attacker actively queries the target rather than simply watching for the target to reveal information.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-117-Interception">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Interception</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker monitors data streams to or from a target in order to gather information. This attack may be undertaken to gather information to support a later attack or the data collected may be the end goal of the attack. This attack usually involves sniffing network traffic, but may include observing other types of data streams, such as radio. In most varieties of this attack, the attacker is passive and simply observes regular communication, however in some variants the attacker may attempt to initiate the establishment of a data stream or influence the nature of the data transmitted. However, in all variants of this attack, and distinguishing this attack from other data collection methods, the attacker is not the intended recipient of the data stream. Unlike some other data leakage attacks, the attacker is observing explicit data channels (e.g. network traffic) and reading the content. This differs from attacks that collect more qualitative information, such as communication volume, or other information not explicitly communicated via a data stream.
+ Attack Prerequisites

    All targets that transmit information over a network is potentially vulnerable to this attack.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-12-ChoosingMessageIdentifier">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-216-CommunicationChannelManipulation"/>
		<rdfs:label>Choosing Message Identifier</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

This pattern of attack is defined by the selection of messages distributed over via multicast or public information channels that are intended for another client by determining the parameter value assigned to that client. This attack allows the adversary to gain access to potentially privileged information, and to possibly perpetrate other attacks through the distribution means by impersonation. If the channel/message being manipulated is an input rather than output mechanism for the system, (such as a command bus), this style of attack could be used to change the adversary&apos;s identifier to more a privileged one.
+ Attack Prerequisites

    Information and client-sensitive (and client-specific) data must be present through a distribution channel available to all users.

    Distribution means must code (through channel, message identifiers, or convention) message destination in a manner visible within the distribution means itself (such as a control channel) or in the messages themselves.

+ Solutions and Mitigations

Associate some ACL (in the form of a token) with an authenticated user which they provide middleware. The middleware uses this token as part of its channel/message selection for that client, or part of a discerning authorization decision for privileged channels/messages.

The purpose is to architect the system in a way that associates proper authentication/authorization with each channel/message.

Re-architect system input/output channels as appropriate to distribute self-protecting data. That is, encrypt (or otherwise protect) channels/messages so that only authorized readers can see them.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-120-DoubleEncoding">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-267-LeverageAlternateEncoding"/>
		<rdfs:label>Double Encoding</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

The attacker utilizes a repeating of the encoding process for a set of characters (that is, character encoding a character encoding of a character) to obfuscate the payload of a particular request. The may allow the attacker to bypass filters that attempt to detect illegal characters or strings, such as might be used in traversal or injection attacks. Filters may be able to catch illegal encoded strings but may not catch doubly encoded strings. For example, a dot (.), often used in path traversal attacks and therefore often blocked by filters, could be URL encoded as %2E. However, many filters recognize this encoding and would still block the request. In a double encoding, the % in the above URL encoding would be encoded again as %25, resulting in %252E which some filters might not catch, but which could still be interpreted as a dot (.) by interpreters on the target.
+ Attack Prerequisites

    The target&apos;s filters must fail to detect that a character has been doubly encoded but its interpreting engine must still be able to convert a doubly encoded character to an un-encoded character.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-121-ExploitTestAPIs">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-113-APIManipulation"/>
		<rdfs:label>Exploit Test APIs</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker exploits a sample, demonstration, or test API that is insecure by default and should not be resident on production systems. Some applications include APIs that are intended to allow an administrator to test and refine their domain. These APIs should usually be disabled once a system enters a production environment. Testing APIs may expose a great deal of diagnostic information intended to aid an administrator, but which can also be used by an attacker to further refine their attack. Moreover, testing APIs may not have adequate security controls or may not have undergone rigorous testing since they were not intended for use in production environments. As such, they may have many flaws and vulnerabilities that would allow an attacker to severely disrupt a target.
+ Attack Prerequisites

    The target must have installed test APIs and failed to secure or remove them when brought into a production environment.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-122-PrivilegeAbuse">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Privilege Abuse</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources. If access control mechanisms are absent or misconfigured, a user may be able to access resources that are intended only for higher level users. An adversary may be able to exploit this to utilize a less trusted account to gain information and perform activities reserved for more trusted accounts. This attack differs from privilege escalation and other privilege stealing attacks in that the adversary never actually escalates their privileges but instead is able to use a lesser degree of privilege to access resources that should be (but are not) reserved for higher privilege accounts. Likewise, the adversary does not exploit trust or subvert systems - all control functionality is working as configured but the configuration does not adequately protect sensitive resources at an appropriate level.
+ Attack Prerequisites

    The target must have misconfigured their access control mechanisms such that sensitive information, which should only be accessible to more trusted users, remains accessible to less trusted users.

    The adversary must have access to the target, albeit with an account that is less privileged than would be appropriate for the targeted resources.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-123-BufferManipulation">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Buffer Manipulation</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An adversary manipulates an application&apos;s interaction with a buffer in an attempt to read or modify data they shouldn&apos;t have access to. Buffer attacks are distinguished in that it is the buffer space itself that is the target of the attack rather than any code responsible for interpreting the content of the buffer. In virtually all buffer attacks the content that is placed in the buffer is immaterial. Instead, most buffer attacks involve retrieving or providing more input than can be stored in the allocated buffer, resulting in the reading or overwriting of other unintended program memory.
+ Attack Prerequisites

    The adversary must identify a programmatic means for interacting with a buffer, such as vulnerable C code, and be able to provide input to this interaction.

+ Solutions and Mitigations

To help protect an application from buffer manipulation attacks, a number of potential mitigations can be leveraged. Before starting the development of the application, consider using a code language (e.g., Java) or compiler that limits the ability of developers to act beyond the bounds of a buffer. If the chosen language is susceptible to buffer related issues (e.g., C) then consider using secure functions instead of those vulnerable to buffer manipulations. If a potentially dangerous function must be used, make sure that proper boundary checking is performed. Additionally, there are often a number of compiler-based mechanisms (e.g., StackGuard, ProPolice and the Microsoft Visual Studio /GS flag) that can help identify and protect against potential buffer issues. Finally, there may be operating system level preventative functionality that can be applied.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-124-SharedDataManipulation">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Shared Data Manipulation</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An adversary exploits a data structure shared between multiple applications or an application pool to affect application behavior. Data may be shared between multiple applications or between multiple threads of a single application. Data sharing is usually accomplished through mutual access to a single memory location. If an attacker can manipulate this shared data (usually by co-opting one of the applications or threads) the other applications or threads using the shared data will often continue to trust the validity of the compromised shared data and use it in their calculations. This can result in invalid trust assumptions, corruption of additional data through the normal operations of the other users of the shared data, or even cause a crash or compromise of the sharing applications.
+ Attack Prerequisites

    The target applications (or target application threads) must share data between themselves.

    The attacker must be able to manipulate some piece of the shared data either directly or indirectly and the other users of the data must accept the changed data as valid.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-125-Flooding">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Flooding</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow control in management of interactions. Since each request consumes some of the target&apos;s resources, if a sufficiently large number of requests must be processed at the same time then the target&apos;s resources can be exhausted.

The degree to which the attack is successful depends upon the volume of requests in relation to the amount of the resource the target has access to, and other mitigating circumstances such as the target&apos;s ability to shift load or acquired additional resources to deal with the depletion. The more protected the resource and the greater the quantity of it that must be consumed, the more resources the attacker may need to have at their disposal. A typical TCP/IP flooding attack is a Distributed Denial-of-Service attack where many machines simultaneously make a large number of requests to a target. Against a target with strong defenses and a large pool of resources, many tens of thousands of attacking machines may be required.

When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target&apos;s operations. The key factor in a flooding attack is the number of requests the attacker can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.
+ Attack Prerequisites

    Any target that services requests is vulnerable to this attack on some level of scale.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-126-PathTraversal">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-153-InputDataManipulation"/>
		<rdfs:label>Path Traversal</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An adversary uses path manipulation methods to exploit insufficient input validation of a target to obtain access to data that should be not be retrievable by ordinary well-formed requests. A typical variety of this attack involves specifying a path to a desired file together with dot-dot-slash characters, resulting in the file access API or function traversing out of the intended directory structure and into the root file system. By replacing or modifying the expected path information the access function or API retrieves the file desired by the attacker. These attacks either involve the attacker providing a complete path to a targeted file or using control characters (e.g. path separators (/ or \) and/or dots (.)) to reach desired directories or files.
+ Attack Prerequisites

    The attacker must be able to control the path that is requested of the target.

    The target must fail to adequately sanitize incoming paths

+ Solutions and Mitigations

Design: Configure the access control correctly.

Design: Enforce principle of least privilege.

Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.

Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.

Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.

Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.

Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.

Implementation: Perform input validation for all remote content, including remote and user-generated content.

Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.

Implementation: Use indirect references rather than actual file names.

Implementation: Use possible permissions on file access when developing and deploying web applications.

Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- whitelisting approach.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-127-DirectoryIndexing">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-54-QuerySystemForInformation"/>
		<rdfs:label>Directory Indexing</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An adversary crafts a request to a target that results in the target listing/indexing the content of a directory as output. One common method of triggering directory contents as output is to construct a request containing a path that terminates in a directory name rather than a file name since many applications are configured to provide a list of the directory&apos;s contents when such a request is received. An adversary can use this to explore the directory tree on a target as well as learn the names of files. This can often end up revealing test files, backup files, temporary files, hidden files, configuration files, user accounts, script contents, as well as naming conventions, all of which can be used by an attacker to mount additional attacks.
+ Attack Prerequisites

    The target must be misconfigured to return a list of a directory&apos;s content when it receives a request that ends in a directory name rather than a file name.

    The adversary must be able to control the path that is requested of the target.

    The administrator must have failed to properly configure an ACL or has associated an overly permissive ACL with a particular directory.

    The server version or patch level must not inherently prevent known directory listing attacks from working.

+ Solutions and Mitigations

1. Using blank index.html: putting blank index.html simply prevent directory listings from displaying to site visitors.

2. Preventing with .htaccess in Apache web server: In .htaccess, write &quot;Options-indexes&quot;.

3. Suppressing error messages: using error 403 &quot;Forbidden&quot; message exactly like error 404 &quot;Not Found&quot; message.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-128-IntegerAttacks">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-153-InputDataManipulation"/>
		<rdfs:label>Integer Attacks</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker takes advantage of the structure of integer variables to cause these variables to assume values that are not expected by an application. For example, adding one to the largest positive integer in a signed integer variable results in a negative number. Negative numbers may be illegal in an application and the application may prevent an attacker from providing them directly, but the application may not consider that adding two positive numbers can create a negative number do to the structure of integer storage formats.
+ Attack Prerequisites

    The target application must have an integer variable for which only some of the possible integer values are expected by the application and where there are no checks on the value of the variable before use.

    The attacker must be able to manipulate the targeted integer variable such that normal operations result in non-standard values due to the storage structure of integers.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-129-PointerManipulation">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Pointer Manipulation</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

This attack pattern involves an adversary manipulating a pointer within a target application resulting in the application accessing an unintended memory location. This can result in the crashing of the application or, for certain pointer values, access to data that would not normally be possible or the execution of arbitrary code. Since pointers are simply integer variables, Integer Attacks may often be used in Pointer Attacks.
+ Attack Prerequisites

    The target application must have a pointer variable that the attacker can influence to hold an arbitrary value.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-13-SubvertingEnvironmentVariableValues">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-77-ManipulatingUserControlledVariables"/>
		<rdfs:label>Subverting Environment Variable Values</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

The attacker directly or indirectly modifies environment variables used by or controlling the target software. The attacker&apos;s goal is to cause the target software to deviate from its expected operation in a manner that benefits the attacker.
+ Attack Prerequisites

    An environment variable is accessible to the user.

    An environment variable used by the application can be tainted with user supplied data.

    Input data used in an environment variable is not validated properly.

    The variables encapsulation is not done properly. For instance setting a variable as public in a class makes it visible and an attacker may attempt to manipulate that variable.

+ Solutions and Mitigations

Protect environment variables against unauthorized read and write access.

Protect the configuration files which contain environment variables against illegitimate read and write access.

Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.

Apply the least privilege principles. If a process has no legitimate reason to read an environment variable do not give that privilege.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-130-ExcessiveAllocation">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Excessive Allocation</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker causes the target to allocate excessive resources to servicing the attackers&apos; request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources. This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request. For example, using an Integer Attack, the attacker could cause a variable that controls allocation for a request to hold an excessively large value. Excessive allocation of resources can render a service degraded or unavailable to legitimate users and can even lead to crashing of the target.
+ Attack Prerequisites

    The target must accept service requests from the attacker and the attacker must be able to control the resource allocation associated with this request to be in excess of the normal allocation. The latter is usually accomplished through the presence of a bug on the target that allows the attacker to manipulate variables used in the allocation.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-131-ResourceLeakExposure">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Resource Leak Exposure</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker utilizes a resource leak on the target to deplete the quantity of the resource available to service legitimate requests. Resource leaks most often come in the form of memory leaks where memory is allocated but never released after it has served its purpose, however, theoretically, any other resource that can be reserved can be targeted if the target fails to release the reservation when the reserved resource block is no longer needed. In this attack, the attacker determines what activity results in leaked resources and then triggers that activity on the target. Since some leaks may be small, this may require a large number of requests by the attacker. However, this attack differs from a flooding attack in that the rate of requests is generally not significant. This is because the lost resources due to the leak accumulate until the target is reset, usually by restarting it. Thus, a resource-poor attacker who would be unable to flood the target can still utilize this attack.

Resource depletion through leak differs from resource depletion through allocation in that, in the former, the attacker may not be able to control the size of each leaked allocation, but instead allows the leak to accumulate until it is large enough to affect the target&apos;s performance. When depleting resources through allocation, the allocated resource may eventually be released by the target so the attack relies on making sure that the allocation size itself is prohibitive of normal operations by the target.
+ Attack Prerequisites

    The target must have a resource leak that the attacker can repeatedly trigger.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-132-SymlinkAttack">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-159-RedirectAccessToLibraries"/>
		<rdfs:label>Symlink Attack</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker positions a symbolic link in such a manner that the targeted user or application accesses the link&apos;s endpoint, assuming that it is accessing a file with the link&apos;s name. The endpoint file may be either output or input. If the file is output, the result is that the endpoint is modified, instead of a file at the intended location. Modifications to the endpoint file may include appending, overwriting, corrupting, changing permissions, or other modifications. In some variants of this attack the attacker may be able to control the change to a file while in other cases they cannot. The former is especially damaging since the attacker may be able to grant themselves increased privileges or insert false information, but the latter can also be damaging as it can expose sensitive information or corrupt or destroy vital system or application files. Alternatively, the endpoint file may serve as input to the targeted application. This can be used to feed malformed input into the target or to cause the target to process different information, possibly allowing the attacker to control the actions of the target or to cause the target to expose information to the attacker. Moreover, the actions taken on the endpoint file are undertaken with the permissions of the targeted user or application, which may exceed the permissions that the attacker would normally have.
+ Attack Prerequisites

    The targeted application must perform the desired activities on a file without checking whether the file is a symbolic link or not. The attacker must be able to predict the name of the file the target application is modifying and be able to create a new symbolic link where that file would appear.

+ Solutions and Mitigations

Design: Check for the existence of files to be created, if in existence verify they are neither symlinks nor hard links before opening them.

Implementation: Use randomly generated file names for temporary files. Give the files restrictive permissions.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-133-TryAllCommonSwitches">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-113-APIManipulation"/>
		<rdfs:label>Try All Common Switches</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker attempts to invoke all common switches and options in the target application for the purpose of discovering weaknesses in the target. For example, in some applications, adding a --debug switch causes debugging information to be displayed, which can sometimes reveal sensitive processing or configuration information to an attacker. This attack differs from other forms of API abuse in that the attacker is blindly attempting to invoke options in the hope that one of them will work rather than specifically targeting a known option. Nonetheless, even if the attacker is familiar with the published options of a targeted application this attack method may still be fruitful as it might discover unpublicized functionality.
+ Attack Prerequisites

    The attacker must be able to control the options or switches sent to the target.

+ Solutions and Mitigations

Design: Minimize switch and option functionality to only that necessary for correct function of the command.

Implementation: Remove all debug and testing options from production code.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-134-EmaiIInjection">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-137-ParameterInjection"/>
		<rdfs:label>EmaiI Injection</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker manipulates the headers and content of an email message by injecting data via the use of delimiter characters native to the protocol. Many applications allow users to send email messages by filling in fields. For example, a web site may have a link to &quot;share this site with a friend&quot; where the user provides the recipient&apos;s email address and the web application fills out all the other fields, such as the subject and body. In this pattern, an attacker adds header and body information to an email message by injecting additional content in an input field used to construct a header of the mail message. This attack takes advantage of the fact that RFC 822 requires that headers in a mail message be separated by a carriage return. As a result, an attacker can inject new headers or content simply by adding a delimiting carriage return and then supplying the new heading and body information. This attack will not work if the user can only supply the message body since a carriage return in the body is treated as a normal character.
+ Attack Prerequisites

    The target application must allow users to send email to some recipient, must allow the user to specify the content at least one header field in the message, and must fail to sanitize against the injection of command separators.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-135-FormatStringInjection">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-137-ParameterInjection"/>
		<rdfs:label>Format String Injection</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker includes formatting characters in a string input field on the target application. Most applications assume that users will provide static text and may respond unpredictably to the presence of formatting character. For example, in certain functions of the C programming languages such as printf, the formatting character %s will print the contents of a memory location expecting this location to identify a string and the formatting character %n prints the number of DWORD written in the memory. An attacker can use this to read or write to memory locations or files, or simply to manipulate the value of the resulting text in unexpected ways. Reading or writing memory may result in program crashes and writing memory could result in the execution of arbitrary code if the attacker can write to the program stack.
+ Attack Prerequisites

    The target application must accept a strings as user input, fail to sanitize string formatting characters in the user input, and process this string using functions that interpret string formatting characters.

+ Solutions and Mitigations

Limit the usage of formatting string functions.

Strong input validation - All user-controllable input must be validated and filtered for illegal formatting characters.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-136-LDAPInjection">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-248-CommandInjection"/>
		<rdfs:label>LDAP Injection</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker manipulates or crafts an LDAP query for the purpose of undermining the security of the target. Some applications use user input to create LDAP queries that are processed by an LDAP server. For example, a user might provide their username during authentication and the username might be inserted in an LDAP query during the authentication process. An attacker could use this input to inject additional commands into an LDAP query that could disclose sensitive information. For example, entering a * in the aforementioned query might return information about all users on the system. This attack is very similar to an SQL injection attack in that it manipulates a query to gather additional information or coerce a particular return value.
+ Attack Prerequisites

    The target application must accept a string as user input, fail to sanitize characters that have a special meaning in LDAP queries in the user input, and insert the user-supplied string in an LDAP query which is then processed.

+ Solutions and Mitigations

Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as LDAP content.

Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the LDAP or application.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-137-ParameterInjection">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Parameter Injection</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker exploits weaknesses in input validation by manipulating the content of request parameters for the purpose of undermining the security of the target. Some parameter encodings use text characters as separators. For example, parameters in a HTTP GET message are encoded as name-value pairs separated by an ampersand (&amp;). If an attacker can supply text strings that are used to fill in these parameters, then they can inject special characters used in the encoding scheme to add or modify parameters. For example, if user input is fed directly into an HTTP GET request and the user provides the value &quot;myInput&amp;new_param=myValue&quot;, then the input parameter is set to myInput, but a new parameter (new_param) is also added with a value of myValue. This can significantly change the meaning of the query that is processed by the server. Any encoding scheme where parameters are identified and separated by text characters is potentially vulnerable to this attack - the HTTP GET encoding used above is just one example.
+ Attack Prerequisites

    The target application must use a parameter encoding where separators and parameter identifiers are expressed in regular text.

    The target application must accept a string as user input, fail to sanitize characters that have a special meaning in the parameter encoding, and insert the user-supplied string in an encoding which is then processed.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-138-ReflectionInjection">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-137-ParameterInjection"/>
		<rdfs:label>Reflection Injection</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker supplies a value to the target application which is then used by reflection methods to identify a class, method, or field. For example, in the Java programming language the reflection libraries permit an application to inspect, load, and invoke classes and their components by name. If an attacker can control the input into these methods including the name of the class/method/field or the parameters passed to methods, they can cause the targeted application to invoke incorrect methods, read random fields, or even to load and utilize malicious classes that the attacker created. This can lead to the application revealing sensitive information, returning incorrect results, or even having the attacker take control of the targeted application.
+ Attack Prerequisites

    The target application must utilize reflection libraries and allow users to directly control the parameters to these methods.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-139-RelativePathTraversal">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-126-PathTraversal"/>
		<rdfs:label>Relative Path Traversal</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker exploits a weakness in input validation on the target by supplying a specially constructed path utilizing dot and slash characters for the purpose of obtaining access to arbitrary files or resources. An attacker modifies a known path on the target in order to reach material that is not available through intended channels. These attacks normally involve adding additional path separators (/ or \) and/or dots (.), or encodings thereof, in various combinations in order to reach parent directories or entirely separate trees of the target&apos;s directory structure.
+ Attack Prerequisites

    The target application must accept a string as user input, fail to sanitize combinations of characters in the input that have a special meaning in the context of path navigation, and insert the user-supplied string into path navigation commands.

+ Solutions and Mitigations

Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement

Implementation: Perform input validation for all remote content, including remote and user-generated content.

Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- whitelisting approach.

Implementation: Prefer working without user input when using file system calls

Implementation: Use indirect references rather than actual file names.

Implementation: Use possible permissions on file access when developing and deploying web applications.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-14-ClientSideInjectionInducedBufferOverflow">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-100-OverflowBuffers"/>
		<rdfs:label>Client Side Injection Induced Buffer Overflow</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

This type of attack exploits a buffer overflow vulnerability in targeted client software through injection of malicious content from a custom-built hostile service.
+ Attack Prerequisites

    The targeted client software communicates with an external server.

    The targeted client software has a buffer overflow vulnerability.

+ Solutions and Mitigations

The client software should not install untrusted code from a non-authenticated server.

The client software should have the latest patches and should be audited for vulnerabilities before being used to communicate with potentially hostile servers.

Perform input validation for length of buffer inputs.

Use a language or compiler that performs automatic bounds checking.

Use an abstraction library to abstract away risky APIs. Not a complete solution.

Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.

Ensure all buffer uses are consistently bounds-checked.

Use OS-level preventative functionality. Not a complete solution.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-140-BypassingOfIntermediateFormsInMultipleFormSets">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-74-ManipulatingUserState"/>
		<rdfs:label>Bypassing Of Intermediate Forms In Multiple Form Sets</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

Some web applications require users to submit information through an ordered sequence of web forms. This is often done if there is a very large amount of information being collected or if information on earlier forms is used to pre-populate fields or determine which additional information the application needs to collect. An attacker who knows the names of the various forms in the sequence may be able to explicitly type in the name of a later form and navigate to it without first going through the previous forms. This can result in incomplete collection of information, incorrect assumptions about the information submitted by the attacker, or other problems that can impair the functioning of the application.
+ Attack Prerequisites

    The target must collect information from the user in a series of forms where each form has its own URL that the attacker can anticipate and the application must fail to detect attempts to access intermediate forms without first filling out the previous forms.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-141-CachePoisoning">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-161-InfrastructureManipulation"/>
		<rdfs:label>Cache Poisoning</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers&apos; objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application&apos;s cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value.
+ Attack Prerequisites

    The attacker must be able to modify the value stored in a cache to match a desired value.

    The targeted application must not be able to detect the illicit modification of the cache and must trust the cache value in its calculations.

+ Solutions and Mitigations

Configuration: Disable client side caching.

Implementation: Listens for query replies on a network, and sends a notification via email when an entry changes.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-142-DNSCachePoisoning">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-141-CachePoisoning"/>
		<rdfs:label>DNS Cache Poisoning</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

A domain name server translates a domain name (such as www.example.com) into an IP address that Internet hosts use to contact Internet resources. An attacker modifies a public DNS cache to cause certain names to resolve to incorrect addresses that the attacker specifies. The result is that client applications that rely upon the targeted cache for domain name resolution will be directed not to the actual address of the specified domain name but to some other address. Attackers can use this to herd clients to sites that install malware on the victim&apos;s computer or to masquerade as part of a Pharming attack.
+ Attack Prerequisites

    A DNS cache must be vulnerable to some attack that allows the attacker to replace addresses in its lookup table.

    Client applications must trust the corrupted cashed values and utilize them for their domain name resolutions.

+ Solutions and Mitigations

Configuration: Make sure your DNS servers have been updated to the latest versions

Configuration: UNIX services like rlogin, rsh/rcp, xhost, and nfs are all susceptible to wrong information being held in a cache. Care should be taken with these services so they do not rely upon DNS caches that have been exposed to the Internet.

Configuration: Disable client side DNS caching.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-143-DetectUnpublicizedWebPages">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-150-CollectDataFromCommonResourceLocations"/>
		<rdfs:label>Detect Unpublicized Web Pages</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker searches a targeted web site for web pages that have not been publicized. Generally this involves mapping the published web site by spidering through all the published links and then attempt to access well-known debugging or logging pages, or otherwise predictable pages within the site tree. For example, if an attacker might be able to notice a pattern in the naming of documents and extrapolate this pattern to discover additional documents that have been created but are no longer externally linked. Using this, the attacker may be able to gain access to information that the targeted site did not intend to make public.
+ Attack Prerequisites

    The targeted web site must include pages within its published tree that are not connected to its tree of links. The sensitivity of the content of these pages determines the severity of this attack.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-144-DetectUnpublicizedWebServices">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-150-CollectDataFromCommonResourceLocations"/>
		<rdfs:label>DetectUnpublicizedWebServices</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker searches a targeted web site for web services that have not been publicized. Generally this involves mapping the published web site by spidering through all the published links and then attempt to access well-known debugging or logging services, or otherwise predictable services within the site tree. This attack can be especially dangerous since unpublished but available services may not have adequate security controls placed upon them given that an administrator may believe they are unreachable.
+ Attack Prerequisites

    The targeted web site must include unpublished services within its web tree. The nature of these services determines the severity of this attack.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-145-ChecksumSpoofing">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-148-ContentSpoofing"/>
		<rdfs:label>Checksum Spoofing</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker spoofs a checksum message for the purpose of making a payload appear to have a valid corresponding checksum. Checksums are used to verify message integrity. They consist of some value based on the value of the message they are protecting. Hash codes are a common checksum mechanism. Both the sender and recipient are able to compute the checksum based on the contents of the message. If the message contents change between the sender and recipient, the sender and recipient will compute different checksum values. Since the sender&apos;s checksum value is transmitted with the message, the recipient would know that a modification occurred. In checksum spoofing an attacker modifies the message body and then modifies the corresponding checksum so that the recipient&apos;s checksum calculation will match the checksum (created by the attacker) in the message. This would prevent the recipient from realizing that a change occurred.
+ Attack Prerequisites

    The attacker must be able to intercept a message from the sender (keeping the recipient from getting it), modify it, and send the modified message to the recipient.

    The sender and recipient must use a checksum to protect the integrity of their message and transmit this checksum in a manner where the attacker can intercept and modify it.

    The checksum value must be computable using information known to the attacker. A cryptographic checksum, which uses a key known only to the sender and recipient, would thwart this attack.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-146-XMLSchemaPoisoning">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-271-SchemaPoisoning"/>
		<rdfs:label>XML Schema Poisoning</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker corrupts or modifies the content of XML schema information passed between a client and server for the purpose of undermining the security of the target. XML Schemas provide the structure and content definitions for XML documents. Schema poisoning is the ability to manipulate a schema either by replacing or modifying it to compromise the programs that process documents that use this schema. Possible attacks are denial of service attacks by modifying the schema so that it does not contain required information for subsequent processing. For example, the unaltered schema may require a @name attribute in all submitted documents. If the attacker removes this attribute from the schema then documents created using the new grammar may lack this field, which may cause the processing application to enter an unexpected state or record incomplete data. In addition, manipulation of the data types described in the schema may affect the results of calculations taken by the document reader. For example, a float field could be changed to an int field. Finally, the attacker may change the encoding defined in the schema for certain fields allowing the contents to bypass filters that scan for dangerous strings. For example, the modified schema might us a URL encoding instead of ASCII, and a filter that catches a semicolon (;) might fail to detect its URL encoding (%3B).
+ Attack Prerequisites

    The schema used by the target application must be improperly secured against unauthorized modification and manipulation.

+ Solutions and Mitigations

Design: Protect the schema against unauthorized modification.

Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the XML document.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-147-XMLPingOfTheDeath">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-528-XMLFlood"/>
		<rdfs:label>XML Ping Of The Death</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker initiates a resource depletion attack where a large number of small XML messages are delivered at a sufficiently rapid rate to cause a denial of service or crash of the target. Transactions such as repetitive SOAP transactions can deplete resources faster than a simple flooding attack because of the additional resources used by the SOAP protocol and the resources necessary to process SOAP messages. The transactions used are immaterial as long as they cause resource utilization on the target. In other words, this is a normal flooding attack augmented by using messages that will require extra processing on the target.
+ Attack Prerequisites

    The target must receive and process XML transactions.

+ Solutions and Mitigations

Design

Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.

Implementation: Provide for network flow control and traffic shaping to control access to the resources.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-148-ContentSpoofing">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Content Spoofing</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the attackers&apos; content instead of the owner&apos;s content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the attacker will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud if the content governs financial transactions, privacy violations, and other results.
+ Attack Prerequisites

    The target must provide content but fail to adequately protect it against modification.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-149-ExploreForPredictableFileNames">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-169-Footprinting"/>
		<rdfs:label>Explore For Predictable File Names</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker explores a target to identify the names and locations of predictable temporary files for the purpose of launching further attacks against the target. This involves analyzing naming conventions and storage locations of the temporary files created by a target application. If an attacker can predict the names of temporary files they can use this information to mount other attacks, such as information gathering and symlink attacks.
+ Attack Prerequisites

    The targeted application must create names for temporary files using a predictable procedure, e.g. using sequentially increasing numbers.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-15-CommandDelimiters">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-137-ParameterInjection"/>
		<rdfs:label>Command Delimiters</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attack of this type exploits a programs&apos; vulnerabilities that allows an attacker&apos;s commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or a blacklist input validation, as opposed to whitelist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or blacklist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on.
+ Attack Prerequisites

    Software&apos;s input validation or filtering must not detect and block presence of additional malicious command.

+ Solutions and Mitigations

Design: Perform whitelist validation against a positive specification for command length, type, and parameters.

Design: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged account

Implementation: Perform input validation for all remote content.

Implementation: Use type conversions such as JDBC prepared statements.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-150-CollectDataFromCommonResourceLocations">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-116-Excavation"/>
		<rdfs:label>Collect Data From Common Resource Locations</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An adversary exploits well-known locations for resources for the purposes of undermining the security of the target. In many, if not most systems, files and resources are organized in a default tree structure. This can be useful for adversaries because they often know where to look for resources or files that are necessary for attacks. Even when the precise location of a targeted resource may not be known, naming conventions may indicate a small area of the target machine&apos;s file tree where the resources are typically located. For example, configuration files are normally stored in the /etc director on Unix systems. Adversaries can take advantage of this to commit other types of attacks.
+ Attack Prerequisites

    The targeted applications must either expect files to be located at a specific location or, if the location of the files can be configured by the user, the user either failed to move the files from the default location or placed them in a conventional location for files of the given type.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-151-IdentitySpoofing">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Identity Spoofing</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials. Alternatively, an attacker may intercept a message from a legitimate sender and attempt to make it look like the message comes from them without changing its content. The latter form of this attack can be used to hijack credentials from legitimate users. Identity Spoofing attacks need not be limited to transmitted messages - any resource that is associated with an identity (for example, a file with a signature) can be the target of an attack where the adversary attempts to change the apparent identity. This attack differs from Content Spoofing attacks where the adversary does not wish to change the apparent identity of the message but instead wishes to change what the message says. In an Identity Spoofing attack, the adversary is attempting to change the identity of the content.
+ Attack Prerequisites

    The identity associated with the message or resource must be removable or modifiable in an undetectable way for the attacker to perform this attack.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-153-InputDataManipulation">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Input Data Manipulation</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker exploits a weakness in input validation by controlling the format, structure, and composition of data to an input-processing interface. By supplying input of a non-standard or unexpected form an attacker can adversely impact the security of the target. For example, using a different character encoding might cause dangerous text to be treated as safe text. Alternatively, the attacker may use certain flags, such as file extensions, to make a target application believe that provided data should be handled using a certain interpreter when the data is not actually of the appropriate type. This can lead to bypassing protection mechanisms, forcing the target to use specific components for input processing, or otherwise causing the user&apos;s data to be handled differently than might otherwise be expected. This attack differs from Variable Manipulation in that Variable Manipulation attempts to subvert the target&apos;s processing through the value of the input while Input Data Manipulation seeks to control how the input is processed.
+ Attack Prerequisites

    The target must accept user data for processing and the manner in which this data is processed must depend on some aspect of the format or flags that the attacker can control.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-154-ResourceLocationSpoofing">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Resource Location Spoofing</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An adversary, in an attempt to leverage an alternate or malicious resource, causes an application to look for a resource in an unintended location. This differs from a resource manipulation attack in which the contents of the resource are affected or where the resources themselves are physically altered or moved. Instead, this attack simply concerns itself with the paths used to find or create resources.
+ Attack Prerequisites

    None. All applications rely on file paths and so, in theory, they or their resources could be affected by this attack.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-155-ScreenTemporaryFilesForSensitiveInformation">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-150-CollectDataFromCommonResourceLocations"/>
		<rdfs:label>Screen Temporary Files For Sensitive Information</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker exploits the temporary, insecure storage of information by monitoring the content of files used to store temp data during an application&apos;s routine execution flow. Many applications use temporary files to accelerate processing or to provide records of state across multiple executions of the application. Sometimes, however, these temporary files may end up storing sensitive information. By screening an application&apos;s temporary files, an attacker might be able to discover such sensitive information. For example, web browsers often cache content to accelerate subsequent lookups. If the content contains sensitive information then the attacker could recover this from the web cache.
+ Attack Prerequisites

    The target application must utilize temporary files and must fail to adequately secure them against other parties reading them.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-157-SniffingAttacks">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-117-Interception"/>
		<rdfs:label>Sniffing Attacks</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker monitors information transmitted between logical or physical nodes of a network. The attacker need not be able to prevent reception or change content but must simply be able to observe and read the traffic. The attacker might precipitate or indirectly influence the content of the observed transaction, but the attacker is never the intended recipient of the information. Any transmission medium can theoretically be sniffed if the attacker can listen to the contents between the sender and recipient.
+ Attack Prerequisites

    Any target that transmits readable data could be attacked in this way. Cryptographic techniques that render a data-stream unreadable can thwart this type of attack.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-158-SniffingNetworkTraffic">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-157-SniffingAttacks"/>
		<rdfs:label>Sniffing Network Traffic</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An adversary monitors network traffic between nodes of a public or multicast network in an attempt to capture sensitive information. The adversary doesn&apos;t prevent reception or change content but simply observes and reads the traffic. The attacker might precipitate or indirectly influence the content of the observed transaction, but the attacker is never the intended recipient of the information.
+ Attack Prerequisites

    Any target that transmits readable data over a public or multicast network could be attacked in this way.

+ Solutions and Mitigations

Cryptographic techniques that render a data-stream unreadable can thwart this type of attack.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-159-RedirectAccessToLibraries">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-154-ResourceLocationSpoofing"/>
		<rdfs:label>Redirect Access To Libraries</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker exploits the execution flow of a call to an external library to point to an attacker supplied library or code base, allowing the attacker to compromise the application or server via the execution of unauthorized code. An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. If an attacker can redirect an application&apos;s attempts to access these libraries to other libraries that the attacker supplies, the attacker will be able to force the targeted application to execute arbitrary code. This is especially dangerous if the targeted application has enhanced privileges. Access can be redirected through a number of techniques, including the use of symbolic links, search path modification, and relative path manipulation.
+ Attack Prerequisites

    The target must utilize external libraries and must fail to verify the integrity of these libraries before using them.

+ Solutions and Mitigations

Implementation: Restrict the permission to modify the entries in the configuration file.

Implementation: Check the integrity of the dynamically linked libraries before use them.

Implementation: Use obfuscation and other techniques to prevent reverse engineering the libraries.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-16-DictionaryBasedPasswordAttack">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-49-PasswordBruteForcing"/>
		<rdfs:label>Dictionary Based Password Attack</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker tries each of the words in a dictionary as passwords to gain access to the system via some user&apos;s account. If the password chosen by the user was a word within the dictionary, this attack will be successful (in the absence of other mitigations). This is a specific instance of the password brute forcing attack pattern.
+ Attack Prerequisites

    The system uses one factor password based authentication.

    The system does not have a sound password policy that is being enforced.

    The system does not implement an effective password throttling mechanism.

+ Solutions and Mitigations

Create a strong password policy and ensure that your system enforces this policy.

Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-02.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-160-ExploitScriptBasedAPIs">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-113-APIManipulation"/>
		<rdfs:label>Exploit Script Based APIs</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

Some APIs support scripting instructions as arguments. Methods that take scripted instructions (or references to scripted instructions) can be very flexible and powerful. However, if an attacker can specify the script that serves as input to these methods they can gain access to a great deal of functionality. For example, HTML pages support &lt;script&gt; tags that allow scripting languages to be embedded in the page and then interpreted by the receiving web browser. If the content provider is malicious, these scripts can compromise the client application. Some applications may even execute the scripts under their own identity (rather than the identity of the user providing the script) which can allow attackers to perform activities that would otherwise be denied to them.
+ Attack Prerequisites

    The target application must include the use of APIs that execute scripts.

    The target application must allow the attacker to provide some or all of the arguments to one of these script interpretation methods and must fail to adequately filter these arguments for dangerous or unwanted script commands.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-161-InfrastructureManipulation">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Infrastructure Manipulation</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker exploits characteristics of the infrastructure of a network entity in order to perpetrate attacks or information gathering on network objects or effect a change in the ordinary information flow between network objects. Most often, this involves manipulation of the routing of network messages so, instead of arriving at their proper destination, they are directed towards an entity of the attackers&apos; choosing, usually a server controlled by the attacker. The victim is often unaware that their messages are not being processed correctly. For example, a targeted client may believe they are connecting to their own bank but, in fact, be connecting to a Pharming site controlled by the attacker which then collects the user&apos;s login information in order to hijack the actual bank account.
+ Attack Prerequisites

    The targeted client must access the site via infrastructure that the attacker has co-opted and must fail to adequately verify that the communication channel is operating correctly (e.g. by verifying that they are, in fact, connected to the site they intended.)</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-162-ManipulatingHiddenFields">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-77-ManipulatingUserControlledVariables"/>
		<rdfs:label>Manipulating Hidden Fields</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker exploits a weakness in the server&apos;s trust of client-side processing by modifying data on the client-side, such as price information, and then submitting this data to the server to effect a change in the state of an ordinary transaction. eShoplifting is a data manipulation attack against an on-line merchant during a purchasing transaction. The manipulation of price, discount or quantity fields in the transaction message allows the attacker to acquire items at a lower cost than the merchant intended. The attacker performs a normal purchasing transaction but edits hidden fields within the HTML form response that store price or other information to give themselves a better deal. The merchant then uses the modified pricing information in calculating the cost of the selected items.
+ Attack Prerequisites

    The targeted merchant site must use a shopping cart that does not obfuscate the transaction data and does not validate pricing with back end processing.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-163-SpearPhishing">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-98-Phishing"/>
		<rdfs:label>Spear Phishing</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker targets a specific user or group with a Phishing (CAPEC-98) attack tailored to a category of users in order to have maximum relevance and deceptive capability. Spear Phishing is an enhanced version of the Phishing attack targeted to a specific user or group. The quality of the targeted email is usually enhanced by appearing to come from a known or trusted entity. If the email account of some trusted entity has been compromised the message may be digitally signed. The message will contain information specific to the targeted users that will enhance the probability that they will follow the URL to the compromised site. For example, the message may indicate knowledge of the targets employment, residence, interests, or other information that suggests familiarity. As soon as the user follows the instructions in the message, the attack proceeds as a standard Phishing attack.
+ Attack Prerequisites

    None. Any user can be targeted by a Spear Phishing attack.

+ Solutions and Mitigations

Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-164-MobilePhishing">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-98-Phishing"/>
		<rdfs:label>Mobil Phishing</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker targets mobile phone users with a phishing attack for the purpose of soliciting account passwords or sensitive information from the user. Mobile Phishing is a variation on the Phishing social engineering technique where the attack is initiated via mobile texting rather than email. The user is enticed to provide information or go to a compromised web site via a text message. Apart from the manner in which the attack is initiated, the attack proceeds as a standard Phishing attack.
+ Attack Prerequisites

    Attacker needs mobile phone numbers to initiate the connection. The attacker must guess an area of interest for the mobile user to entice them to follow the link provided in the text message. The attacker must have a replicated web site as in a normal Phishing attack.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-165-FileManipulation">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>File Manipulation</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker modifies file contents or attributes (such as extensions or names) of files in a manner to cause incorrect processing by an application. Attackers use this class of attacks to cause applications to enter unstable states, overwrite or expose sensitive information, and even execute arbitrary code with the application&apos;s privileges. This class of attacks differs from attacks on configuration information (even if file-based) in that file manipulation causes the file processing to result in non-standard behaviors, such as buffer overflows or use of the incorrect interpreter. Configuration attacks rely on the application interpreting files correctly in order to insert harmful configuration information. Likewise, resource location attacks rely on controlling an application&apos;s ability to locate files, whereas File Manipulation attacks do not require the application to look in a non-default location, although the two classes of attacks are often combined.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-166-ForceTheSystemToResetValues">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-161-InfrastructureManipulation"/>
		<rdfs:label>Force The System To Reset Values</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker forces the target into a previous state in order to leverage potential weaknesses in the target dependent upon a prior configuration or state-dependent factors. Even in cases where an attacker may not be able to directly control the configuration of the targeted application, they may be able to reset the configuration to a prior state since many applications implement reset functions. Since these functions are usually intended as emergency features to return an application to a stable configuration if the current configuration degrades functionality, they may not be as strongly secured as other configuration options. The resetting of values is dangerous as it may enable undesired functionality, disable services, or modify access controls. At the very least this is a nuisance attack since the administrator will need to re-apply their configuration. At worst, this attack can open avenues for powerful attacks against the application, and, if it isn&apos;t obvious that the configuration has been reset, these vulnerabilities may be present a long time before they are notices.
+ Attack Prerequisites

    The targeted application must have a reset function that returns the configuration of the application to an earlier state.

    The reset functionality must be inadequately protected against use.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-167-WhiteBoxReverseEngineering">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-188-ReverseEngineering"/>
		<rdfs:label>White Box Reverse Engineering</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker discovers the structure, function, and composition of a type of computer software through white box analysis techniques. White box techniques involve methods which can be applied to a piece of software when an executable or some other compiled object can be directly subjected to analysis, revealing at least a portion of its machine instructions that can be observed upon execution.
+ Attack Prerequisites

    Direct access to the object or software.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-168-WindowsDataAlternateDataStream">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-272-ProtocolManipulation"/>
		<rdfs:label>Windows Data Alternate Data Stream</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker exploits the functionality of Microsoft NTFS Alternate Data Streams (ADS) to undermine system security. ADS allows multiple &quot;files&quot; to be stored in one directory entry referenced as filename:streamname. One or more alternate data streams may be stored in any file or directory. Normal Microsoft utilities do not show the presence of an ADS stream attached to a file. The additional space for the ADS is not recorded in the displayed file size. The additional space for ADS is accounted for in the used space on the volume. An ADS can be any type of file. ADS are copied by standard Microsoft utilities between NTFS volumes. ADS can be used by an attacker or intruder to hide tools, scripts, and data from detection by normal system utilities. Many anti-virus programs do not check for or scan ADS. Windows Vista does have a switch (-R) on the command line DIR command that will display alternate streams.
+ Attack Prerequisites

    The target must be running the Microsoft NTFS file system.

+ Solutions and Mitigations

Design: Use FAT file systems which do not support Alternate Data Streams.

Implementation: Use Vista dir with the -R switch or utility to find Alternate Data Streams and take appropriate action with those discovered.

Implementation: Use products that are Alternate Data Stream aware for virus scanning and system security operations.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-169-Footprinting">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Footprinting</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker engages in probing and exploration activity to identify constituents and properties of the target. Footprinting is a general term to describe a variety of information gathering techniques, often used by attackers in preparation for some attack. It consists of using tools to learn as much as possible about the composition, configuration, and security mechanisms of the targeted application, system or network. Information that might be collected during a footprinting effort could include open ports, applications and their versions, network topology, and similar information. While footprinting is not intended to be damaging (although certain activities, such as network scans, can sometimes cause disruptions to vulnerable applications inadvertently) it may often pave the way for more damaging attacks.
+ Attack Prerequisites

    None. Any system or network that can be detected can be footprinted. However, some configuration choices may limit the useful information that can be collected during a footprinting attack.

+ Solutions and Mitigations

Configuration: Keep patches up to date by installing weekly or daily if possible.

Configuration: Shut down unnecessary services/ports.

Policy: Change default passwords by choosing strong passwords.

Implementation: Curtail unexpected input.

Design: Encrypt and password-protect sensitive data.

Policy: Place offline any information that has the potential to identify and compromise your organization&apos;s security such as access to business plans, formulas, and proprietary documents.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-17-AccessingModifyingOrExecutingExecutableFiles">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-1-AccessingFunctionalityNotProperlyConstrainedByACLs"/>
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-165-FileManipulation"/>
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-233-PrivilegeEscalation"/>
		<rdfs:label>Accessing Modifying Or Executing Executable Files</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">ummary

An attack of this type exploits a system&apos;s configuration that allows an attacker to either directly access an executable file, for example through shell access; or in a possible worst case allows an attacker to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.
+ Attack Prerequisites

    System&apos;s configuration must allow an attacker to directly access executable files or upload files to execute. This means that any access control system that is supposed to mediate communications between the subject and the object is set incorrectly or assumes a benign environment.

+ Solutions and Mitigations

Design: Enforce principle of least privilege

Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.

Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-170-WebApplicationFingerprinting">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-541-ApplicationFingerprinting"/>
		<rdfs:label>Web Application Fingerprinting</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker sends a series of probes to a web application in order to elicit version-dependent and type-dependent behavior that assists in identifying the target. An attacker could learn information such as software versions, error pages, and response headers, variations in implementations of the HTTP protocol, directory structures, and other similar information about the targeted service. This information can then be used by an attacker to formulate a targeted attack plan. While web application fingerprinting is not intended to be damaging (although certain activities, such as network scans, can sometimes cause disruptions to vulnerable applications inadvertently) it may often pave the way for more damaging attacks.
+ Attack Prerequisites

    Any web application can be fingerprinted. However, some configuration choices can limit the useful information an attacker may collect during a fingerprinting attack.

+ Solutions and Mitigations

Implementation: Obfuscate server fields of HTTP response.

Implementation: Hide inner ordering of HTTP response header.

Implementation: Customizing HTTP error codes such as 404 or 500.

Implementation: Hide URL file extension.

Implementation: Hide HTTP response header software information filed.

Implementation: Hide cookie&apos;s software information filed.

Implementation: Appropriately deal with error messages.

Implementation: Obfuscate database type in Database API&apos;s error message.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-173-ActionSpoofing">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Action Spoofing</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker is able to disguise one action for another and therefore trick a user into initiating one type of action when they intend to initiate a different action. For example, a user might be led to believe that clicking a button will submit a query, but in fact it downloads software. Attackers may perform this attack through social means, such as by simply convincing a victim to perform the action or relying on a user&apos;s natural inclination to do so, or through technical means, such as a clickjacking attack where a user sees one interface but is actually interacting with a second, invisible, interface.
+ Attack Prerequisites

    The victim must be convinced into performing the decoy action.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-174-FlashParameterInjection">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-137-ParameterInjection"/>
		<rdfs:label>Flash Parameter Injection</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker injects values to global parameters into a Flash movie embedded in an HTML document. These injected parameters are controlled through arguments in the URL used to access the embedding HTML document. As such, this is a form of HTTP parameter injection, but the abilities granted to the Flash document (such as access to a page&apos;s document model, including associated cookies) make this attack more flexible. The injected parameters can allow the attacker to control other objects within the Flash movie as well as full control over the parent document&apos;s DOM model.
+ Solutions and Mitigations

User input must be sanitized according to context before reflected back to the user. The JavaScript function &apos;encodeURI&apos; is not always sufficient for sanitizing input intended for global Flash parameters. Extreme caution should be taken when saving user input in Flash cookies. In such cases the Flash file itself will need to be fixed and recompiled, changing the name of the local shared objects (Flash cookies).</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-175-CodeInclusion">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Code Inclusion</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker exploits a weakness in input validation on the target to force arbitrary code to be retrieved from a remote location and executed. This differs from code injection in that code injection involves the direct inclusion of code while code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application. One example of this sort of attack is PHP file include attacks where the parameter of an include() function is set by a variable that an attacker is able to control. The result is that arbitrary code could be loaded into the PHP application and executed.
+ Attack Prerequisites

    The target application must include external code/libraries that are executed when the application runs and the attacker must be able to influence the specific files that get included.

    The victim must run the targeted application, possibly using the crafted parameters that the attacker uses to identify the code to include.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-176-ConfigurationEnvironmentManipulation">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Configuration Environment Manipulation</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker manipulates files or settings external to a target application which affect the behavior of that application. For example, many applications use external configuration files and libraries - modification of these entities or otherwise affecting the application&apos;s ability to use them would constitute a configuration/environment manipulation attack.
+ Attack Prerequisites

    The target application must consult external files or configuration controls to control its execution. All but the very simplest applications meet this requirement.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-177-CreateFilesWithTheSameNameAsFilesProtectedWithAHigherClassification">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-165-FileManipulation"/>
		<rdfs:label>Create Files With The Same Name As Files Protected With A Higher Classification</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker exploits file location algorithms in an operating system or application by creating a file with the same name as a protected or privileged file. The attacker could manipulate the system if the attacker-created file is trusted by the operating system or an application component that attempts to load the original file. Applications often load or include external files, such as libraries or configuration files. These files should be protected against malicious manipulation. However, if the application only uses the name of the file when locating it, an attacker may be able to create a file with the same name and place it in a directory that the application will search before the directory with the legitimate file is searched. Because the attackers&apos; file is discovered first, it would be used by the target application. This attack can be extremely destructive if the referenced file is executable and/or is granted special privileges based solely on having a particular name.
+ Attack Prerequisites

    The target application must exclude external files. Most non-trivial applications meet this criterion.

    The target application does not verify that a located file is the one it was looking for through means other than the name. Many applications fail to perform checks of this type.

    The directories the target application searches to find the included file include directories writable by the attacker which are searched before the protected directory containing the actual files. It is much less common for applications to meet this criterion, but if an attacker can manipulate the application&apos;s search path (possibly by controlling environmental variables) then they can force this criterion to be met.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-178-CrossSiteFlashing">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-182-FlashInjection"/>
		<rdfs:label>Cross Site Flashing</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker is able to trick the victim into executing a Flash document that passes commands or calls to a Flash player browser plugin, allowing the attacker to exploit native Flash functionality in the client browser. This attack pattern occurs where an attacker can provide a crafted link to a Flash document (SWF file) which, when followed, will cause additional malicious instructions to be executed. The attacker does not need to serve or control the Flash document. The attack takes advantage of the fact that Flash files can reference external URLs. If variables that serve as URLs that the Flash application references can be controlled through parameters, then by creating a link that includes values for those parameters, an attacker can cause arbitrary content to be referenced and possibly executed by the targeted Flash application.
+ Attack Prerequisites

    The targeted Flash application must reference external URLs and the locations thus referenced must be controllable through parameters. The Flash application must fail to sanitize such parameters against malicious manipulation. The victim must follow a crafted link created by the attacker.

+ Solutions and Mitigations

Implementation: Only allow known URL to be included as remote flash movies in a flash application

Configuration: Properly configure the crossdomain.xml file to only include the known domains that should host remote flash movies.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-179-CallingMicroServicesDirectly">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-554-FunctionalityBypass"/>
		<rdfs:label>Calling Micro Services Directly</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker is able to discover and query Micro-services at a web location and thereby expose the Micro-services to further exploitation by gathering information about their implementation and function. Micro-services in web pages allow portions of a page to connect to the server and update content without needing to cause the entire page to update. This allows user activity to change portions of the page more quickly without causing disruptions elsewhere. However, these micro-services may not be subject to the same level of security review as other forms of content. For example, a micro-service that posts requests to a server that are turned into SQL queries may not adequately protect against SQL-injection attacks. As a result, micro-services may provide another vector for a range of attacks. It should be emphasized that the presence of micro-services does not necessarily make a site vulnerable to attack, but they do provide additional complexity to a web page and therefore may contain vulnerabilities that support other attack patterns.
+ Attack Prerequisites

    The target site must use micro-services that interact with the server and one or more of these micro-services must be vulnerable to some other attack pattern.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-18-EmbeddingScriptsInNonScriptElements">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-63-SimpleScriptInjection"/>
		<rdfs:label>Embedding Scripts In Non Script Elements</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

This attack is a form of Cross-Site Scripting (XSS) where malicious scripts are embedded in elements that are not expected to host scripts such as image tags (&lt;img&gt;), comments in XML documents (&lt; !-CDATA-&gt;), etc. These tags may not be subject to the same input validation, output validation, and other content filtering and checking routines, so this can create an opportunity for an attacker to tunnel through the application&apos;s elements and launch a XSS attack through other elements.

As with all remote attacks, it is important to differentiate the ability to launch an attack (such as probing an internal network for unpatched servers) and the ability of the remote attacker to collect and interpret the output of said attack.
+ Attack Prerequisites

    Target client software must be a client that allows script execution based on scripts generated by remote hosts.

+ Solutions and Mitigations

Design: Use browser technologies that do not allow client side scripting.

Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.

Implementation: Perform input validation for all remote content.

Implementation: Perform output validation for all remote content.

Implementation: Disable scripting languages such as JavaScript in browser

Implementation: Session tokens for specific host

Implementation: Service provider should not use the XMLHttpRequest method to create a local proxy for content from other sites, because the client will not be able to discern what content comes from which host.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-180-ExploitingIncorrectlyConfiguredAccessControlSecurityLevels">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-122-PrivilegeAbuse"/>
		<rdfs:label>Exploiting Incorrectly Configured Access Control Security Levels</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack. Most commonly, attackers would take advantage of controls that provided too little protection for sensitive activities in order to perform actions that should be denied to them. In some circumstances, an attacker may be able to take advantage of overly restrictive access control policies, initiating denial of services (if an application locks because it unexpectedly failed to be granted access) or causing other legitimate actions to fail due to security. The latter class of attacks, however, is usually less severe and easier to detect than attacks based on inadequate security restrictions. This attack pattern differs from CAPEC 1, &quot;Accessing Functionality Not Properly Constrained by ACLs&quot; in that the latter describes attacks where sensitive functionality lacks access controls, where, in this pattern, the access control is present, but incorrectly configured.
+ Attack Prerequisites

    The target must apply access controls, but incorrectly configure them. However, not all incorrect configurations can be exploited by an attacker. If the incorrect configuration applies too little security to some functionality, then the attacker may be able to exploit it if the access control would be the only thing preventing an attacker&apos;s access and it no longer does so. If the incorrect configuration applies too much security, it must prevent legitimate activity and the attacker must be able to force others to require this activity..

+ Solutions and Mitigations

Design: Configure the access control correctly.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-181-FlashFileOverlay">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-103-Clickjacking"/>
		<rdfs:label>Flash File Overlay</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker creates a transparent overlay using flash in order to intercept user actions for the purpose of performing a clickjacking attack. In this technique, the Flash file provides a transparent overlay over HTML content. Because the Flash application is on top of the content, user actions, such as clicks, are caught by the Flash application rather than the underlying HTML. The action is then interpreted by the overlay to perform the actions the attacker wishes.
+ Attack Prerequisites

    The victim must be tricked into navigating to the attackers&apos; decoy site and performing the actions on the decoy page.

    The victim&apos;s browser must support invisible Flash overlays.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-182-FlashInjection">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-248-CommandInjection"/>
		<rdfs:label>Flash Injection</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker tricks a victim to execute malicious flash content that executes commands or makes flash calls specified by the attacker. One example of this attack is cross-site flashing, an attacker controlled parameter to a reference call loads from content specified by the attacker.
+ Attack Prerequisites

    The target must be capable of running Flash applications. In some cases, the victim must follow an attacker-supplied link.

+ Solutions and Mitigations

Implementation: remove sensitive information such as user name and password in the SWF file.

Implementation: use validation on both client and server side.

Implementation: remove debug information.

Implementation: use SSL when loading external data

Implementation: use crossdomain.xml file to allow the application domain to load stuff or the SWF file called by other domain.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-183-IMAPSMTPCommandInjection">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-248-CommandInjection"/>
		<rdfs:label>IMAP SMTP Command Injection</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker exploits weaknesses in input validation on IMAP/SMTP servers to execute commands on the server. Web-mail servers often sit between the Internet and the IMAP or SMTP mail server. User requests are received by the web-mail servers which then query the back-end mail server for the requested information and return this response to the user. In an IMAP/SMTP command injection attack, mail-server commands are embedded in parts of the request sent to the web-mail server. If the web-mail server fails to adequately sanitize these requests, these commands are then sent to the back-end mail server when it is queried by the web-mail server, where the commands are then executed. This attack can be especially dangerous since administrators may assume that the back-end server is protected against direct Internet access and therefore may not secure it adequately against the execution of malicious commands.
+ Attack Prerequisites

    The target environment must consist of a web-mail server that the attacker can query and a back-end mail server. The back-end mail server need not be directly accessible to the attacker.

    The web-mail server must fail to adequately sanitize fields received from users and passed on to the back-end mail server.

    The back-end mail server must not be adequately secured against receiving malicious commands from the web-mail server.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-184-SoftwareIntegrityAttack">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Software Integrity Attack</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker initiates a series of events designed to cause a user, program, server, or device to perform actions which undermine the integrity of software code, device data structures, or device firmware, achieving the modification of the target&apos;s integrity to achieve an insecure state.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-185-MaliciousSoftwareDownload">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-184-SoftwareIntegrityAttack"/>
		<rdfs:label>Malicious Software Download</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker uses deceptive methods to cause a user or an automated process to download and install dangerous code that originates from an attacker controlled source. There are several variations to this strategy of attack.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-186-MaliciousSoftwareUpdate">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-184-SoftwareIntegrityAttack"/>
		<rdfs:label>Malicious Software Update</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker uses deceptive methods to cause a user or an automated process to download and install dangerous code believed to be a valid update that originates from an attacker controlled source. Although there are several variations to this strategy of attack, the attack methods are united in that all rely on the ability of an attacker to position and disguise malicious content such that it masquerades as a legitimate software update which is then processed by a program, undermining application integrity. As such the attack employs &apos;spoofing&apos; techniques augmented by psychological or technological mechanisms to disguise the update and/or its source.

Virtually all software requires frequent updates or patches, giving the attacker immense latitude when structuring the attack, as well as many targets of opportunity. Attacks involving malicious software updates can be targeted or untargeted in reference to a population of users, and can also involve manual and automatic means of payload installation. Untargeted attacks rely upon a mass delivery system such as spamming, phishing, or trojans/botnets to distribute emails or other messages to vast populations of users.

Targeted attacks aim at a particular demographic or user population. Corporate Facebook or Myspace pages make it easy to target users of a specific company or affiliation without relying on email address harvesting or spamming. One phishing-assisted variation on this attack involves hosting what appears to be a software update, then harvesting actual email addresses for an organization, or generating commonly used email addresses, and then sending spam, phishing, or spear-phishing emails to the organization&apos;s users requesting that they manually download and install the malicious software update. This type of attack has also been conducted using an Instant Messaging virus payload, which harvests the names from a user&apos;s contact list and sends instant messages to those users to download and apply the update. While both methods involve a high degree of automated mechanisms to support the attack, the primary vector for achieving the installation of the update remains a manual user-directed process, although clicking a link within an IM client or web application may initiate the update.

Automated attacks involving malicious software updates require little to no user-directed activity and are therefore advantageous because they avoid the complex preliminary setup stages of manual attacks, which must effectively &apos;hook&apos; users while avoiding countermeasures such as spam filters or web security filters.
+ Solutions and Mitigations

Validate software updates before installing.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-187-MaliciousAutomatedSoftwareUpdate">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-186-MaliciousSoftwareUpdate"/>
		<rdfs:label>Malicious Automated Software Update</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker exploits a weakness in a server or client&apos;s process of delivering and verifying the integrity of code supplied by an update-providing server or mechanism to cause code of the attackers&apos; choosing to be downloaded and installed as a software update. Attacks against automated update mechanisms involve attack vectors which are specific to the type of update mechanism, but typically involve two different attack strategies: redirection or spoofing. Redirection-based attacks exploit two layers of weaknesses in server or client software to undermine the integrity of the target code-base.

The first weakness involves a failure to properly authenticate a server as a source of update or patch content. This type of weakness typically results from authentication mechanisms which can be defeated, allowing a hostile server to satisfy the criteria that establish a trust relationship. The second weakness is a systemic failure to validate the identity and integrity of code downloaded from a remote location, hence the inability to distinguish malicious code from a legitimate update.

One predominate type of redirection attack requires DNS spoofing or hijacking of a domain name corresponding to an update server. The target software initiates an update request and the DNS request resolves the domain name of the update server to the IP address of the attacker, at which point the software accepts updates either transmitted by or pulled from the attackers&apos; server. Attacks against DNS mechanisms comprise an initial phase of a chain of attacks that facilitate automated update hijacking attack, and such attacks have a precedent in targeted activities that have been as complex as DNS/BIND attacks of corporate infrastructures, to untargeted attacks aimed at compromising home broadband routers, as well as attacks involving the compromise of wireless access points, as well as &apos;evil twin&apos; attacks coupled with DNS redirection. Due to the plethora of options open to the attacker in forcing name resolution to arbitrary servers the Automated Update Hijacking attack strategies are the tip of the spear for many multi-stage attack chains.

The second weakness that is exploited by the attacker is the lack of integrity checking by the software in validating the update. Software which relies only upon domain name resolution to establish the identity of update code is particularly vulnerable, because this signals an absence of other security countermeasures that could be applied to invalidate the attackers&apos; payload on basis of code identity, hashing, signing, encryption, and other integrity checking mechanisms. Redirection-based attack patterns work equally well against client-side software as well as local servers or daemons that provide software update functionality. One precedent of redirection-based attacks involves the active exploitation of Firefox extensions, such as the Google Toolbar, Yahoo Toolbar, Facebook Toolbar, and others.

The second strategy employed in Automated Hijacking Attacks are spoofing strategies, including content or identity spoofing, as well as protocol spoofing. Content or identity spoofing attacks can trigger updates in software by embedding scripted mechanisms within a malicious web page, which masquerades as a legitimate update source. Scripting mechanisms communicate with software components and trigger updates from locations specified by the attackers&apos; server. Such attacks have numerous precedents, one in particular being eTrust Antivirus Webscan Automated Update Remote Code Execution vulnerability (CVE-2006-3976) and (CVE-2006-3977) whereby an ActiveX control could be remotely manipulated by an attacker controlled web page to download and execute the attackers&apos; code without integrity checking.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-188-ReverseEngineering">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Reverse Engineering</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker discovers the structure, function, and composition of an object, resource, or system by using a variety of analysis techniques to effectively determine how the analyzed entity was constructed or operates. The goal of reverse engineering is often to duplicate the function, or a part of the function, of an object in order to duplicate or &quot;back engineer&quot; some aspect of its functioning. Reverse engineering techniques can be applied to mechanical objects, electronic devices, or software, although the methodology and techniques involved in each type of analysis differ widely.

When adversaries are reverse engineering software, methodologies fall into two broad categories, &apos;white box&apos; and &apos;black box.&apos; White box techniques involve methods which can be applied to a piece of software when an executable or some other compiled object can be directly subjected to analysis, revealing at least a portion of its machine instructions that can be observed upon execution. &apos;Black Box&apos; methods involve interacting with the software indirectly, in the absence of the ability to measure, instrument, or analyze an executable object directly. Such analysis typically involves interacting with the software at the boundaries of where the software interfaces with a larger execution environment, such as input-output vectors, libraries, or APIs.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-189-BlackBoxReverseEngineering">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-188-ReverseEngineering"/>
		<rdfs:label>Black Box Reverse Engineering</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker discovers the structure, function, and composition of a type of computer software through black box analysis techniques. &apos;Black Box&apos; methods involve interacting with the software indirectly, in the absence of direct access to the executable object. Such analysis typically involves interacting with the software at the boundaries of where the software interfaces with a larger execution environment, such as input-output vectors, libraries, or APIs.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-19-EmbeddingScriptsWithinScripts">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-242-CodeInjection"/>
		<rdfs:label>Embedding Scripts Within Scripts</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attack of this type exploits a programs&apos; vulnerabilities that are brought on by allowing remote hosts to execute scripts. The attacker leverages this capability to execute scripts to execute his/her own script by embedding it within other scripts that the target software is likely to execute. The attacker must have the ability to inject script into script that is likely to be executed. If this is done, then the attacker can potentially launch a variety of probes and attacks against the web server&apos;s local environment, in many cases the so-called DMZ, back end resources the web server can communicate with, and other hosts.

With the proliferation of intermediaries, such as Web App Firewalls, network devices, and even printers having JVMs and Web servers, there are many locales where an attacker can inject malicious scripts. Since this attack pattern defines scripts within scripts, there are likely privileges to execute said attack on the host.

Of course, these attacks are not solely limited to the server side, client side scripts like Ajax and client side JavaScript can contain malicious scripts as well. In general all that is required is for there to be sufficient privileges to execute a script, but not protected against writing.
+ Attack Prerequisites

    Target software must be able to execute scripts, and also allow attacker to write/upload script

+ Solutions and Mitigations

Design: Use browser technologies that do not allow client side scripting.

Design: Utilize strict type, character, and encoding enforcement

Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client&apos;s browser has no way of discerning where the data is originating from.

Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.

Implementation: Perform input validation for all remote content.

Implementation: Perform output validation for all remote content.

Implementation: Disable scripting languages such as JavaScript in browser

Implementation: Session tokens for specific host

Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.

Implementation: Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-190-ReverseEngineerAnExecutableToExposeAssumedHiddenFunctionalityOrContent">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-167-WhiteBoxReverseEngineering"/>
		<rdfs:label>Reverse Engineer An Executable To Expose Assumed Hidden Functionality Or Content</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker analyzes a binary file or executable for the purpose of discovering the structure, function, and possibly source-code of the file by using a variety of analysis techniques to effectively determine how the software functions and operates. This type of analysis is also referred to as Reverse Code Engineering, as techniques exist for extracting source code from an executable.

Several techniques are often employed for this purpose, both black box and white box. The use of computer bus analyzers and packet sniffers allows the binary to be studied at a level of interactions with its computing environment, such as a host OS, inter-process communication, and/or network communication. This type of analysis falls into the &apos;black box&apos; category because it involves behavioral analysis of the software without reference to source code, object code, or protocol specifications.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-191-ReadSensitiveStringsWithinAnExecutable">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-167-WhiteBoxReverseEngineering"/>
		<rdfs:label>Read Sensitive Strings Within An Executable</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker engages in activities to discover any sensitive strings are present within the compiled code of an executable, such as literal ASCII strings within the file itself, or possibly strings hard-coded into particular routines that can be revealed by code refactoring methods including static and dynamic analysis.

One specific example of a sensitive string is a hard-coded password. Typical examples of software with hard-coded passwords include server-side executables which may check for a hard-coded password or key during a user&apos;s authentication with the server. Hard-coded passwords can also be present in client-side executables which utilize the password or key when connecting to either a remote component, such as a database server, licensing server, or otherwise, or a processes on the same host that expects a key or password.

When analyzing an executable the attacker may search for the presence of such strings by analyzing the byte-code of the file itself. Example utilities for revealing strings within a file include &apos;strings,&apos; &apos;grep,&apos; or other variants of these programs depending upon the type of operating system used. These programs can be used to dump any ASCII or UNICODE strings contained within a program. Strings can also be searched for using a hex editors by loading the binary or object code file and utilizing native search functions such as regular expressions.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-192-ProtocolAnalysis">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Protocol Analysis</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker engages in activities to decipher and/or decode protocol information for a network or application communication protocol used for transmitting information between interconnected nodes or systems on a packet-switched data network. While this type of analysis inherently involves the analysis of a networking protocol, it does not require the presence of an actual or physical network. Although certain techniques for protocol analysis benefit from manipulating live &apos;on-the-wire&apos; interactions between communicating components, static or dynamic analysis techniques applied to executables as well as to device drivers such as network interface drivers, can also be used to reveal the function and characteristics of a communication protocol implementation.

Depending upon the methods used the process may involve observing, interacting, and modifying actual communications occurring between hosts. The goal of protocol analysis is to derive the data transmission syntax, as well as to extract the meaningful content, including packet or content delimiters used by the protocol. This type of analysis is often performed on closed-specification protocols, or proprietary protocols, but is also useful for analyzing publicly available specifications to determine how particular implementations deviate from published specifications.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-193-PHPRemoteFileInclusion">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-253-RemoteCodeInclusion"/>
		<rdfs:label>PHP Remote File Inclusion</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

In this pattern the attacker is able to load and execute arbitrary code remotely available from the application. This is usually accomplished through an insecurely configured PHP runtime environment and an improperly sanitized &quot;include&quot; or &quot;require&quot; call, which the user can then control to point to any web-accessible file. This allows attackers to hijack the targeted application and force it to execute their own instructions.
+ Attack Prerequisites

    Target application server must allow remote files to be included in the &quot;require&quot;, &quot;include&quot;, etc. PHP directives

+ Solutions and Mitigations

Implementation: Perform input validation for all remote content, including remote and user-generated content

Implementation: Only allow known files to be included (whitelist)

Implementation: Make use of indirect references passed in URL parameters instead of file names

Configuration: Ensure that remote scripts cannot be include in the &quot;include&quot; or &quot;require&quot; PHP directives</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-194-FakeTheSourceOfData">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-151-IdentitySpoofing"/>
		<rdfs:label>Fake The Source Of Data</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An adversary provides data under a falsified identity. The purpose of using the falsified identity may be to prevent traceability of the provided data or it might be an attempt by the adversary to assume the rights granted to another identity. One of the simplest forms of this attack would be the creation of an email message with a modified &quot;From&quot; field in order to appear that the message was sent from someone other than the actual sender. Results of the attack vary depending on the details of the attack, but common results include privilege escalation, obfuscation of other attacks, and data corruption/manipulation.
+ Attack Prerequisites

    The target application must associate data with its source. This association could be as simple as logging the source of the data (in which case this attack seeks to create a false trail in the log) or the target application could associate some increased level of access with certain identities (in which case an attacker might seek to impersonate those identities in order to increase privileges).</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-195-PrincipalSpoof">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-151-IdentitySpoofing"/>
		<rdfs:label>Principal Spoof</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

A Principle Spoof is a form of Identity Spoofing where an adversary pretends to be some other person in an interaction. This is often accomplished by crafting a message (either written, verbal, or visual) that appears to come from a person other than the adversary. Phishing and Pharming attacks often attempt to do this so that their attempts to gather sensitive information appear to come from a legitimate source. A Principle Spoof does not use stolen or spoofed authentication credentials, instead relying on the appearance and content of the message to reflect identity. The possible outcomes of a Principal Spoof mirror those of Identity Spoofing. (e.g., escalation of privilege and false attribution of data or activities) Likewise, most techniques for Identity Spoofing (crafting messages or intercepting and replaying or modifying messages) can be used for a Principal Spoof attack. However, because a Principal Spoof is used to impersonate a person, social engineering can be both an attack technique (using social techniques to generate evidence in support of a false identity) as well as a possible outcome (manipulating people&apos;s perceptions by making statements or performing actions under a target&apos;s name).
+ Attack Prerequisites

    The target must associate data or activities with an person&apos;s identity and the adversary must be able to modify this identity without detection.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-196-SessionCredentialFalsificationThroughForging">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-21-ExploitationOfTrustedCredentials"/>
		<rdfs:label>Session Credential Falsification Through Forging</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker creates a false but functional session credential in order to gain or usurp access to a service. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. If an attacker is able to forge valid session credentials they may be able to bypass authentication or piggy-back off some other authenticated user&apos;s session. This attack differs from Reuse of Session IDs and Session Sidejacking attacks in that in the latter attacks an attacker uses a previous or existing credential without modification while, in a forging attack, the attacker must create their own credential, although it may be based on previously observed credentials.
+ Attack Prerequisites

    The targeted application must use session credentials to identify legitimate users. Session identifiers that remains unchanged when the privilege levels change. Predictable session identifiers.

+ Solutions and Mitigations

Implementation: Use session IDs that are difficult to guess or brute-force: One way for the attackers to obtain valid session IDs is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult.

Implementation: Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-197-XMLEntityExpansion">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-230-XMLNestedPayloads"/>
		<rdfs:label>XML Entity Expansion</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker submits an XML document to a target application where the XML document uses nested entity expansion to produce an excessively large output XML. XML allows the definition of macro-like structures that can be used to simplify the creation of complex structures. However, this capability can be abused to create excessive demands on a processor&apos;s CPU and memory. A small number of nested expansions can result in an exponential growth in demands on memory.
+ Attack Prerequisites

    This type of attack requires that the target must receive XML input but either fail to provide an upper limit for entity expansion or provide a limit that is so large that it does not preclude significant resource consumption.

+ Solutions and Mitigations

Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.

Implementation: Disable altogether the use of inline DTD schemas in your XML parsing objects. If must use DTD, normalize, filter and white list and parse with methods and routines that will detect entity expansion from untrusted sources.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-198-CrossSiteScriptingInErrorPages">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-18-EmbeddingScriptsInNonScriptElements"/>
		<rdfs:label>Cross Site Scripting In Error Pages</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker distributes a link (or possibly some other query structure) with a request to a third party web server that is malformed and also contains a block of exploit code in order to have the exploit become live code in the resulting error page. When the third party web server receives the crafted request and notes the error it then creates an error message that echoes the malformed message, including the exploit. Doing this converts the exploit portion of the message into to valid language elements that are executed by the viewing browser. When a victim executes the query provided by the attacker the infected error message error message is returned including the exploit code which then runs in the victim&apos;s browser. XSS can result in execution of code as well as data leakage (e.g. session cookies can be sent to the attacker). This type of attack is especially dangerous since the exploit appears to come from the third party web server, who the victim may trust and hence be more vulnerable to deception.
+ Attack Prerequisites

    A third party web server which fails to adequately sanitize messages sent in error pages.

    The victim must be made to execute a query crafted by the attacker which results in the infected error report.

+ Solutions and Mitigations

Design: Use libraries and templates that minimize unfiltered input.

Implementation: Normalize, filter and white list any input that will be used in error messages.

Implementation: The victim should configure the browser to minimize active content from untrusted sources.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-199-CrossSiteScriptingUsingAlternateSyntax">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-18-EmbeddingScriptsInNonScriptElements"/>
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-220-ClientServerProtocolManipulation"/>
		<rdfs:label>Cross Site Scripting Using Alternate Syntax</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

The attacker uses alternate forms of keywords or commands that result in the same action as the primary form but which may not be caught by filters. For example, many keywords are processed in a case insensitive manner. If the site&apos;s web filtering algorithm does not convert all tags into a consistent case before the comparison with forbidden keywords it is possible to bypass filters (e.g., incomplete black lists) by using an alternate case structure. For example, the &quot;script&quot; tag using the alternate forms of &quot;Script&quot; or &quot;ScRiPt&quot; may bypass filters where &quot;script&quot; is the only form tested. Other variants using different syntax representations are also possible as well as using pollution meta-characters or entities that are eventually ignored by the rendering engine. The attack can result in the execution of otherwise prohibited functionality.
+ Attack Prerequisites

    Target client software must allow scripting such as JavaScript.

+ Solutions and Mitigations

Design: Use browser technologies that do not allow client side scripting.

Design: Utilize strict type, character, and encoding enforcement

Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.

Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.

Implementation: Perform input validation for all remote content, including remote and user-generated content

Implementation: Perform output validation for all remote content.

Implementation: Disable scripting languages such as JavaScript in browser

Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-2-InducingAccountLockout">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-212-FunctionalityMisuse"/>
		<rdfs:label>Inducing Account Lockout</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker leverages the security functionality of the system aimed at thwarting potential attacks to launch a denial of service attack against a legitimate system user. Many systems, for instance, implement a password throttling mechanism that locks an account after a certain number of incorrect log in attempts. An attacker can leverage this throttling mechanism to lock a legitimate user out of their own account. The weakness that is being leveraged by an attacker is the very security feature that has been put in place to counteract attacks.
+ Attack Prerequisites

    The system has a lockout mechanism.

    An attacker must be able to reproduce behavior that would result in an account being locked.

+ Solutions and Mitigations

Implement intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.

When implementing security features, consider how they can be misused and made to turn on themselves.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-20-EncryptionBruteForce">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-112-BruteForce"/>
		<rdfs:label>Encryption Brute Force</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker, armed with the cipher text and the encryption algorithm used, performs an exhaustive (brute force) search on the key space to determine the key that decrypts the cipher text to obtain the plaintext.
+ Attack Prerequisites

    Ciphertext is known.

    Encryption algorithm and key size are known.

+ Solutions and Mitigations

Use commonly accepted algorithms and recommended key sizes. The key size used will depend on how important it is to keep the data confidential and for how long.

In theory a brute force attack performing an exhaustive key space search will always succeed, so the goal is to have computational security. Moore&apos;s law needs to be taken into account that suggests that computing resources double every eighteen months.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-200-RemovalOfFiltersInputFiltersOutputFiltersDataMasking">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-207-RemovingImportantClientFunctionality"/>
		<rdfs:label>Removal Of Filters Input Filters Output Filters Data Masking</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker removes or disables filtering mechanisms on the target application. Input filters prevent invalid data from being sent to an application (for example, overly large inputs that might cause a buffer overflow or other malformed inputs that may not be correctly handled by an application). Input filters might also be designed to constrained executable content. For example, if an application accepts scripting languages as input, an input filter could constrain the commands received and block those that the application&apos;s administrator deems to be overly powerful. An output filter screens responses from an application or person in order to prevent disclosure of sensitive information. For example, an application&apos;s output filter might block output that is sourced to sensitive folders or which contains certain keywords. A data mask is similar to an output filter, but usually applies to structured data, such as found in databases. Data masks elide or replace portions of the information returned from a query in order to protect against the disclosure of sensitive information.

If an input filter is removed the attacker will be able to send content to the target and have the target utilize it without it being sanitized. If the content sent by the attacker is executable, the attacker may be able to execute arbitrary commands on the target. If an output filter or data masking mechanism is disabled, the target may send out sensitive information that would otherwise be elided by the filters. If the data mask is disabled, sensitive information stored in a database would be returned unaltered. This could result in the disclosure of sensitive information, such as social security numbers of payment records.

This attack is usually executed as part of a larger attack series. The attacker would disable filters and would then mount additional attacks to either insert commands or data or query the target application in ways that would otherwise be prevented by the filters.
+ Attack Prerequisites

    The target application must utilize some sort of filtering mechanism (input, output, or data masking).</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-201-XMLEntityBlowup">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-221-XMLExternalEntities"/>
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-231-XMLOversizedPayloads"/>
		<rdfs:label>XML Entity Blowup</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker creates an XML document that with an external entity reference. External entity references can take the form of &lt;!ENTITY name system &quot;uri&quot;&gt; tags in a DTD. Because processors may not validate documents with external entities, there may be no checks on the nature of the reference in the external entity. This can allow an attacker to open arbitrary files or connections. For example, the following DTD would attempt to open the /dev/tty device:
&lt;!DOCTYPE doc [ &lt;!ENTITY ent SYSTEM &quot;file:///dev/tty&quot;&gt; ]&gt;
+ Attack Prerequisites

    The target must follow external entity references without validating the validity of the reference target.

+ Solutions and Mitigations

Configure the XML processor to only retrieve external entities from trusted sources.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-202-CreateMaliciousClient">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-22-ExploitingTrustInClient"/>
		<rdfs:label>Create Malicious Client</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An adversary creates a client application to interface with a target service where the client violates assumptions the service makes about clients. Services that have designated client applications (as opposed to services that use general client applications, such as IMAP or POP mail servers which can interact with any IMAP or POP client) may assume that the client will follow specific procedures. For example, servers may assume that clients will accurately compute values (such as prices), will send correctly structured messages, and will attempt to ensure efficient interactions with the server. By reverse-engineering a client and creating their own version, an adversary can take advantage of these assumptions to abuse service functionality. For example, a purchasing service might send a unit price to its client and expect the client to correctly compute the total cost of a purchase. If the adversary uses a malicious client, however, the adversary could ignore the server input and declare any total price. Likewise, an adversary could configure the client to retain network or other server resources for longer than legitimately necessary in order to degrade server performance.

Even services with general clients can be susceptible to this attack if they assume certain client behaviors. However, such services generally can make fewer assumptions about the behavior of their clients in the first place and, as such, are less likely to make assumptions that an adversary can exploit.
+ Attack Prerequisites

    The targeted service must make assumptions about the behavior of the client application that interacts with it, which can be abused by an adversary.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-203-ManipulateApplicationRegistryValues">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-176-ConfigurationEnvironmentManipulation"/>
		<rdfs:label>Manipulate Application Registry Values</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker manipulates the registry values used by an application to perform a variety of possible attacks. Many applications utilize registries to store configuration and service information. As such, attacks that manipulate these registries can affect individual services (affecting billing, authorization, or even allowing for identity spoofing) or the overall configuration of the targeted application. It is important to note that &quot;registry&quot; does not only refer to the Microsoft Windows Registry, but to any registry used by an application. For example, both Java RMI and SOAP use registries to track available services. Changing registry values is sometimes undertaken as part of another attack; for example, a path traversal (inserting relative path modifiers) or buffer overflow (enlarging a registry value beyond an application&apos;s ability to store it), but given the long term usage of many registry values, the registry manipulation could be its own end.
+ Attack Prerequisites

    The targeted application must rely on values stored in a registry.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-204-LiftingSensitiveDataEmbeddedInCache">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-167-WhiteBoxReverseEngineering"/>
		<rdfs:label>Lifting Sensitive Data Embedded In Cache</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker examines a target application&apos;s cache for sensitive information. Many applications that communicate with remote entities or which perform intensive calculations utilize caches to improve efficiency. However, if the application computes or receives sensitive information and the cache is not appropriately protected, an attacker can browse the cache and retrieve this information. This can result in the disclosure of sensitive information.
+ Attack Prerequisites

    The target application must store sensitive information in a cache.

    The cache must be inadequately protected against attacker access.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-206-LiftingSigningKeyAndSigningMaliciousCodeFromAProductionEnvironment">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-68-SubvertCodeSigningFacilities"/>
		<rdfs:label>Lifting Signing Key And Signing Malicious Code From A Production Environment</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

The attacker extracts credentials used for code signing from a production environment and uses these credentials to sign malicious content with the developer&apos;s key. Many developers use signing keys to sign code or hashes of code. When users or applications verify the signatures are accurate they are led to believe that the code came from the owner of the signing key and that the code has not been modified since the signature was applied. If the attacker has extracted the signing credentials then they can use those credentials to sign their own code bundles. Users or tools that verify the signatures attached to the code will likely assume the code came from the legitimate developer and install or run the code, effectively allowing the attacker to execute arbitrary code on the victim&apos;s computer.
+ Attack Prerequisites

    The targeted developer must use a signing key to sign code bundles. (Note that not doing this is not a defense - it only means that the attacker does not need to steal the signing key before forging code bundles in the developer&apos;s name.)</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-207-RemovingImportantClientFunctionality">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-22-ExploitingTrustInClient"/>
		<rdfs:label>Removing Important Client Functionality</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker removes or disables functionality on the client that the server assumes to be present and trustworthy. Attackers can, in some cases, get around logic put in place to &apos;guard&apos; sensitive functionality or data. Client applications may include functionality that a server relies on for correct and secure operation. This functionality can include, but is not limited to, filters to prevent the sending of dangerous content to the server, logical functionality such as price calculations, and authentication logic to ensure that only authorized users are utilizing the client. If an attacker can disable this functionality on the client, they can perform actions that the server believes are prohibited. This can result in client behavior that violates assumptions by the server leading to a variety of possible attacks. In the above examples, this could include the sending of dangerous content (such as scripts) to the server, incorrect price calculations, or unauthorized access to server resources.
+ Attack Prerequisites

    The targeted server must assume the client performs important actions to protect the server or the server functionality. For example, the server may assume the client filters outbound traffic or that the client performs all price calculations correctly. Moreover, the server must fail to detect when these assumptions are violated by a client.

+ Solutions and Mitigations

Design: For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side.

Design: Ship client-side application with integrity checks (code signing) when possible.

Design: Use obfuscation and other techniques to prevent reverse engineering the client code.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-208-RemovingShortCircuitingPurseLogicRemovingMutatingCashDecrements">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-207-RemovingImportantClientFunctionality"/>
		<rdfs:label>Removing Short Circuiting Purse Logic Removing Mutating Cash Decrements</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker removes or modifies the logic on a client associated with monetary calculations resulting in incorrect information being sent to the server. A server may rely on a client to correctly compute monetary information. For example, a server might supply a price for an item and then rely on the client to correctly compute the total cost of a purchase given the number of items the user is buying. If the attacker can remove or modify the logic that controls these calculations, they can return incorrect values to the server. The attacker can use this to make purchases for a fraction of the legitimate cost or otherwise avoid correct billing for activities.
+ Attack Prerequisites

    The targeted server must rely on the client to correctly perform monetary calculations and must fail to detect errors in these calculations.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-209-CrossSiteScriptingUsingMIMETypeMismatch">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-18-EmbeddingScriptsInNonScriptElements"/>
		<rdfs:label>Cross Site Scripting Using MIME Type Mismatch</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker creates a file with scripting content but where the specified MIME type of the file is such that scripting is not expected. Some browsers will detect that the specified MIME type of the file does not match the actual type of the content and will automatically switch to using an interpreter for the real content type. If the browser does not invoke script filters before doing this, the attackers&apos; script may run on the target unsanitized. For example, the MIME type text/plain may be used where the actual content is text/javascript or text/html. Since text does not contain scripting instructions, the stated MIME type would indicate that filtering is unnecessary. However, if the target application subsequently determines the file&apos;s real type and invokes the appropriate interpreter, scripted content could be invoked. In another example, img tags in HTML content could reference a renderable type file instead of an expected image file. The file extension and MIME type can describe an image file, but the file content can be text/javascript or text/html resulting in script execution. If the browser assumes all references in img tags are images, and therefore do not need to be filtered for scripts, this would bypass content filters. In a cross-site scripting attack, the attacker tricks the victim into accessing a URL that uploads a script file with an incorrectly specified MIME type. If the victim&apos;s browser switches to the appropriate interpreter without filtering, the attack will execute as a standard XSS attack, possibly revealing the victim&apos;s cookies or executing arbitrary script in their browser.
+ Attack Prerequisites

    The victim must follow a crafted link that references a scripting file that is mis-typed as a non-executable file.

    The victim&apos;s browser must detect the true type of a mis-labeled scripting file and invoke the appropriate script interpreter without first performing filtering on the content.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-21-ExploitationOfTrustedCredentials">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Exploitation Of Trusted Credentials</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

Attacks on session IDs and resource IDs take advantage of the fact that some software accepts user input without verifying its authenticity. For example, a message queuing system that allows service requesters to post messages to its queue through an open channel (such as anonymous FTP), authorization is done through checking group or role membership contained in the posted message. However, there is no proof that the message itself, the information in the message (such group or role membership), or indeed the process that wrote the message to the queue are authentic and authorized to do so.

Many server side processes are vulnerable to these attacks because the server to server communications have not been analyzed from a security perspective or the processes &quot;trust&quot; other systems because they are behind a firewall. In a similar way servers that use easy to guess or spoofable schemes for representing digital identity can also be vulnerable. Such systems frequently use schemes without cryptography and digital signatures (or with broken cryptography). Session IDs may be guessed due to insufficient randomness, poor protection (passed in the clear), lack of integrity (unsigned), or improperly correlation with access control policy enforcement points.

Exposed configuration and properties files that contain system passwords, database connection strings, and such may also give an attacker an edge to identify these identifiers.

The net result is that spoofing and impersonation is possible leading to an attacker&apos;s ability to break authentication, authorization, and audit controls on the system.
+ Attack Prerequisites

    Server software must rely on weak session IDs proof and/or verification schemes

+ Solutions and Mitigations

Design: utilize strong federated identity such as SAML to encrypt and sign identity tokens in transit.

Implementation: Use industry standards session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf.

Implementation: If the session identifier is used for authentication, such as in the so-called single sign on use cases, then ensure that it is protected at the same level of assurance as authentication tokens.

Implementation: If the web or application server supports it, then encrypting and/or signing the session ID (such as cookie) can protect the ID if intercepted.

Design: Use strong session identifiers that are protected in transit and at rest.

Implementation: Utilize a session timeout for all sessions, for example 20 minutes. If the user does not explicitly logout, the server terminates their session after this period of inactivity. If the user logs back in then a new session key is generated.

Implementation: Verify of authenticity of all session IDs at runtime.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-212-FunctionalityMisuse">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Functionality Misuse</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An adversary misuses the functionality of an application in order to achieve a negative technical impact. In this pattern of attack, the system functionality is not altered or modified, rather it is used in a way that was not intended. This is often accomplished through overuse of the functionality, or by leveraging functionality with design flaws that enables</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-214-FuzzingForGarneringJ2EENetBasedStackTracesForApplicationMapping">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-54-QuerySystemForInformation"/>
		<rdfs:label>Fuzzing For Garnering J2EE Net Based Stack Traces For Application Mapping</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes any stack traces produced by error messages. Fuzzing techniques involve sending random or malformed messages to a target and monitoring the target&apos;s response. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger&apos;s desired behavior. In this attack, the purpose of the fuzzing is to cause the targeted application to return an error including a stack trace, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash. The stack trace enumerates the chain of methods that led up to the point where the error was encountered. This can not only reveal the names of the methods (some of which may have known weaknesses) but possibly also the location of class files and libraries as well as parameter values. In some cases, the stack trace might even disclose sensitive configuration or user information.
+ Attack Prerequisites

    The target application must fail to sanitize incoming messages adequately before processing and must generate a stack trace in at least some error situations.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-215-FuzzingAndObservingApplicationLogDataErrorsForApplicationMapping">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-54-QuerySystemForInformation"/>
		<rdfs:label>Fuzzing And Observing Application Log Data Errors For Application Mapping</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes the application&apos;s log or error messages returned. Fuzzing techniques involve sending random or malformed messages to a target and monitoring the target&apos;s response. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger&apos;s desired behavior. In this attack, the purpose of the fuzzing is to observe the application&apos;s log and error messages, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash. By observing logs and error messages, the attacker can learn details about the configuration of the target application and might be able to cause the target to disclose sensitive information.
+ Attack Prerequisites

    The target application must fail to sanitize incoming messages adequately before processing.

+ Solutions and Mitigations

Design: Construct a &apos;code book&apos; for error messages. When using a code book, application error messages aren&apos;t generated in string or stack trace form, but are catalogued and replaced with a unique (often integer-based) value &apos;coding&apos; for the error. Such a technique will require helpdesk and hosting personnel to use a &apos;code book&apos; or similar mapping to decode application errors/logs in order to respond to them normally.

Design: wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above &apos;code book&apos; suggestion.

Implementation: Obfuscate server fields of HTTP response.

Implementation: Hide inner ordering of HTTP response header.

Implementation: Customizing HTTP error codes such as 404 or 500.

Implementation: Hide HTTP response header software information filed.

Implementation: Hide cookie&apos;s software information filed.

Implementation: Obfuscate database type in Database API&apos;s error message.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-216-CommunicationChannelManipulation">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Communication Channel Manipulation</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker may take advantage of communications protocol by influencing or manipulating a security setting or parameter to cause compromise to the communications. This can result in the disclosure of information, insertion or removal of information from the communications stream, and even include remote system compromise.
+ Attack Prerequisites

    Access to the communication stream.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-217-ExploitingIncorrectlyConfiguredSSL">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-216-CommunicationChannelManipulation"/>
		<rdfs:label>Exploiting Incorrectly Configured SSL</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An adversary takes advantage of incorrectly configured SSL communications that enables access to data intended to be encrypted. The adversary may also use this type of attack to inject commands or other traffic into the encrypted stream to cause compromise of either the client or server.
+ Attack Prerequisites

    Access to the client/server stream.

+ Solutions and Mitigations

Usage of configuration settings, such as stream ciphers vs. block ciphers and setting timeouts on SSL sessions to extremely low values lessens the potential impact. Use of later versions of TLS (e.g. TLS 1.1+) can also be effective, but not all clients or servers support the later versions.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-218-SpoofingOfUDDIEbXMLMessages">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-148-ContentSpoofing"/>
		<rdfs:label>Spoofing Of UDDI EbXML Messages</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker spoofs a UDDI, ebXML, or similar message in order to impersonate a service provider in an e-business transaction. UDDI, ebXML, and similar standards are used to identify businesses in e-business transactions. Among other things, they identify a particular participant, WSDL information for SOAP transactions, and supported communication protocols, including security protocols. By spoofing one of these messages an attacker could impersonate a legitimate business in a transaction or could manipulate the protocols used between a client and business. This could result in disclosure of sensitive information, loss of message integrity, or even financial fraud.
+ Attack Prerequisites

    The targeted business&apos;s UDDI or ebXML information must be served from a location that the attacker can spoof or compromise or the attacker must be able to intercept and modify unsecured UDDI/ebXML messages in transit.

+ Solutions and Mitigations

Implementation: Clients should only trust UDDI, ebXML, or similar messages that are verifiably signed by a trusted party.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-219-XMLRoutingDetourAttacks">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-94-ManInTheMiddleAttack"/>
		<rdfs:label>XML Routing Detour Attacks</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker subverts an intermediate system used to process XML content and forces the intermediate to modify and/or re-route the processing of the content. XML Routing Detour Attacks are Man in the Middle type attacks. The attacker compromises or inserts an intermediate system in the processing of the XML message. For example, WS-Routing can be used to specify a series of nodes or intermediaries through which content is passed. If any of the intermediate nodes in this route are compromised by an attacker they could be used for a routing detour attack. From the compromised system the attacker is able to route the XML process to other nodes of his or her choice and modify the responses so that the normal chain of processing is unaware of the interception. This system can forward the message to an outside entity and hide the forwarding and processing from the legitimate processing systems by altering the header information.
+ Attack Prerequisites

    The targeted system must have multiple stages processing of XML content.

+ Solutions and Mitigations

Design: Specify maximum number intermediate nodes for the request and require SSL connections with mutual authentication.

Implementation: Use SSL for connections between all parties with mutual authentication.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-22-ExploitingTrustInClient">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Exploiting Trust In Client</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attack of this type exploits vulnerabilities in client/server communication channel authentication and data integrity. It leverages the implicit trust a server places in the client, or more importantly, that which the server believes is the client. An attacker executes this type of attack by placing themselves in the communication channel between client and server such that communication directly to the server is possible where the server believes it is communicating only with a valid client. There are numerous variations of this type of attack.
+ Attack Prerequisites

    Server software must rely on client side formatted and validated values, and not reinforce these checks on the server side.

+ Solutions and Mitigations

Design: Ensure that client process and/or message is authenticated so that anonymous communications and/or messages are not accepted by the system.

Design: Do not rely on client validation or encoding for security purposes.

Design: Utilize digital signatures to increase authentication assurance.

Design: Utilize two factor authentication to increase authentication assurance.

Implementation: Perform input validation for all remote content.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-220-ClientServerProtocolManipulation">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-272-ProtocolManipulation"/>
		<rdfs:label>Client Server Protocol Manipulation</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An adversary takes advantage of weaknesses in the protocol by which a client and server are communicating to perform unexpected actions. Communication protocols are necessary to transfer messages between client and server applications. Moreover, different protocols may be used for different types of interactions. For example, an authentication protocol might be used to establish the identities of the server and client while a separate messaging protocol might be used to exchange data. If there is a weakness in a protocol used by the client and server, an attacker might take advantage of this to perform various types of attacks. For example, if the attacker is able to manipulate an authentication protocol, the attacker may be able spoof other clients or servers. If the attacker is able to manipulate a messaging protocol, the may be able to read sensitive information or modify message contents. This attack is often made easier by the fact that many clients and servers support multiple protocols to perform similar roles. For example, a server might support several different authentication protocols in order to support a wide range of clients, including legacy clients. Some of the older protocols may have vulnerabilities that allow an attacker to manipulate client-server interactions.
+ Attack Prerequisites

    The client and/or server must utilize a protocol that has a weakness allowing manipulation of the interaction.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-221-XMLExternalEntities">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-122-PrivilegeAbuse"/>
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-278-WebServicesProtocolManipulation"/>
		<rdfs:label>XML External Entities</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

This attack takes advantage of the entity replacement property of XML where the value of the replacement is a URI. A well-crafted XML document could have the entity refer to a URI that consumes a large amount of resources to create a denial of service condition. This can cause the system to either freeze, crash, or execute arbitrary code depending on the URI.
+ Attack Prerequisites

    A server that has an implementation that accepts entities containing URI values.

+ Solutions and Mitigations

This attack may be mitigated by tweaking the XML parser to not resolve external entities. If external entities are needed, then implement a custom XmlResolver that has a request timeout, data retrieval limit, and restrict resources it can retrieve locally.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-222-IFrameOverlay">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-103-Clickjacking"/>
		<rdfs:label>iFrame Overlay</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

In an iFrame overlay attack the victim is tricked into unknowingly initiating some action in one system while interacting with the UI from seemingly completely different system. While being logged in to some target system, the victim visits the attackers&apos; malicious site which displays a UI that the victim wishes to interact with. In reality, the iFrame overlay page has a transparent layer above the visible UI with action controls that the attacker wishes the victim to execute. The victim clicks on buttons or other UI elements they see on the page which actually triggers the action controls in the transparent overlaying layer. Depending on what that action control is, the attacker may have just tricked the victim into executing some potentially privileged (and most undesired) functionality in the target system to which the victim is authenticated. The basic problem here is that there is a dichotomy between what the victim thinks he or she is clicking on versus what he or she is actually clicking on.
+ Attack Prerequisites

    The victim is communicating with the target application via a web based UI and not a thick client. The victim&apos;s browser security policies allow iFrames. The victim uses a modern browser that supports UI elements like clickable buttons (i.e. not using an old text only browser). The victim has an active session with the target system. The target system&apos;s interaction window is open in the victim&apos;s browser and supports the ability for initiating sensitive actions on behalf of the user in the target system.

+ Solutions and Mitigations

Configuration: Disable iFrames in the Web browser.

Operation: When maintaining an authenticated session with a privileged target system, do not use the same browser to navigate to unfamiliar sites to perform other activities. Finish working with the target system and logout first before proceeding to other tasks.

Operation: If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-224-Fingerprinting">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Fingerprinting</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An adversary compares output from a target system to known &quot;fingerprints&quot; that uniquely identify specific details about the target. Fingerprinting by itself is not usually detrimental to the target. However, the information gathered through fingerprinting often enables an adversary to discover existing weaknesses in the target.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-226-SessionCredentialFalsificationThroughManipulation">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-196-SessionCredentialFalsificationThroughForging"/>
		<rdfs:label>Session Credential Falsification Through Manipulation</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker manipulates an existing credential in order to gain access to a target application. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. An attacker may be able to manipulate a credential sniffed from an existing connection in order to gain access to a target server. For example, a credential in the form of a web cookie might have a field that indicates the access rights of a user. By manually tweaking this cookie, a user might be able to increase their access rights to the server. Alternately an attacker may be able to manipulate an existing credential to appear as a different user. This attack differs from falsification through prediction in that the user bases their modified credentials off existing credentials instead of using patterns detected in prior credentials to create a new credential that is accepted because it fits the pattern. As a result, an attacker may be able to impersonate other users or elevate their permissions to a targeted service.
+ Attack Prerequisites

    The targeted application must use session credentials to identify legitimate users.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-227-SustainedClientEngagement">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Sustained Client Engagement</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An adversary attempts to deny legitimate users access to a resource by continually engaging a specific resource in an attempt to keep the resource tied up as long as possible. The adversary&apos;s primary goal is not to crash or flood the target, which would alert defenders; rather it is to repeatedly perform actions or abuse algorithmic flaws such that a given resource is tied up and not available to a legitimate user. By carefully crafting a requests that keep the resource engaged through what is seemingly benign requests, legitimate users are limited or completely denied access to the resource. The degree to which the attack is successful depends upon the adversary&apos;s ability to sustain resource requests over time with a volume that exceeds the normal usage by legitimate users, as well as other mitigating circumstances such as the target&apos;s ability to shift load or acquire additional resources to deal with the depletion. This attack differs from a flooding attack as it is not entirely dependent upon large volumes of requests, and it differs from resource leak exposures which tend to exploit the surrounding environment needed for the resource to function. The key factor in a sustainment attack are the repeated requests that take longer to process than usual.
+ Attack Prerequisites

    This pattern of attack requires a temporal aspect to the servicing of a given request. Success can be achieved if the adversary can make requests that collectively take more time to complete than legitimate user requests within the same time frame.

+ Solutions and Mitigations

Potential mitigations include requiring a unique login for each resource request, constraining local unprivileged access by disallowing simultaneous engagements of the resource, or limiting access to the resource to one access per IP address. In such scenarios, the adversary would have to increase engagements either by launching multiple sessions manually or programmatically to counter such defenses.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-228-DTDInjection">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-250-XMLInjection"/>
		<rdfs:label>DTD Injection</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker injects malicious content into an application&apos;s DTD in an attempt to produce a negative technical impact. DTDs are used to describe how XML documents are processed. Certain malformed DTDs (for example, those with excessive entity expansion as described in CAPEC 197) can cause the XML parsers that process the DTDs to consume excessive resources resulting in resource depletion.
+ Attack Prerequisites

    The target must be running an XML based application that leverages DTDs.

+ Solutions and Mitigations

Design: Sanitize incoming DTDs to prevent excessive expansion or other actions that could result in impacts like resource depletion.

Implementation: Disallow the inclusion of DTDs as part of incoming messages.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-229-XMLAttributeBlowup">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-231-XMLOversizedPayloads"/>
		<rdfs:label>XML Attribute Blowup</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

This attack exploits certain XML parsers which manage data in an inefficient manner. The attacker crafts an XML document with many attributes in the same XML node. In a vulnerable parser, this results in a denial of service condition where CPU resources are exhausted because of the parsing algorithm.
+ Attack Prerequisites

    The server accepts XML input and is using a parser with a runtime longer than O(n) for the insertion of a new attribute in the data container.(examples are .NET framework 1.0 and 1.1)

+ Solutions and Mitigations

This attack may be mitigated completely by using a parser that is not using a vulnerable container. Mitigation may also limit the number of attributes per XML element.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-23-FileContentInjection">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-242-CodeInjection"/>
		<rdfs:label>File Content Injection</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attack of this type exploits the host&apos;s trust in executing remote content including binary files. The files are poisoned with a malicious payload (targeting the file systems accessible by the target software) by the attacker and may be passed through standard channels such as via email, and standard web content like PDF and multimedia files. The attacker exploits known vulnerabilities or handling routines in the target processes. Vulnerabilities of this type have been found in a wide variety of commercial applications from Microsoft Office to Adobe Acrobat and Apple Safari web browser. When the attacker knows the standard handling routines and can identify vulnerabilities and entry points they can be exploited by otherwise seemingly normal content. Once the attack is executed, the attackers&apos; program can access relative directories such as C:\Program Files or other standard system directories to launch further attacks. In a worst case scenario, these programs are combined with other propagation logic and work as a virus.
+ Attack Prerequisites

    The target software must consume files.

    The attacker must have access to modify files that the target software will consume.

+ Solutions and Mitigations

Design: Enforce principle of least privilege

Design: Validate all input for content including files. Ensure that if files and remote content must be accepted that once accepted, they are placed in a sandbox type location so that lower assurance clients cannot write up to higher assurance processes (like Web server processes for example)

Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.

Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.

Implementation: Virus scanning on host

Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-230-XMLNestedPayloads">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-130-ExcessiveAllocation"/>
		<rdfs:label>XML Nested Payloads</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

Applications often need to transform data in and out of the XML format by using an XML parser. It may be possible for an attacker to inject data that may have an adverse effect on the XML parser when it is being processed. By nesting XML data and causing this data to be continuously self-referential, an attacker can cause the XML parser to consume more resources while processing, causing excessive memory consumption and CPU utilization. An attacker&apos;s goal is to leverage parser failure to his or her advantage. In most cases this type of an attack will result in a denial of service due to an application becoming unstable, freezing, or crash. However it may be possible to cause a crash resulting in arbitrary code execution, leading to a jump from the data plane to the control plane [R.230.1].
+ Attack Prerequisites

    An application uses an XML parser to perform transformation on user-controllable data.

    An application does not perform sufficient validation to ensure that user-controllable data is safe for an XML parser.

+ Solutions and Mitigations

Carefully validate and sanitize all user-controllable data prior to passing it to the XML parser routine. Ensure that the resultant data is safe to pass to the XML parser.

Perform validation on canonical data.

Pick a robust implementation of an XML parser.

Validate XML against a valid schema or DTD prior to parsing.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-231-XMLOversizedPayloads">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-130-ExcessiveAllocation"/>
		<rdfs:label>XML Oversized Payloads</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

Applications often need to transform data in and out of the XML format by using an XML parser. It may be possible for an attacker to inject data that may have an adverse effect on the XML parser when it is being processed. By supplying oversized payloads in input vectors that will be processed by the XML parser, an attacker can cause the XML parser to consume more resources while processing, causing excessive memory consumption and CPU utilization, and potentially cause execution of arbitrary code. An attacker&apos;s goal is to leverage parser failure to his or her advantage. In many cases this type of an attack will result in a denial of service due to an application becoming unstable, freezing, or crash. However it is possible to cause a crash resulting in arbitrary code execution, leading to a jump from the data plane to the control plane [R.231.1].
+ Attack Prerequisites

    An application uses an XML parser to perform transformation on user-controllable data.

    An application does not perform sufficient validation to ensure that user-controllable data is safe for an XML parser.

+ Solutions and Mitigations

Carefully validate and sanitize all user-controllable data prior to passing it to the XML parser routine. Ensure that the resultant data is safe to pass to the XML parser.

Perform validation on canonical data.

Pick a robust implementation of an XML parser.

Validate XML against a valid schema or DTD prior to parsing.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-233-PrivilegeEscalation">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Privilege Escalation</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An adversary exploits a weakness enabling them to elevate their privilege and perform an action that they are not supposed to be authorized to perform.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-234-HijackingAPrivilegedProcess">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-233-PrivilegeEscalation"/>
		<rdfs:label>Hijacking A Privileged Process</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker gains control of a process that is assigned elevated privileges in order to execute arbitrary code with those privileges. Some processes are assigned elevated privileges on an operating system, usually through association with a particular user, group, or role. If an attacker can hijack this process, they will be able to assume its level of privilege in order to execute their own code. Processes can be hijacked through improper handling of user input (for example, a buffer overflow or certain types of injection attacks) or by utilizing system utilities that support process control that have been inadequately secured.
+ Attack Prerequisites

    The targeted process or operating system must contain a bug that allows attackers to hijack the targeted process.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-235-ImplementingACallbackToSystemRoutineOldAWTQueue">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-30-HijackingAPrivilegedThreadOfExecution"/>
		<rdfs:label>Implementing A Callback To System Routine Old AWT Queue</rdfs:label>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-236-CatchingExceptionThrowSignalFromPrivilegedBlock">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-30-HijackingAPrivilegedThreadOfExecution"/>
		<rdfs:label>Catching Exception Throw Signal From Privileged Block</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

Attackers can sometimes hijack a privileged thread from the underlying system through synchronous (calling a privileged function that returns incorrectly) or asynchronous (callbacks, signal handlers, and similar) means.

Having done so, the Attacker may not only likely access functionality the system&apos;s designer didn&apos;t intend for them, but they may also go undetected or deny other users essential service in a catastrophic (or insidiously subtle) way.
+ Attack Prerequisites

    The application in question employs a threaded model of execution with the threads operating at, or having the ability to switch to, a higher privilege level than normal users

    In order to feasibly execute this class of attacks, the attacker must have the ability to hijack a privileged thread.

    This ability includes, but is not limited to, modifying environment variables that affect the process the thread belongs to, or providing malformed user-controllable input that causes the executing thread to fault and return to a higher privilege level or such.

    This does not preclude network-based attacks, but makes them conceptually more difficult to identify and execute.

+ Solutions and Mitigations

Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code.

Application Architects must be careful to design privileged code blocks such that upon return (successful, failed, or unpredicted) that privilege is shed prior to leaving the block/scope.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-237-CallingSignedCodeFromAnotherLanguageWithinASandboxAllowThis">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-115-AuthenticationBypass"/>
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-68-SubvertCodeSigningFacilities"/>
		<rdfs:label>Calling Signed Code From Another Language Within A Sandbox Allow This</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

The attacker may submit a malicious signed code from another language to obtain access to privileges that were not intentionally exposed by the sandbox, thus escaping the sandbox. For instance, Java code cannot perform unsafe operations, such as modifying arbitrary memory locations, due to restrictions placed on it by the Byte code Verifier and the JVM. If allowed, Java code can call directly into native C code, which may perform unsafe operations, such as call system calls and modify arbitrary memory locations on their behave. To provide isolation, Java does not grant untrusted code with unmediated access to native C code. Instead, the sandboxed code is typically allowed to call some subset of the pre-existing native code that is part of standard libraries.
+ Attack Prerequisites

    A framework-based language that supports code signing and sandbox (such as Java, .Net, JavaScript, and Flash) Deployed code that has been signed by its authoring vendor, or a partner

+ Solutions and Mitigations

Assurance: Sanitize the code of the standard libraries to make sure there is no security weaknesses in them.

Design: Use obfuscation and other techniques to prevent reverse engineering the standard libraries.

Assurance: Use static analysis tool to do code review and dynamic tool to do penetration test on the standard library.

Configuration: Get latest updates for the computer.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-238-UsingURLCodebaseGACCodeSourceToConvinceSandboxOfPrivilege">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-68-SubvertCodeSigningFacilities"/>
		<rdfs:label>Using URL Codebase GAC Code Source To Convince Sandbox Of Privilege</rdfs:label>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-239-SubversionOfAuthorizationChecksCacheFilteringProgrammaticSecurityEtc">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-207-RemovingImportantClientFunctionality"/>
		<rdfs:label>Subversion Of Authorization Checks Cache Filtering Programmatic Security etc</rdfs:label>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-24-FilterFailureThroughBufferOverflow">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-100-OverflowBuffers"/>
		<rdfs:label>Filter Failure Through Buffer Overflow</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

In this attack, the idea is to cause an active filter to fail by causing an oversized transaction. An attacker may try to feed overly long input strings to the program in an attempt to overwhelm the filter (by causing a buffer overflow) and hoping that the filter does not fail securely (i.e. the user input is let into the system unfiltered).
+ Attack Prerequisites

    Ability to control the length of data passed to an active filter.

+ Solutions and Mitigations

Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through. Basically make sure that the vault is closed when failure occurs.

Pre-design: Use a language or compiler that performs automatic bounds checking.

Pre-design through Build: Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.

Operational: Use OS-level preventative functionality. Not a complete solution.

Design: Use an abstraction library to abstract away risky APIs. Not a complete solution.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-240-ResourceInjection">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Resource Injection</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An adversary exploits weaknesses in input validation by manipulating resource identifiers enabling the unintended modification or specification of a resource.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-242-CodeInjection">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Code Injection</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An adversary exploits a weakness in input validation on the target to inject new code into that which is currently executing. This differs from code inclusion in that code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-243-CrossSiteScriptingInAttributes">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-18-EmbeddingScriptsInNonScriptElements"/>
		<rdfs:label>Cross Site Scripting In Attributes</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

The attacker inserts commands to perform cross-site scripting (XSS) actions in HTML attributes. Many filters do not adequately sanitize attributes against the presence of potentially dangerous commands even if they adequately sanitize tags. For example, dangerous expressions could be inserted into a style attribute in an anchor tag, resulting in the execution of malicious code when the resulting page is rendered. If a victim is tricked into viewing the rendered page the attack proceeds like a normal XSS attack, possibly resulting in the loss of sensitive cookies or other malicious activities.
+ Attack Prerequisites

    The target application must fail to adequately sanitize HTML attributes against the presence of dangerous commands.

+ Solutions and Mitigations

Design: Use libraries and templates that minimize unfiltered input.

Implementation: Normalize, filter and white list all input including that which is not expected to have any scripting content.

Implementation: The victim should configure the browser to minimize active content from untrusted sources.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-244-CrossSiteScriptingViaEncodedURISchemes">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-18-EmbeddingScriptsInNonScriptElements"/>
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-220-ClientServerProtocolManipulation"/>
		<rdfs:label>Cross Site Scripting Via Encoded URI Schemes</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attack of this type exploits the ability of most browsers to interpret &quot;data&quot;, &quot;javascript&quot; or other URI schemes as client-side executable content placeholders. This attack consists of passing a malicious URI in an anchor tag HREF attribute or any other similar attributes in other HTML tags. Such malicious URI contains, for example, a base64 encoded HTML content with an embedded cross-site scripting payload. The attack is executed when the browser interprets the malicious content i.e., for example, when the victim clicks on the malicious link.
+ Attack Prerequisites

    Target client software must allow scripting such as JavaScript and allows executable content delivered using a data URI scheme.

+ Solutions and Mitigations

Design: Use browser technologies that do not allow client side scripting.

Design: Utilize strict type, character, and encoding enforcement.

Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.

Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.

Implementation: Perform input validation for all remote content, including remote and user-generated content

Implementation: Perform output validation for all remote content.

Implementation: Disable scripting languages such as JavaScript in browser

Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-245-CrossSiteScriptingUsingDoubledCharacters">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-18-EmbeddingScriptsInNonScriptElements"/>
		<rdfs:label>Cross Site Scripting Using Doubled Characters</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

The attacker bypasses input validation by using doubled characters in order to perform a cross-site scripting attack. Some filters fail to recognize dangerous sequences if they are preceded by repeated characters. For example, by doubling the &lt; before a script command, (&lt;&lt;script or %3C%3script using URI encoding) the filters of some web applications may fail to recognize the presence of a script tag. If the targeted server is vulnerable to this type of bypass, the attacker can create a crafted URL or other trap to cause a victim to view a page on the targeted server where the malicious content is executed, as per a normal XSS attack.
+ Attack Prerequisites

    The targeted web application does not fully normalize input before checking for prohibited syntax. In particular, it must fail to recognize prohibited methods preceded by certain sequences of repeated characters.

+ Solutions and Mitigations

Design: Use libraries and templates that minimize unfiltered input.

Implementation: Normalize, filter and sanitize all user supplied fields.

Implementation: The victim should configure the browser to minimize active content from untrusted sources.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-246-CrossSiteScriptingUsingFlash">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-18-EmbeddingScriptsInNonScriptElements"/>
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-182-FlashInjection"/>
		<rdfs:label>Cross Site Scripting Using Flash</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker injects malicious script to global parameters in a Flash movie via a crafted URL. The malicious script is executed in the context of the Flash movie. As such, this is a form of Cross-Site Scripting (XSS), but the abilities granted to the Flash movie make this attack more flexible.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-247-CrossSiteScriptingWithMaskingThroughInvalidCharactersInIdentifiers">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-18-EmbeddingScriptsInNonScriptElements"/>
		<rdfs:label>Cross Site Scripting With Masking Through Invalid Characters In Identifiers</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">The attacker inserts invalid characters in identifiers to bypass application filtering of input. Filters may not scan beyond invalid characters but during later stages of processing content that follows these invalid characters may still be processed. This allows the attacker to sneak prohibited commands past filters and perform normally prohibited operations. Invalid characters may include null, carriage return, line feed or tab in an identifier. Successful bypassing of the filter can result in a XSS attack, resulting in the disclosure of web cookies or possibly other results.
+ Attack Prerequisites

    The target must fail to remove invalid characters from input and fail to adequately scan beyond these characters.

+ Solutions and Mitigations

Design: Use libraries and templates that minimize unfiltered input.

Implementation: Normalize, filter and white list any input that will be included in any subsequent web pages or back end operations.

Implementation: The victim should configure the browser to minimize active content from untrusted sources.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-248-CommandInjection">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Command Injection</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.
+ Attack Prerequisites

    The target application must accept input from the user and then use this input in the construction of commands to be executed. In virtually all cases, this is some form of string input that is concatenated to a constant string defined by the application to form the full command to be executed.

+ Solutions and Mitigations

Input Validation: All user-controllable input must be validated and filtered for potentially unwanted characters. Whitelisting input is desired, but if a blacklisting approach is necessary, then focusing on command related terms and delimiters is necessary.

Encoding: Input received should be encoded prior to use in commands to make sure command related characters are not treated as part of the command. For example, quotation characters may need to be encoded so that the application does not treat the quotation as a delimiter.

Parameterization: Parameterization causes the use of input to be restricted to data sections of a command, thus removing the chance that the input will be treated as part of the command itself.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-249-LinuxTerminalInjection">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-248-CommandInjection"/>
		<rdfs:label>Linux Terminal Injection</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

This type of attack exploits terminal devices that allow the keyboard buffer to be written to by other users.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-25-ForcedDeadlock">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Forced Deadlock</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

This attack attempts to trigger and exploit a deadlock condition in the target software to cause a denial of service. A deadlock can occur when two or more competing actions are waiting for each other to finish, and thus neither ever does. Deadlock condition are not easy to detect.
+ Attack Prerequisites

    The target host has a deadlock condition. There are four conditions for a deadlock to occur, known as the Coffman conditions. [R.25.3][REF-6]

    The target host exposes an API to the user.

+ Solutions and Mitigations

Use known algorithm to avoid deadlock condition (for instance non-blocking synchronization algorithms).

For competing actions use well-known libraries which implement synchronization.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-250-XMLInjection">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-248-CommandInjection"/>
		<rdfs:label>XML Injection</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker utilizes crafted XML user-controllable input to probe, attack, and inject data into the XML database, using techniques similar to SQL injection. The user-controllable input can allow for unauthorized viewing of data, bypassing authentication or the front-end application for direct XML database access, and possibly altering database information.
+ Attack Prerequisites

    XML queries used to process user input and retrieve information stored in XML documents

    User-controllable input not properly sanitized

+ Solutions and Mitigations

Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XML data or a query.

Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-251-LocalCodeInclusion">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-175-CodeInclusion"/>
		<rdfs:label>Local Code Inclusion</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

The attacker forces an application to load arbitrary code files from the local machine. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways.
+ Attack Prerequisites

    The targeted application must have a bug that allows an attacker to control which code file is loaded at some juncture.

    Some variants of this attack may require that old versions of some code files be present and in predictable locations.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-252-PHPLocalFileInclusion">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-251-LocalCodeInclusion"/>
		<rdfs:label>PHP Local File Inclusion</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

The attacker loads and executes an arbitrary local PHP file on a target machine. The attacker could use this to try to load old versions of PHP files that have known vulnerabilities, to load PHP files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways.
+ Attack Prerequisites

    The targeted PHP application must have a bug that allows an attacker to control which code file is loaded at some juncture.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-253-RemoteCodeInclusion">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-175-CodeInclusion"/>
		<rdfs:label>Remote Code Inclusion</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

The attacker forces an application to load arbitrary code files from a remote location. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load files that the attacker placed on the remote machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-256-SOAPArrayOverflow">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-100-OverflowBuffers"/>
		<rdfs:label>SOAP Array Overflow</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker sends a SOAP request with an array whose actual length exceeds the length indicated in the request. When a data structure including a SOAP array is instantiated, the sender transmits the size of the array as an explicit parameter along with the data. If the server processing the transmission naively trusts the specified size, then an attacker can intentionally understate the size of the array, possibly resulting in a buffer overflow if the server attempts to read the entire data set into the memory it allocated for a smaller array. This, in turn, can lead to a server crash or even the execution of arbitrary code.
+ Attack Prerequisites

    The targeted SOAP server must trust that the array size as stated in messages it receives is correct, but read through the entire content of the message regardless of the stated size of the array.

+ Solutions and Mitigations

If the server either verifies the correctness of the stated array size or if the server stops processing an array once the stated number of elements have been read, regardless of the actual array size, then this attack will fail. The former detects the malformed SOAP message while the latter ensures that the server does not attempt to load more data than was allocated for.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-26-LeveragingRaceConditions">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Leveraging Race Conditions</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

This attack targets a race condition occurring when multiple processes access and manipulate the same resource concurrently and the outcome of the execution depends on the particular order in which the access takes place. The attacker can leverage a race condition by &quot;running the race&quot;, modifying the resource and modifying the normal execution flow. For instance a race condition can occur while accessing a file, the attacker can trick the system by replacing the original file with his version and cause the system to read the malicious file.
+ Attack Prerequisites

    A resource is accessed/modified concurrently by multiple processes such that a race condition exists.

    The attacker has the ability to modify the resource.

+ Solutions and Mitigations

Use safe libraries to access resources such as files.

Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.

Use synchronization to control the flow of execution.

Use static analysis tools to find race conditions.

Pay attention to concurrency problems related to the access of resources.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-261-FuzzingForGarneringOtherAdjacentUserSensitiveData">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-54-QuerySystemForInformation"/>
		<rdfs:label>Fuzzing For Garnering Other Adjacent User Sensitive Data</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker who is authorized to send queries to a target sends variants of expected queries in the hope that these modified queries might return information (directly or indirectly through error logs) beyond what the expected set of queries should provide. Many client applications use specific query templates when interacting with a server and often automatically fill in specific fields or attributes. For example, a client that queries an employee database might have templates such that the user only supplies the target&apos;s name and the template dictates the fields to be returned (location, position in the company, phone number, etc.). If the server does not verify that the query matches one of the expected templates, an attacker who is allowed to send normal queries could modify their query to try to return additional information. In the above example, additional information might include social security numbers or salaries. Fuzzing techniques involve sending random or malformed messages to a target and monitoring the target&apos;s response. In this particular attack, the fuzzing is applied to the format of the expected templates, creating variants that request additional information, exclude limiting clauses, or alter fields that identify the requester in order to subvert access controls. The attacker may not know the names of fields to request or how other modifications will affect the server response, but by attempting multiple plausible variants, they might eventually trigger a server response that divulges sensitive information. Other possible outcomes include server crashes and resource consumption if the unexpected queries cause the server to enter an unstable state or perform excessive computation.
+ Attack Prerequisites

    The server must assume that the queries it receives follow specific templates and/or have fields or attributes that follow specific procedures. The server must process queries that it receives without adequately checking or sanitizing queries to ensure they follow these templates.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-263-ForceUseOfCorruptedFiles">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-165-FileManipulation"/>
		<rdfs:label>Force Use Of Corrupted Files</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

This describes an attack where an application is forced to use a file that an attacker has corrupted. The result is often a denial of service caused by the application being unable to process the corrupted file, but other results, including the disabling of filters or access controls (if the application fails in an unsafe way rather than failing by locking down) or buffer overflows are possible.
+ Attack Prerequisites

    The targeted application must utilize a configuration file that an attacker is able to corrupt. In some cases, the attacker must be able to force the (re-)reading of the corrupted file if the file is normally only consulted at startup.

    The severity of the attack hinges on how the application responds to the corrupted file. If the application detects the corruption and locks down, this may result in the denial of services provided by the application. If the application fails to detect the corruption, the result could be a more severe denial of service (crash or hang) or even an exploitable buffer overflow. If the application detects the corruption but fails in an unsafe way, this attack could result in the continuation of services but without certain security structures, such as filters or access controls. For example, if the corrupted file configures filters, an unsafe response from an application could result in simply disabling the filtering mechanisms due to the lack of usable configuration data.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-267-LeverageAlternateEncoding">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-153-InputDataManipulation"/>
		<rdfs:label>Leverage Alternate Encoding</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

This attack leverages the possibility to encode potentially harmful input and submit it to applications not expecting or effective at validating this encoding standard making input filtering difficult.
+ Attack Prerequisites

    The application&apos;s decoder accepts and interprets encoded characters. Data canonicalization, input filtering and validating is not done properly leaving the door open to harmful characters for the target host.

+ Solutions and Mitigations

Assume all input might use an improper representation. Use canonicalized data inside the application; all data must be converted into the representation used inside the application (UTF-8, UTF-16, etc.)

Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system. Test your decoding process against malicious input.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-268-AuditLogManipulation">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-161-InfrastructureManipulation"/>
		<rdfs:label>Audit Log Manipulation</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

The attacker injects, manipulates, deletes, or forges malicious log entries into the log file, in an attempt to mislead an audit of the log file or cover tracks of an attack. Due to either insufficient access controls of the log files or the logging mechanism, the attacker is able to perform such actions.
+ Attack Prerequisites

    The target host is logging the action and data of the user.

    The target host insufficiently protects access to the logs or logging mechanisms.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-27-LeveragingRaceConditionsViaSymbolicLinks">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-26-LeveragingRaceConditions"/>
		<rdfs:label>Leveraging Race Conditions Via Symbolic Links</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

This attack leverages the use of symbolic links (Symlinks) in order to write to sensitive files. An attacker can create a Symlink link to a target file not otherwise accessible to her. When the privileged program tries to create a temporary file with the same name as the Symlink link, it will actually write to the target file pointed to by the attackers&apos; Symlink link. If the attacker can insert malicious content in the temporary file she will be writing to the sensitive file by using the Symlink. The race occurs because the system checks if the temporary file exists, then creates the file. The attacker would typically create the Symlink during the interval between the check and the creation of the temporary file.
+ Attack Prerequisites

    The attacker is able to create Symlink links on the target host.

    Tainted data from the attacker is used and copied to temporary files.

    The target host does insecure temporary file creation.

+ Solutions and Mitigations

Use safe libraries when creating temporary files. For instance the standard library function mkstemp can be used to safely create temporary files. For shell scripts, the system utility mktemp does the same thing.

Access to the directories should be restricted as to prevent attackers from manipulating the files. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file.

Follow the principle of least privilege when assigning access rights to files.

Ensure good compartmentalization in the system to provide protected areas that can be trusted.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-270-ModificationOfRegistryRunKeys">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-203-ManipulateApplicationRegistryValues"/>
		<rdfs:label>Modification Of Registry Run Keys</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An adversary adds a new entry to run keys in the registry in an attempt to automatically execute a desired application.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-271-SchemaPoisoning">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-176-ConfigurationEnvironmentManipulation"/>
		<rdfs:label>Schema Poisoning</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker corrupts or modifies the content of a schema for the purpose of undermining the security of the target. Schemas provide the structure and content definitions for resources used by an application. By replacing or modifying a schema, the attacker can affect how the application handles or interprets a resource, often leading to possible denial of service, entering into an unexpected state, or recording incomplete data.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-272-ProtocolManipulation">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Protocol Manipulation</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An adversary subverts a communications protocol to perform an attack. This type of attack can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself.
+ Attack Prerequisites

    The protocol or implementations thereof must contain bugs that an adversary can exploit.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-273-HTTPResponseSmuggling">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-220-ClientServerProtocolManipulation"/>
		<rdfs:label>HTTP Response Smuggling</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker injects content into a server response that is interpreted differently by intermediaries than it is by the target browser. To do this, it takes advantage of inconsistent or incorrect interpretations of the HTTP protocol by various applications. For example, it might use different block terminating characters (CR or LF alone), adding duplicate header fields that browsers interpret as belonging to separate responses, or other techniques. Consequences of this attack can include response-splitting, cross-site scripting, apparent defacement of targeted sites, cache poisoning, or similar actions.
+ Attack Prerequisites

    The targeted server must allow the attacker to insert content that will appear in the server&apos;s response.

+ Solutions and Mitigations

Design: Employ strict adherence to interpretations of HTTP messages wherever possible.

Implementation: Encode header information provided by user input so that user-supplied content is not interpreted by intermediaries.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-274-HTTPVerbTampering">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-220-ClientServerProtocolManipulation"/>
		<rdfs:label>HTTP Verb Tampering</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker modifies the HTTP Verb (e.g. GET, PUT, TRACE, etc.) in order to bypass access restrictions. Some web environments allow administrators to restrict access based on the HTTP Verb used with requests. However, attackers can often provide a different HTTP Verb, or even provide a random string as a verb in order to bypass these protections. This allows the attacker to access data that should otherwise be protected.
+ Attack Prerequisites

    The targeted system must attempt to filter access based on the HTTP verb used in requests.

+ Solutions and Mitigations

Design: Ensure that only legitimate HTTP verbs are allowed.

Design: Do not use HTTP verbs as factors in access decisions.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-275-DNSRebinding">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-272-ProtocolManipulation"/>
		<rdfs:label>DNS Rebinding</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker serves content whose IP address is resolved by a DNS server that it controls and after initial contact by a web browser or similar client it changes the IP address to which its name resolves to an address within the target browser&apos;s organization that is not publicly accessible, thus allowing the web browser to examine this internal address on its behalf. Web browsers enforce security zones based on DNS names in order to prevent cross-zone disclosure of information. In a DNS binding attack an attacker publishes content on their own server with their own name and DNS server. The first time the target accesses the attackers&apos; content, the attackers&apos; name must be resolved to an IP address. The attacker&apos;s DNS server performs this resolution, providing a short Time-To-Live (TTL) in order to prevent the target from caching the value. When the target makes a subsequent request to the attackers&apos; content the attackers&apos; DNS server must again be queried, but this time the DNS server returns an address internal to the target&apos;s organization that would not be accessible from an outside source. Because the same name resolves to both these IP addresses, browsers will place both IP addresses in the same security zone and allow information to flow between the addresses. The attacker can then use scripts in the content the target retrieved from the attacker in the original message to exfiltrate data from the named internal addresses. This allows attackers to discover sensitive information about the internal network of an enterprise. If there is a trust relationship between the computer with the targeted browser and the internal machine the attacker identifies, additional attacks are possible. This attack differs from pharming attacks in that the attacker is the legitimate owner of the malicious DNS server and so does not need to compromise behavior of external DNS services.
+ Attack Prerequisites

    The target browser must access content server from the attacker controlled DNS name. Web advertisements are often used for this purpose. The target browser must honor the TTL value returned by the attacker and re-resolve the attackers&apos; DNS name after initial contact.

+ Solutions and Mitigations

Design: IP Pinning causes browsers to record the IP address to which a given name resolves and continue using this address regardless of the TTL set in the DNS response. Unfortunately, this is incompatible with the design of some legitimate sites.

Implementation: Reject HTTP request with an malicious Host header

Implementation: Employ DNS resolvers that prevent external names from resolving to internal addresses.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-276-InterComponentProtocolManipulation">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-272-ProtocolManipulation"/>
		<rdfs:label>Inter Component Protocol Manipulation</rdfs:label>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-277-DataInterchangeProtocolManipulation">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-272-ProtocolManipulation"/>
		<rdfs:label>Data Interchange Protocol Manipulation</rdfs:label>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-278-WebServicesProtocolManipulation">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-272-ProtocolManipulation"/>
		<rdfs:label>Web Services Protocol Manipulation</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker manipulates functions and/or their values used by web-related protocols to cause a web application or service to react differently that intended, allowing the attacker to gain access to data or resources normally restricted or to cause the application or service to crash. This can either be performed through the manipulation of call parameters with unexpected values or by calling functions that should normally be restricted or limited.
+ Attack Prerequisites

    The targeted application or service must rely on web service protocols in such a way that malicious manipulation of them can subvert functionality.

+ Solutions and Mitigations

Design: Range, size and value and consistency verification for any arguments supplied to applications and services from external sources and devise appropriate error response.

Design: Ensure that function calls that should not be manipulated by a user are not accessible to them.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-279-SoapManipulation">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-278-WebServicesProtocolManipulation"/>
		<rdfs:label>Soap Manipulation</rdfs:label>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-28-Fuzzing">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Fuzzing</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

In this attack pattern, the adversary leverages fuzzing to try to identify weaknesses in the system. Fuzzing is a software security and functionality testing method that feeds randomly constructed input to the system and looks for an indication that a failure in response to that input has occurred. Fuzzing treats the system as a black box and is totally free from any preconceptions or assumptions about the system. Fuzzing can help an attacker discover certain assumptions made about user input in the system. Fuzzing gives an attacker a quick way of potentially uncovering some of these assumptions despite not necessarily knowing anything about the internals of the system. These assumptions can then be turned against the system by specially crafting user input that may allow an attacker to achieve his goals.
+ Solutions and Mitigations

Test to ensure that the software behaves as per specification and that there are no unintended side effects. Ensure that no assumptions about the validity of data are made.

Use fuzz testing during the software QA process to uncover any surprises, uncover any assumptions or unexpected behavior.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-280-SoapParameterTampering">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-279-SoapManipulation"/>
		<rdfs:label>Soap Parameter Tampering</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker sends a SOAP message where the field values are other than what the server is likely to expect in order to precipitate non-standard server behavior. In a SOAP message, parameters take the form of values within XML elements. The server will have an XML schema that indicates certain restrictions on these parameter values. For example, the server may expect a parameter to be a string with fewer than 10 characters, or a number less than 100. In a SOAP parameter tampering attack, an attacker either violates this schema, or takes advantage of flexibility within the scheme (for example, a lack of a character limit) to provide parameters that a server might not expect. Examples of unexpected parameters include oversized data, data with different data types, inserting metacharacters within data, and sending contextually inappropriate data (for example, sending a non-existent product name in a product name field or using an out-of-order sequence number). Results of this attack can include information disclosure, denial of service, or even execution of arbitrary code.
+ Attack Prerequisites

    The targeted server either fails to verify that data in SOAP messages conforms to the appropriate XML schema, or it fails to correctly handle the complete range of data allowed by the schema.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-285-ICMPEchoRequestPing">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-292-HostDiscovery"/>
		<rdfs:label>ICMP Echo Request Ping</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker sends out an ICMP Type 8 Echo Request, commonly known as a &apos;Ping&apos;, in order to determine if a target system is responsive. If the request is not blocked by a firewall or ACL, the target host will respond with an ICMP Type 0 Echo Reply datagram. This type of exchange is usually referred to as a &apos;Ping&apos; due to the Ping utility present in almost all operating systems. Ping, as commonly implemented, allows a user to test for alive hosts, measure round-trip time, and measure the percentage of packet loss. Performing this operation for a range of hosts on the network is known as a &apos;Ping Sweep&apos;. While the Ping utility is useful for small-scale host discovery, it was not designed for rapid or efficient host discovery over large network blocks. Other scanning utilities have been created that make ICMP ping sweeps easier to perform. Most networks filter ingress ICMP Type 8 messages for security reasons. Various other methods of performing ping sweeps have developed as a result. It is important to recognize the key security goal of the attacker is to discover if an IP address is alive, or has a responsive host. To this end, virtually any type of ICMP message, as defined by RFC 792 is useful. An attacker can cycle through various types of ICMP messages to determine if holes exist in the firewall configuration. When ICMP ping sweeps fail to discover hosts, other protocols can be used for the same purpose, such as TCP SYN or ACK segments, UDP datagrams sent to closed ports, etc. The attackers goal is to discover as many potential targets as possible can utilize a wide range of techniques to achieve this end. ICMP pings have the following characteristics:

    1. Host Discovery: Can be used to discover if a host is alive via ICMP Echo Reply Message
    2. Effective Against: LANs or Internal IP address ranges where firewall or ACL rules are less restrictive
    3. Weak Against: Firewalls properly configured to block ICMP Echo Request and Echo Replies.
    4. Port State: Unable to determine the status of ports on a host.

+ Attack Prerequisites

    The ability to send an ICMP type 8 query (Echo Request) to a remote target and receive an ICMP type 0 message (ICMP Echo Reply) in response. Any firewalls or access control lists between the sender and receiver must allow ICMP Type 8 and ICMP Type 0 messages in order for a ping operation to succeed.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-287-TCPSYNScan">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-300-PortScanning"/>
		<rdfs:label>TCP SYN Scan</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker uses a SYN scan to determine the status of ports on the remote target. SYN scanning is the most common type of port scanning that is used because of its enormous advantages and few drawbacks. As a result, novice attackers tend to overly rely on the SYN scan while performing system reconnaissance. As a scanning method the primary advantages of SYN scanning are its universality and speed. RFC 793 defines the required behavior of any TCP/IP device in that an incoming connection request begins with a SYN packet, which in turn must be followed by a SYN/ACK packet from the receiving service. For this reason, like TCP Connect scanning, SYN scanning works against any TCP stack. Unlike TCP Connect scanning, it is possible to scan thousands of ports per second using this method. This type of scanning is usually referred to as &apos;half-open&apos; scanning because it does not complete the three-way handshake. The scanning rate is extremely fast because no time is wasted completing the handshake or tearing down the connection. TCP SYN scanning can also immediately detect 3 of the 4 important types of port status: open, closed, and filtered. When a SYN is sent to an open port and unfiltered port, a SYN/ACK will be generated. This technique allows an attacker to scan through stateful firewalls due to the common configuration that TCP SYN segments for a new connection will be allowed for almost any port. When a SYN packet is sent to a closed port a RST is generated, indicating the port is closed. When SYN scanning to a particular port generates no response, or when the request triggers ICMP Type 3 unreachable errors, the port is filtered. A TCP Connect scan has the following characteristics:

    1. Speed: TCP SYN scanning is fast compared to other types of scans.
    2. Stealth: TCP SYN scanning is stealthy and SYN scan detection is fraught with false positives.
    3. Open Port: Detects that a port is open via a successful SYN/ACK to the SYN.
    4. Closed Port: Detects that a port is closed via a successful RST to the SYN
    5. Filtered Port: No response, or ICMP messages, indicates the presence of a filter.
    6. Unfiltered Port: Cannot distinguish between a state-fully filtered port and an unfiltered port.

SYN scanning is fast and provides the attacker with a wealth of information. The primary drawback is that SYN scanning requires the ability to access &quot;raw sockets&quot; in order to create the packets. As a result, it is not possible to perform a SYN scan from some systems (Windows XP SP 2). On other systems (BSD, Linux) administrative privileges are required in order to write to the raw socket.
+ Attack Prerequisites

    This scan type is not possible with some operating systems (Windows XP SP 2). On Linux and Unix systems it requires root privileges to use raw sockets.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-29-LeveragingTimeOfCheckandTimeOfUseTOCTOURaceConditions">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-26-LeveragingRaceConditions"/>
		<rdfs:label>Leveraging Time Of Check and Time Of Use TOCTOU Race Conditions</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

This attack targets a race condition occurring between the time of check (state) for a resource and the time of use of a resource. The typical example is the file access. The attacker can leverage a file access race condition by &quot;running the race&quot;, meaning that he would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the attacker could do something such as replace the file and cause an escalation of privilege.
+ Attack Prerequisites

    A resource is access/modified concurrently by multiple processes.

    The attacker is able to modify resource.

    A race condition exists while accessing a resource.

+ Solutions and Mitigations

Use safe libraries to access resources such as files.

Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.

Use synchronization to control the flow of execution.

Use static analysis tools to find race conditions.

Pay attention to concurrency problems related to the access of resources.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-290-EnumerateMailExchangeMXRecords">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-309-NetworkTopologyMapping"/>
		<rdfs:label>Enumerate Mail Exchange MX Records</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker enumerates the MX records for a given via a DNS query. This type of information gathering returns the names of mail servers on the network. Mail servers are often not exposed to the Internet but are located within the DMZ of a network protected by a Firewall. A side effect of this configuration is that enumerating the MX records for an organization my reveal the IP address of the firewall or possibly other internal systems. Attackers often resort to MX record enumeration when a DNS Zone Transfer is not possible.
+ Attack Prerequisites

    Access to a DNS server that will return the MX records for a network.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-291-DNSZoneTransfers">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-309-NetworkTopologyMapping"/>
		<rdfs:label>DNS Zone Transfers</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker exploits a DNS misconfiguration that permits a ZONE transfer. Some external DNS servers will return a list of IP address and valid hostnames. Under certain conditions, it may even be possible to obtain Zone data about the organization&apos;s internal network. When successful the attacker learns valuable information about the topology of the target organization, including information about particular servers, their role within the IT structure, and possibly information about the operating systems running upon the network. This is configuration dependent behavior so it may also be required to search out multiple DNS servers while attempting to find one with ZONE transfers allowed.
+ Attack Prerequisites

    Access to a DNS server that allows Zone transfers.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-292-HostDiscovery">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-169-Footprinting"/>
		<rdfs:label>Host Discovery</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker sends a probe to an IP address to determine if the host is alive. Host discovery is one of the earliest phases of network reconnaissance. An attacker usually starts with a range of IP addresses belonging to a target network and uses various methods to determine if a host is present at that IP address. Host discovery is usually referred to as &apos;Ping&apos; scanning using a sonar analogy. The goal of the attacker is to send a packet through to the IP address and solicit a response from the host. As such, a &apos;ping&apos; can be virtually any crafted packet whatsoever, provided the attacker can identify a functional host based on its response. An attack of this nature is usually carried out with a &apos;ping sweep&apos; where a particular kind of ping is sent to a range of IP addresses.
+ Attack Prerequisites

    A network capable of routing the attackers&apos; packets to the destination network.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-293-TracerouteRouteEnumeration">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-309-NetworkTopologyMapping"/>
		<rdfs:label>Traceroute Route Enumeration</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker uses a traceroute utility to map out the route which data flows through the network in route to a target destination. Tracerouting can allow an attacker to construct a working topology of systems and routers by listing the systems through which data passes through on their way to the targeted machine. This attack can return varied results depending upon the type of traceroute that is performed. Traceroute works by sending packets to a target while incrementing the Time-to-Live field in the packet header. As the packet traverses each hop along its way to the destination, its TTL expires generating an ICMP diagnostic message that identifies where the packet expired. Traditional techniques for tracerouting involved the use of ICMP and UDP. As more firewalls began to filter ingress ICMP, methods of traceroute using TCP were developed
+ Attack Prerequisites

    A network capable of routing the attackers&apos; packets to the destination network.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-294-ICMPAddressMaskRequest">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-292-HostDiscovery"/>
		<rdfs:label>ICMP Address Mask Request</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker sends an ICMP Type 17 Address Mask Request to gather information about a target&apos;s networking configuration. ICMP Address Mask Requests are defined by RFC-950, &quot;Internet Standard Subnetting Procedure.&quot; An Address Mask Request is an ICMP type 17 message that triggers a remote system to respond with a list of its related subnets, as well as its default gateway and broadcast address via an ICMP type 18 Address Mask Reply datagram. Gathering this type of information helps an attacker plan router-based attacks as well as denial-of-service attacks against the broadcast address. Many modern operating systems will not respond to ICMP type 17 messages for security reasons. Determining whether a system or router will respond to an ICMP Address Mask Request helps the attacker determine operating system or firmware version. Additionally, because these types of messages are rare they are easily spotted by intrusion detection systems. Many ICMP scanning tools support IP spoofing to help conceal the origin of the actual request among a storm of similar ICMP messages. It is a common practice for border firewalls and gateways to be configured to block ingress ICMP type 17 and egress ICMP type 18 messages.
+ Attack Prerequisites

    The ability to send an ICMP type 17 query (Address Mask Request) to a remote target and receive an ICMP type 18 message (ICMP Address Mask Reply) in response. Generally, modern operating systems will ignore ICMP type 17 messages, however, routers will commonly respond to this request.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-295-ICMPTimestampRequest">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-292-HostDiscovery"/>
		<rdfs:label>ICMP Timestamp Request</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker sends an ICMP type 13 Timestamp Request to determine the time as recorded by a remote target. Timestamp Replies, ICMP Type 14, usually return a value in Greenwich Mean Time. An attacker can attempt to use an ICMP Timestamp requests to &apos;ping&apos; a remote system to see if is alive. An attacker may be able to use the timestamp returned from the target to attack time-based security algorithms, such as random number generators, or time-based authentication mechanisms. Additionally, because these types of messages are rare they are easily spotted by intrusion detection systems. Many ICMP scanning tools support IP spoofing to help conceal the origin of the actual request among a storm of similar ICMP messages. It is a common practice for border firewalls and gateways to be configured to block ingress ICMP type 13 and egress ICMP type 14 messages.
+ Attack Prerequisites

    The ability to send an ICMP type 13 query (Timestamp Request) to a remote target and receive an ICMP type 14 message (Timestamp Reply) in response.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-296-ICMPInformationRequest">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-292-HostDiscovery"/>
		<rdfs:label>ICMP Information Request</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker sends an ICMP Information Request to a host to determine if it will respond to this deprecated mechanism. ICMP Information Requests are a deprecated message type that no has any use. Information Requests were originally used for diskless machines to automatically obtain their network configuration, but this message type has been superseded by more robust protocol implementations like DHCP.
+ Attack Prerequisites

    The ability to send an ICMP Type 15 Information Request and receive an ICMP Type 16 Information Reply in response.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-297-TCPACKPing">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-292-HostDiscovery"/>
		<rdfs:label>TCP ACK Ping</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker sends a TCP segment with the ACK flag set to a remote host for the purpose of determining if the host is alive. This is one of several TCP &apos;ping&apos; types. The RFC 793 expected behavior for a service is to respond with a RST &apos;reset&apos; packet to any unsolicited ACK segment that is not part of an existing connection. So by sending an ACK segment to a port, an attacker identify that the host is alive by looking for a RST packet. Typically a remote server will respond with a RST regardless of whether a port is open or closed. In either case, the attacker can determine that the host is alive. TCP ACK pings cannot discover the state of a remote port because the behavior is the same in either case. TCP ACK pings are most likely to fail in cases where a stateful firewall is present. The firewall will look up the ACK packet in its state-table and discard the segment because it does not correspond to any active connection. A TCP ACK Ping has the following characteristics:

    1. Host Discovery: Can be used to discover if a host is alive via RST response packets sent from the host.
    2. Effective Against: Stateless Firewalls due to a typical lack of rules that reject unsolicited ACK packets.
    3. Weak Against: Stateful Firewalls due to the ability to reject a packet not part of an existing connection.
    4. Port State: Unable to determine if a port is open or closed.

The tool nmap will send TCP ACK pings when the command line &quot;-PA&quot; switch is used. Sending an ACK ping requires the ability to access &quot;raw sockets&quot; in order to create the packets with direct access to the packet header.
+ Attack Prerequisites

    The ability to send an ACK packet to a remote host and identify the response. Creating the ACK packet without building a full connection requires the use of raw sockets. As a result, it is not possible to send a TCP ACK ping from some systems (Windows XP SP 2) without the use of third-party packet drivers like Winpcap. On other systems (BSD, Linux) administrative privileges are required in order to write to the raw socket.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-298-UDPPing">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-292-HostDiscovery"/>
		<rdfs:label>UDP Ping</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker sends a UDP datagram to the remote host to determine if the host is alive. If a UDP datagram is sent to an open UDP port there is very often no response, so a typical strategy for using a UDP ping is to send the datagram to a random high port on the target. The goal is to solicit an ICMP port unreachable message from the target, indicating that the host is alive. UDP pings are useful because some firewalls are not configured to block UDP datagrams sent to strange or typically unused &apos; ports, like ports in the 65K range. Additionally, while some firewalls may filter incoming ICMP, weaknesses in firewall rule-sets may allow certain types of ICMP (host unreachable, port unreachable) which are useful for UDP ping attempts. A UDP Ping has the following characteristics:

    1. Host Discovery: Can be used to discover if a host is alive via ICMP Port Unreachable Messages.
    2. Effective Against: Firewalls that allow some incoming UDP which are not configured to block egress ICMP messages.
    3. Weak Against: Firewalls properly configured to block UDP datagrams that are also block egress ICMP messages.
    4. Port State: Able to determine if a port is closed via ICMP Port Unreachable Messages.

+ Attack Prerequisites

    The ability to send a UDP datagram to a remote host and receive a response.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-299-TCPSYNPing">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-292-HostDiscovery"/>
		<rdfs:label>TCP SYN Ping</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker uses a TCP SYN packets as a means of purpose of host discovery. Typical RFC 793 behavior specifies that when a TCP port is open, a host must respond to an incoming SYN &quot;synchronize&quot; packet by completing stage two of the &apos;three-way handshake&apos; by sending an SYN/ACK in response. When a port is closed, RFC 793 behavior is to respond with a RST &quot;reset&quot; packet. This behavior can be used to &apos;ping&apos; a target to see if it is alive by sending a TCP SYN packet to a port and then looking for a RST or an ACK packet in response. Due to the different responses from open and closed ports, SYN packets can be used to determine the remote state of the port. A TCP SYN ping is also useful for discovering alive hosts protected by a stateful firewall. In cases where a specific firewall rule does not block access to a port, a SYN packet can pass through the firewall to the host and solicit a response from either an open or closed port. When a stateful firewall is present SYN pings are preferable to ACK pings, because a stateful firewall will typically drop all unsolicited ACK packets because they are not part of an existing or new connection. TCP SYN pings often fail when a stateless ACL or firewall is configured to blanket-filter incoming packets to a port. The firewall device will discard any SYN packets to a blocked port. An attacker will often alternate between SYN and ACK pings to discover if a host is alive. A TCP SYN ping has the following characteristics:

    1. Host Discovery: Can be used to discover if a host is alive via ACK or RST packets.
    2. Effective Against: Stateful Firewalls that allow incoming new connections to target ports.
    3. Weak Against: Stateless firewalls that blanket-filter incoming SYN
    4. Port State: Able to determine port state via SYN/ACK or RST response.

+ Attack Prerequisites

    The ability to send a TCP SYN packet to a remote target. Depending upon the operating system, the ability to craft SYN packets may require elevated privileges.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-3-UsingLeadingGhostCharacterSequencesToBypassInputFilters">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-267-LeverageAlternateEncoding"/>
		<rdfs:label>Using Leading Ghost Character Sequences To Bypass Input Filters</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker intentionally introduces leading characters that enable getting the input past the filters. The API that is being targeted, ignores the leading &quot;ghost&quot; characters, and therefore processes the attackers&apos; input. This occurs when the targeted API will accept input data in several syntactic forms and interpret it in the equivalent semantic way, while the filter does not take into account the full spectrum of the syntactic forms acceptable to the targeted API.

Some APIs will strip certain leading characters from a string of parameters. Perhaps these characters are considered redundant, and for this reason they are removed. Another possibility is the parser logic at the beginning of analysis is specialized in some way that causes some characters to be removed. The attacker can specify multiple types of alternative encodings at the beginning of a string as a set of probes.

One commonly used possibility involves adding ghost characters--extra characters that don&apos;t affect the validity of the request at the API layer. If the attacker has access to the API libraries being targeted, certain attack ideas can be tested directly in advance. Once alternative ghost encodings emerge through testing, the attacker can move from lab-based API testing to testing real-world service implementations.
+ Attack Prerequisites

    The targeted API must ignore the leading ghost characters that are used to get past the filters for the semantics to be the same.

+ Solutions and Mitigations

Perform white list rather than black list input validation.

Canonicalize all data prior to validation.

Take an iterative approach to input validation (defense in depth).</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-30-HijackingAPrivilegedThreadOfExecution">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-233-PrivilegeEscalation"/>
		<rdfs:label>Hijacking A Privileged Thread Of Execution</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

Attackers can sometimes hijack a privileged thread from the underlying system through synchronous (calling a privileged function that returns incorrectly) or asynchronous (callbacks, signal handlers, and similar) means.

Having done so, the Attacker may not only likely access functionality the system&apos;s designer didn&apos;t intend for them, but they may also go undetected or deny other users essential service in a catastrophic (or insidiously subtle) way.
+ Attack Prerequisites

    The application in question employs a threaded model of execution with the threads operating at, or having the ability to switch to, a higher privilege level than normal users

    In order to feasibly execute this class of attacks, the attacker must have the ability to hijack a privileged thread.

    This ability includes, but is not limited to, modifying environment variables that affect the process the thread belongs to, or providing malformed user-controllable input that causes the executing thread to fault and return to a higher privilege level or such.

    This does not preclude network-based attacks, but makes them conceptually more difficult to identify and execute.

+ Solutions and Mitigations

Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code.

Application Architects must be careful to design privileged code blocks such that upon return (successful, failed, or unpredicted) that privilege is shed prior to leaving the block/scope.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-300-PortScanning">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-169-Footprinting"/>
		<rdfs:label>Port Scanning</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker uses a combination of techniques to determine the state of the ports on a remote target. Any service or application available for TCP or UDP networking will have a port open for communications over the network. Although common services have assigned port numbers, services and applications can run on arbitrary ports. Additionally, port scanning is complicated by the potential for any machine to have up to 65535 possible UDP or TCP services. The goal of port scanning is often broader than identifying open ports, but also give the attacker information concerning the firewall configuration. Depending upon the method of scanning that is used, the process can be stealthy or more obtrusive, the latter being more easily detectable due to the volume of packets involved, anomalous packet traits, or system logging. Typical port scanning activity involves sending probes to a range of ports and observing the responses. There are four types of port status that a port scan usually attempts to discover:

    1. Open Port: The port is open and a firewall does not block access to the port
    2. Closed Port: The port is closed (i.e. no service resides there) and a firewall does not block access to the port
    3. Filtered Port: A firewall or ACL rule is blocking access to the port in some manner, although the presence of a listening service on the port cannot be verified
    4. Unfiltered Port: A firewall or ACL rule is not blocking access to the port, although the presence of a listening service on the port cannot be verified.

For strategic purposes it is useful for an attacker to distinguish between an open port that is protected by a filter vs. a closed port that is not protected by a filter. Making these fine grained distinctions is impossible with certain scan types. A TCP connect scan, for instance, cannot distinguish a blocked port with an active service from a closed port that is not firewalled. Other scan types can only detect closed ports, while others cannot detect port state at all, only the presence or absence of filters. Collecting this type of information tells the attacker which ports can be attacked directly, which must be attacked with filter evasion techniques like fragmentation, source port scans, and which ports are unprotected (i.e. not firewalled) but aren&apos;t hosting a network service. An attacker often combines various techniques in order to gain a more complete picture of the firewall filtering mechanisms in place for a host.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-301-TCPConnectScan">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-300-PortScanning"/>
		<rdfs:label>TCP Connect Scan</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker uses full TCP connection attempts to determine if a port is open. The scanning process involves completing a &apos;three-way handshake&apos; with a remote port, and reports the port as closed if the full handshake cannot be established. An advantage of TCP connect scanning is that it works against any TCP/IP stack. RFC 793 defines how TCP connections are established and torn down. TCP connect scanning commonly involves establishing a full connection, and then subsequently tearing it down, and therefore involves sending a significant number of packets to each port that is scanned. This type of scanning has the following characteristics. Compared to other types of scans, a TCP Connect scan is slow and methodical. This type of scanning causes considerable noise in system logs and can be spotted by IDS/IPS systems. In terms of port status, TCP Connect scanning can detect when a port is open by completing the three-way handshake, but it cannot distinguish a port that is unfiltered with no service running on it from a port that is filtered by a firewall but contains an active service. Due to the significant volume of packets exchanged per port, TCP connect scanning can become very time consuming. Generally, it is not used as a method for performing a comprehensive port scan, but is reserved for checking a short list of common ports. A TCP Connect scan has the following characteristics:

    1. Speed: TCP Connect scanning is very slow.
    2. Stealth: TCP SYN scanning is extremely noisy and involves a significant number of packets.
    3. Open Port: Detects that a port is open via a successful three-way handshake
    4. Filtered Port: Cannot distinguish a closed (unfiltered) port from an open (filtered) port.
    5 .Unfiltered Port: Can detect an unfiltered port only when the unfiltered port is in front of an active TCP/IP service.

The TCP Connect scan has the advantage of versatility and ease of use in that it works equally well against all TCP stacks and that it is easy for a novice to interpret the results of the scan due to its all or nothing nature. Its disadvantages are noise, speed, and poor visibility into the filter structure of a firewall. As a general rule, performing a full TCP connect scan against a host can take multiple days.
+ Attack Prerequisites

    The TCP connect requires the ability to connect to an available port and complete a &apos;three-way-handshake&apos; This scanning technique does not require any special privileges in order to perform. This type of scan works against all TCP/IP stack implementations.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-302-TCPFINScan">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-300-PortScanning"/>
		<rdfs:label>TCP FIN Scan</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker uses a TCP FIN scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with the FIN bit set in the packet header. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow an attacker to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets. The major advantage of this scan type is its ability to scan through stateless firewall or ACL filters. Such filters are configured to block access to ports usually by preventing SYN packets, thus stopping any attempt to &apos;build&apos; a connection. FIN packets, like out-of-state ACK packets, tend to pass through such devices undetected. Many operating systems, however, do not implement RFC 793 exactly and for this reason FIN scans do not work as expected against these devices. Some operating systems, like Microsoft Windows, send a RST packet in response to any out-of-sync (or malformed) TCP segments received by a listening socket (rather than dropping the packet via RFC 793), thus preventing an attacker from distinguishing between open and closed ports.

    1. Speed: TCP FIN scanning is fast compared to other types of scans
    2. Stealth: TCP FIN scanning is stealthy compared to other types of scans
    3. Open Port: Detects an open port via no response to the segment
    4. Closed Port: Detects that a closed via a RST received in response to the FIN
    5. Filtered Port: Cannot distinguish between a filtered port and an open port
    6. Unfiltered Port: Cannot distinguish between an unfiltered port and a non-stateful filtered port

FIN scans are limited by the range of platforms against which they work. Additionally, because open ports are inferred via no responses being generated, one cannot distinguish an open port from a filtered port without further analysis. For instance, FIN scanning a system protected by a stateful firewall may indicate all ports being open. For these reasons, FIN scanning results must always be interpreted as part of a larger scanning strategy. FIN scanning is still relatively stealthy as the packets tend to blend in with the background noise on a network link. FIN scans are detected via heuristic (non-signature) based algorithms, much in the same way as other scan types are detected.
+ Attack Prerequisites

    FIN scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-303-TCPXmasScan">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-300-PortScanning"/>
		<rdfs:label>TCP Xmas Scan</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker uses a TCP XMAS scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with the all flags sent in the packet header, generating packets that are illegal based on RFC 793. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow an attacker to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets. he major advantage of this scan type is its ability to scan through stateless firewall or ACL filters. Such filters are configured to block access to ports usually by preventing SYN packets, thus stopping any attempt to &apos;build&apos; a connection. XMAS packets, like out-of-state FIN or ACK packets, tend to pass through such devices undetected. Many operating systems, however, do not implement RFC 793 exactly and for this reason FIN scans do not work as expected against these devices. Some operating systems, like Microsoft Windows, send a RST packet in response to any out-of-sync (or malformed) TCP segments received by a listening socket (rather than dropping the packet via RFC 793), thus preventing an attacker from distinguishing between open and closed ports.

    1. Speed: TCP XMAS scanning is fast compared to other types of scans
    2. Stealth: TCP XMAS scanning was once stealthy, but is now easily detected by IDS/IPS systems
    3. Open Port: Detects an open port via no response to the segment
    4. Closed Port: Detects that a closed via a RST received in response to the FIN
    5. Filtered Port: Cannot distinguish between a filtered port and an open port
    6. Unfiltered Port: Cannot distinguish between an unfiltered port and a non-stateful filtered port

XMAS scans are limited by the range of platforms against which they work. Additionally, because open ports are inferred via no responses being generated, one cannot distinguish an open port from a filtered port without further analysis. For instance, XMAS scanning a system protected by a stateful firewall may indicate all ports being open. Because of their obvious rule-breaking nature, XMAS scans are flagged by almost all intrusion prevention or intrusion detection systems.
+ Attack Prerequisites

    XMAS scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-304-TCPNullScan">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-300-PortScanning"/>
		<rdfs:label>TCP Null Scan</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker uses a TCP NULL scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with no flags in the packet header, generating packets that are illegal based on RFC 793. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow an attacker to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets. he major advantage of this scan type is its ability to scan through stateless firewall or ACL filters. Such filters are configured to block access to ports usually by preventing SYN packets, thus stopping any attempt to &apos;build&apos; a connection. NULL packets, like out-of-state FIN or ACK packets, tend to pass through such devices undetected. Many operating systems, however, do not implement RFC 793 exactly and for this reason NULL scans do not work as expected against these devices. Some operating systems, like Microsoft Windows, send a RST packet in response to any out-of-sync (or malformed) TCP segments received by a listening socket (rather than dropping the packet via RFC 793), thus preventing an attacker from distinguishing between open and closed ports.

    1. Speed: TCP NULL scanning is fast compared to other types of scans
    2. Stealth: TCP NULL scanning was once stealthy, but is now easily detected by IDS/IPS systems
    3. Open Port: Detects an open port via no response to the segment
    4. Closed Port: Detects that a closed via a RST received in response to the FIN
    5. Filtered Port: Cannot distinguish between a filtered port and an open port
    6. Unfiltered Port: Cannot distinguish between an unfiltered port and a non-stateful filtered port

NULL scans are limited by the range of platforms against which they work. Additionally, because open ports are inferred via no responses being generated, one cannot distinguish an open port from a filtered port without further analysis. For instance, NULL scanning a system protected by a stateful firewall may indicate all ports being open. Because of their obvious rule-breaking nature, NULL scans are flagged by almost all intrusion prevention or intrusion detection systems.
+ Attack Prerequisites

    NULL scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-305-TCPACKScan">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-300-PortScanning"/>
		<rdfs:label>TCP ACK Scan</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker uses TCP ACK segments to gather information about firewall or ACL configuration. The purpose of this type of scan is to discover information about filter configurations rather than port state. This type of scanning is rarely useful alone, but when combined with SYN scanning, gives a more complete picture of the type of firewall rules that are present. When a TCP ACK segment is sent to a closed port, or sent out-of-sync to a listening port, the RFC 793 expected behavior is for the device to respond with a RST. Getting RSTs back in response to a ACK scan gives the attacker useful information that can be used to infer the type of firewall present. Stateful firewalls will discard out-of-sync ACK packets, leading to no response. When this occurs the port is marked as filtered. When RSTs are received in response, the ports are marked as unfiltered, as the ACK packets solicited the expected behavior from a port. When combined with SYN techniques an attacker can gain a more complete picture of which types of packets get through to a host and thereby map out its firewall rule-set. ACK scanning, when combined with SYN scanning, also allows the attacker analyze whether a firewall is stateful or non-stateful. If a SYN solicits a SYN/ACK or a RST and an ACK solicits a RST, the port is unfiltered by any firewall type. If a SYN solicits a SYN/ACK, but an ACK generates no response, the port is statefully filtered. When a SYN generates neither a SYN/ACK or a RST, but an ACK generates a RST, the port is statefully filtered. When neither SYN nor ACK generates any response, the port is blocked by a specific firewall rule, which can occur via any type of firewall.

    1. Speed: TCP ACK scanning is fast compared to other types of scans
    2. Stealth: TCP ACK scanning is stealthy
    3. Open Port: Cannot detect open ports
    4. Closed Port: Cannot detect closed ports
    5. Filtered Port: Can detect stateful vs. non-stateful filters when combined with SYN probes
    6. Unfiltered Port: Can detect unfiltered ports when combined with SYN probes

Interpreting the results of ACK scanning requires rather sophisticated analysis. A skilled attacker may use this method to map out firewall rules, but the results of ACK scanning will be less useful to a novice.
+ Attack Prerequisites

    ACK scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-306-TCPWindowScan">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-300-PortScanning"/>
		<rdfs:label>TCP Window Scan</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker engages in TCP Window scanning to analyze port status and operating system type. TCP Window scanning uses the ACK scanning method but examine the TCP Window Size field of response RST packets to make certain inferences. This scanning method works against fewer TCP stack implementations than any other type of scan. Some operating systems return a positive TCP window size when a RST packet is sent from an open port, and a negative value when the RST originates from a closed port.

    1. Speed: TCP Window scanning is fast compared to other types of scans
    2. Stealth: TCP Window scanning is relatively stealthy, much like ACK scanning
    3. Open Port: Can detect open ports based on Window size for a limited number of operating systems
    4. Closed Port: Can detect closed ports based on Window size for limited number of operating systems
    5. Filtered Port: Can identify filtered ports when combined with other methods
    6. Unfiltered Port: Can identify unfiltered ports when combined with other methods

TCP Window scanning is one of the most complex scan types, and its results are difficult to interpret. Window scanning alone rarely yields useful information, but when combined with other types of scanning is more useful. TCP Window scanning is a more reliable means of making inference about operating system versions than port status.
+ Attack Prerequisites

    TCP Window scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-307-TCPRPCScan">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-300-PortScanning"/>
		<rdfs:label>TCP RPC Scan</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker scan for RPC services listing on a Unix/Linux host. This type of scan can be obtained via native operating system utilities or via port scanners like nmap. When performed by a scanner, an RPC datagram is sent to a list of UDP ports and the response is recorded. Particular types of responses can be indicative of well-known RPC services running on a UDP port.

    1. Speed: Direct RPC scans that bypass portmapper/sunrpc are typically slow compare to other scan types
    2. Stealth: RPC scanning is not stealthy, as IPS/IDS systems detect RPC queries
    3. Open Port: Can only detect open ports when an RPC service responds
    4. Closed Port: Detects closed ports on the basis of ICMP diagnostic messages.
    5. Filtered Port: Cannot identify filtered ports
    6. Unfiltered Port: Cannot identify unfiltered ports

There are two general approaches to RPC scanning. One is to use a native operating system utility, or script, to query the portmapper/rpcbind application running on port 111. Portmapper will return a list of registered RPC services. Alternately, one can use a port scanner or script to scan for RPC services directly. Discovering RPC services gives the attacker potential targets to attack, as some RPC services are insecure by default.
+ Attack Prerequisites

    RPC scanning requires no special privileges when it is performed via a native system utility.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-308-UDPScan">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-300-PortScanning"/>
		<rdfs:label>UDP Scan</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker engages in UDP scanning to gather information about UDP port status. UDP scanning methods involve sending a UDP datagram to the target port and looking for evidence that the port is closed. Open UDP ports usually do not respond to UDP datagrams as there is no stateful mechanism within the protocol that requires building or establishing a session. Responses to UDP datagrams are therefore application specific and cannot be relied upon as a method of detecting an open port. UDP scanning relies heavily upon ICMP diagnostic messages in order to determine the status of a remote port. Firewalls or ACLs which block egress ICMP error types effectively prevent UDP scans from returning any useful information. UDP scanning is further complicated by rate limiting mechanisms governing ICMP error messages. During a UDP scan, a datagram is sent to a target port. If an ICMP Type 3 Port unreachable error message is returned then the port is considered closed. Different types of ICMP messages can indicate a filtered port.

    1. Speed: UDP scanning is very slow due to ICMP rate limiting
    2. Stealth: RPC scanning is relatively stealthy provided the sending rate does not trigger IPS/IDS sensors
    3. Open Port: Infers an open port based on no response, or an occasional response by a well-known service
    4. Closed Port: Detects a closed port using return ICMP diagnostic messages from the host
    5. Filtered Port: Can detect some filtered ports via ICMP diagnostic messages
    6. Unfiltered Port: Can detect unfiltered ports based on some ICMP diagnostic messages

The protocol characteristics of UDP make port scanning inherently more difficult than with TCP, as well as dependent upon ICMP for accurate scanning. Due to ambiguities that can arise between open ports and filtered ports, UDP scanning results often require a high degree of interpretation and further testing to refine. In general, UDP scanning results are less reliable or accurate than TCP-based scanning.
+ Attack Prerequisites

    The ability to send UDP datagrams to a host and receive ICMP error messages from that host. In cases where particular types of ICMP messaging is disallowed, the reliability of UDP scanning drops off sharply.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-309-NetworkTopologyMapping">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-169-Footprinting"/>
		<rdfs:label>Network Topology Mapping</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An adversary engages in scanning activities to map network nodes, hosts, devices, and routes. Adversaries usually perform this type of network reconnaissance during the early stages of attack against an external network. Many types of scanning utilities are typically employed, including ICMP tools, network mappers, port scanners, and route testing utilities such as traceroute.
+ Attack Prerequisites

    None</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-31-AccessingInterceptingModifyingHTTPCookies">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-150-CollectDataFromCommonResourceLocations"/>
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-157-SniffingAttacks"/>
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-39-ManipulatingOpaqueClientBasedDataTokens"/>
		<rdfs:label>Accessing Intercepting Modifying HTTP Cookies</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

This attack relies on the use of HTTP Cookies to store credentials, state information and other critical data on client systems.

The first form of this attack involves accessing HTTP Cookies to mine for potentially sensitive data contained therein.

The second form of this attack involves intercepting this data as it is transmitted from client to server. This intercepted information is then used by the attacker to impersonate the remote user/session.

The third form is when the cookie&apos;s content is modified by the attacker before it is sent back to the server. Here the attacker seeks to convince the target server to operate on this falsified information.
+ Attack Prerequisites

    Target server software must be a HTTP daemon that relies on cookies.

+ Solutions and Mitigations

Design: Use input validation for cookies

Design: Generate and validate MAC for cookies

Implementation: Use SSL/TLS to protect cookie in transit

Implementation: Ensure the web server implements all relevant security patches, many exploitable buffer overflows are fixed in patches issued for the software.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-310-ScanningForVulnerableSoftware">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-541-ApplicationFingerprinting"/>
		<rdfs:label>Scanning For Vulnerable Software</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker engages in scanning activity to find vulnerable software versions or types, such as operating system versions or network services. Vulnerable or exploitable network configurations, such as improperly firewalled systems, or misconfigured systems in the DMZ or external network, provide windows of opportunity for an attacker. Common types of vulnerable software include unpatched operating systems or services (e.g FTP, Telnet, SMTP, SNMP) running on open ports that the attacker has identified. Attackers usually begin probing for vulnerable software once the external network has been port scanned and potential targets have been revealed.
+ Attack Prerequisites

    Access to the network on which the targeted system resides.

    Software tools used to probe systems over a range of ports and protocols.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-311-OSFingerprinting">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-224-Fingerprinting"/>
		<rdfs:label>OS Fingerprinting</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An adversary engages in fingerprinting activities to determine the type or version of the operating system of the remote target. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to &apos;break&apos; compatibility with the protocol, the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.

Fingerprinting remote operating systems involves taking an &quot;active&quot; or a &quot;passive&quot; approach. Active approaches to fingerprinting involve sending data packets that break the logical or semantic rules of a protocol and observing operating system response to artificial inputs. Passive approaches involve listening to the communication of one or more nodes and identifying the operating system or firmware of the devices involved based on the structure of their messages.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-312-ActiveOSFingerprinting">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-311-OSFingerprinting"/>
		<rdfs:label>Active OS Fingerprinting</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to &apos;break&apos; compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.
+ Attack Prerequisites

    The ability to send and receive packets from a remote target, or the ability to passively monitor network communications.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-313-PassiveOSFingerprinting">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-311-OSFingerprinting"/>
		<rdfs:label>Passive OS Fingerprinting</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker engages in activity to detect the version or type of OS software in a an environment by passively monitoring communication between devices, nodes, or applications. Passive techniques for operating system detection send no actual probes to a target, but monitor network or client-server communication between nodes in order to identify operating systems based on observed behavior as compared to a database of known signatures or values. While passive OS fingerprinting is not usually as reliable as active methods it is more stealthy.
+ Attack Prerequisites

    The ability to send and receive packets from a remote target, or the ability to passively monitor network communications.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-314-IPFingerprintingProbes">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-312-ActiveOSFingerprinting"/>
		<rdfs:label>IP Fingerprinting Probes</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker engages in IP-based techniques for the purpose of fingerprinting operating systems on the network. By interrogating a particular IP stack implementation with IP segments that deviate from the ordinary or expected rules of RFC 791, an attacker can construct a fingerprint of unique behaviors for the target operating system. When this set of behaviors is analyzed against a database of known fingerprints, an attacker can make reliable inferences about the operating system type and version.
+ Attack Prerequisites

    The ability to send and receive TCP segments from a target in order to identify a particular TCP stack implementation.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-315-TCPIPFingerprintingProbes">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-312-ActiveOSFingerprinting"/>
		<rdfs:label>TCP IP Fingerprinting Probes</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker engages in TCP stack fingerprinting techniques to determine the type and version of operating systems on the network. TCP Fingerprinting involves manipulating portions of the TCP header or other characteristics in order to elicit a unique and identifiable response from an operating system. This response is compared against a database of known operating system fingerprints and a guess about the operating system type and version is made.
+ Attack Prerequisites

    The ability to send and receive TCP segments from a target in order to identify a particular TCP stack implementation.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-316-ICMPFingerprintingProbes">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-312-ActiveOSFingerprinting"/>
		<rdfs:label>ICMP Fingerprinting Probes</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker engages in ICMP stack fingerprinting techniques to determine the operating system type and version of a remote target. The role of ICMP as an ubiquitous diagnostic messaging protocol means that ICMP fingerprinting techniques are applicable to almost any internet host in a similar manner as TCP. ICMP fingerprinting techniques involve the generation of ICMP messages and analyzing the responses. This method is limited in that most firewalls are configured to block ICMP messages for security reasons, so it is most effective when used on an internal network segment. OS fingerprints using ICMP usually involve multiple different probes as the information returned from any one probe is usually insufficient to support a reliable OS inference.
+ Attack Prerequisites

    The ability to generate and analyze ICMP messages from a target. In cases where certain message types are blocked by a firewall, the reliability of ICMP fingerprinting declines sharply.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-317-IPIDSequencingProbe">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-314-IPFingerprintingProbes"/>
		<rdfs:label>IP ID Sequencing Probe</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

This OS fingerprinting probe analyzes the IP &apos;ID&apos; field sequence number generation algorithm of a remote host. Operating systems generate IP &apos;ID&apos; numbers differently, allowing an attacker to identify the operating system of the host by examining how is assigns ID numbers when generating response packets. RFC 791 does not specify how ID numbers are chosen or their ranges, so ID sequence generation differs from implementation to implementation. There are two kinds of IP &apos;ID&apos; sequence number analysis:

    1. IP &apos;ID&apos; Sequencing: Analyzing the IP &apos;ID&apos; sequence generation algorithm for one protocol used by a host.
    2. Shared IP &apos;ID&apos; Sequencing: Analyzing the packet ordering via IP &apos;ID&apos; values spanning multiple protocols, such as between ICMP and TCP.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-318-IPIDEchoedByteOrderProbe">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-314-IPFingerprintingProbes"/>
		<rdfs:label>IP ID Echoed Byte Order Probe</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

This OS fingerprinting probe tests to determine if the remote host echoes back the IP &apos;ID&apos; value from the probe packet. An attacker sends a UDP datagram with an arbitrary IP &apos;ID&apos; value to a closed port on the remote host to observe the manner in which this bit is echoed back in the ICMP error message. The identification field (ID) is typically utilized for reassembling a fragmented packet. Some operating systems or router firmware reverse the bit order of the ID field when echoing the IP Header portion of the original datagram within an ICMP error message.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-319-IPDFDontFragmentBitEchoingProbe">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-314-IPFingerprintingProbes"/>
		<rdfs:label>IP DF Dont Fragment Bit Echoing Probe</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

This OS fingerprinting probe tests to determine if the remote host echoes back the IP &apos;DF&apos; (Don&apos;t Fragment) bit in a response packet. An attacker sends a UDP datagram with the DF bit set to a closed port on the remote host to observe whether the &apos;DF&apos; bit is set in the response packet. Some operating systems will echo the bit in the ICMP error message while others will zero out the bit in the response packet.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-32-EmbeddingScriptsInHTTPQueryStrings">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-18-EmbeddingScriptsInNonScriptElements"/>
		<rdfs:label>Embedding Scripts In HTTP Query Strings</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

A variant of cross-site scripting called &quot;reflected&quot; cross-site scripting, the HTTP Query Strings attack consists of passing a malicious script inside an otherwise valid HTTP request query string. This is of significant concern for sites that rely on dynamic, user-generated content such as bulletin boards, news sites, blogs, and web enabled administration GUIs. The malicious script may steal session data, browse history, probe files, or otherwise execute attacks on the client side. Once the attacker has prepared the malicious HTTP query it is sent to a victim user (perhaps by email, IM, or posted on an online forum), who clicks on a normal looking link that contains a poison query string. This technique can be made more effective through the use of services like http://tinyurl.com/, which makes very small URLs that will redirect to very large, complex ones. The victim will not know what he is really clicking on.
+ Attack Prerequisites

    Target client software must allow scripting such as JavaScript. Server software must allow display of remote generated HTML without sufficient input or output validation.

+ Solutions and Mitigations

Design: Use browser technologies that do not allow client side scripting.

Design: Utilize strict type, character, and encoding enforcement

Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client&apos;s browser has no way of discerning where the data is originating from.

Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.

Implementation: Perform input validation for all remote content, including remote and user-generated content

Implementation: Perform output validation for all remote content.

Implementation: Disable scripting languages such as JavaScript in browser

Implementation: Session tokens for specific host

Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.

Implementation: Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-32-EmbeddingScriptsInHttpQueryStrings">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-220-ClientServerProtocolManipulation"/>
		<rdfs:label>Embedding Scripts In Http Query Strings</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

A variant of cross-site scripting called &quot;reflected&quot; cross-site scripting, the HTTP Query Strings attack consists of passing a malicious script inside an otherwise valid HTTP request query string. This is of significant concern for sites that rely on dynamic, user-generated content such as bulletin boards, news sites, blogs, and web enabled administration GUIs. The malicious script may steal session data, browse history, probe files, or otherwise execute attacks on the client side. Once the attacker has prepared the malicious HTTP query it is sent to a victim user (perhaps by email, IM, or posted on an online forum), who clicks on a normal looking link that contains a poison query string. This technique can be made more effective through the use of services like http://tinyurl.com/, which makes very small URLs that will redirect to very large, complex ones. The victim will not know what he is really clicking on.
+ Attack Prerequisites

    Target client software must allow scripting such as JavaScript. Server software must allow display of remote generated HTML without sufficient input or output validation.

+ Solutions and Mitigations

Design: Use browser technologies that do not allow client side scripting.

Design: Utilize strict type, character, and encoding enforcement

Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client&apos;s browser has no way of discerning where the data is originating from.

Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.

Implementation: Perform input validation for all remote content, including remote and user-generated content

Implementation: Perform output validation for all remote content.

Implementation: Disable scripting languages such as JavaScript in browser

Implementation: Session tokens for specific host

Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.

Implementation: Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-320-TCPTimestampProbe">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-315-TCPIPFingerprintingProbes"/>
		<rdfs:label>TCP Timestamp Probe</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

This OS fingerprinting probe examines the remote server&apos;s implementation of TCP timestamps. Not all operating systems implement timestamps within the TCP header, but when timestamps are used then this provides the attacker with a means to guess the operating system of the target. The attacker begins by probing any active TCP service in order to get response which contains a TCP timestamp. Different Operating systems update the timestamp value using different intervals. This type of analysis is most accurate when multiple timestamp responses are received and then analyzed. TCP timestamps can be found in the TCP Options field of the TCP header.

    1. The attacker sends a probe packet to the remote host to identify if timestamps are present.
    2. If the remote host is using timestamp, the attacker sends several requests and records the timestamp values.
    3. The attacker analyzes the timestamp values and determines an average increments per second in the timestamps for the target.
    3. The attacker compares this result to a database of known TCP timestamp increments for a possible match.

+ Attack Prerequisites

    The target OS must support the TCP timestamp option in order to obtain a fingerprint.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-321-TCPSequenceNumberProbe">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-315-TCPIPFingerprintingProbes"/>
		<rdfs:label>TCP Sequence Number Probe</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

This OS fingerprinting probe tests the target system&apos;s assignment of TCP sequence numbers. One common way to test TCP Sequence Number generation is to send a probe packet to an open port on the target and then compare the how the Sequence Number generated by the target relates to the Acknowledgement Number in the probe packet. Different operating systems assign Sequence Numbers differently, so a fingerprint of the operating system can be obtained by categorizing the relationship between the acknowledgement number and sequence number as follows:

    1. The Sequence Number generated by the target is Zero.
    2. The Sequence Number generated by the target is the same as the acknowledgement number in the probe
    3. The Sequence Number generated by the target is the acknowledgement number plus one
    3. The Sequence Number is any other non-zero number.

+ Attack Prerequisites

    The ability to send an TCP ACK segment to an open port and receive a response back containing a TCP sequence number.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-322-TCPISNGreatestCommonDivisorProbe">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-315-TCPIPFingerprintingProbes"/>
		<rdfs:label>TCP ISN Greatest Common Divisor Probe</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

This OS fingerprinting probe sends a number of TCP SYN packets to an open port of a remote machine. The Initial Sequence Number (ISN) in each of the SYN/ACK response packets is analyzed to determine the smallest number that the target host uses when incrementing sequence numbers. This information can be useful for identifying an operating system because particular operating systems and versions increment sequence numbers using different values. The result of the analysis is then compared against a database of OS behaviors to determine the OS type and/or version.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-323-TCPISNCounterRateProbe">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-315-TCPIPFingerprintingProbes"/>
		<rdfs:label>TCP ISN Counter Rate Probe</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

This OS detection probe measures the average rate of initial sequence number increments during a period of time. Sequence numbers are incremented using a time-based algorithm and are susceptible to a timing analysis that can determine the number of increments per unit time. The result of this analysis is then compared against a database of operating systems and versions to determine likely operation system matches.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-324-TCPISNSequencePredictabilityProbe">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-315-TCPIPFingerprintingProbes"/>
		<rdfs:label>TCP ISN Sequence Predictability Probe</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

This type of operating system probe attempts to determine an estimate for how predictable the sequence number generation algorithm is for a remote host. Statistical techniques, such as standard deviation, can be used to determine how predictable the sequence number generation is for a system. This result can then be compared to a database of operating system behaviors to determine a likely match for operating system and version.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-325-TCPCongestionControlFlagECNProbe">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-315-TCPIPFingerprintingProbes"/>
		<rdfs:label>TCP Congestion Control Flag ECN Probe</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

This OS fingerprinting probe checks to see if the remote host supports explicit congestion notification (ECN) messaging. ECN messaging was designed to allow routers to notify a remote host when signal congestion problems are occurring. Explicit Congestion Notification messaging is defined by RFC 3168. Different operating systems and versions may or may not implement ECN notifications, or may respond uniquely to particular ECN flag types.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-326-TCPInitialWindowSizeProbe">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-315-TCPIPFingerprintingProbes"/>
		<rdfs:label>TCP Initial Window Size Probe</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

This OS fingerprinting probe checks the initial TCP Window size. TCP stacks limit the range of sequence numbers allowable within a session to maintain the &quot;connected&quot; state within TCP protocol logic. The initial window size specifies a range of acceptable sequence numbers that will qualify as a response to an ACK packet within a session. Various operating systems use different Initial window sizes. The initial window size can be sampled by establishing an ordinary TCP connection.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-327-TCPOptionsProbe">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-315-TCPIPFingerprintingProbes"/>
		<rdfs:label>TCP Options Probe</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

This OS fingerprinting probe analyzes the type and order of any TCP header options present within a response segment. Most operating systems use unique ordering and different option sets when options are present. RFC 793 does not specify a required order when options are present, so different implementations use unique ways of ordering or structuring TCP options. TCP options can be generated by ordinary TCP traffic.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-328-TCPRSTFlagChecksumProbe">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-315-TCPIPFingerprintingProbes"/>
		<rdfs:label>TCP RST Flag Checksum Probe</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

This OS fingerprinting probe performs a checksum on any ASCII data contained within the data portion or a RST packet. Some operating systems will report a human-readable text message in the payload of a &apos;RST&apos; (reset) packet when specific types of connection errors occur. RFC 1122 allows text payloads within reset packets but not all operating systems or routers implement this functionality.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-329-ICMPErrorMessageQuotingProbe">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-316-ICMPFingerprintingProbes"/>
		<rdfs:label>ICMP Error Message Quoting Probe</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker uses a technique to generate an ICMP Error message (Port Unreachable, Destination Unreachable, Redirect, Source Quench, Time Exceeded, Parameter Problem) from a target and then analyze the amount of data returned or &quot;Quoted&quot; from the originating request that generated the ICMP error message. For this purpose &quot;Port Unreachable&quot; error messages are often used, as generating them requires the attacker to send a UDP datagram to a closed port on the target. The goal of this analysis to make inferences about the type of operating system or firmware that sent the error message in reply. This is useful for identifying unique characteristics of operating systems because the RFC-1122 expected behavior reads: &quot;Every ICMP error message includes the Internet header and at least the first 8 data octets of the datagram that triggered the error; more than 8 octets MAY be sent [...].&quot; This contrasts with RFC-792 expected behavior, which limited the quoted text to 64 bits (8 octets). Given the latitude in the specification the resulting RFC-1122 stack implementations often respond with a high degree of variability in the amount of data quoted in the error message because &quot;older&quot; or &quot;legacy&quot; stacks may comply with the RFC-792 specification, while other stacks may choose a longer format in accordance with RFC-1122. As a general rule most operating systems or firmware will quote the first 8 bytes of the datagram triggering the error, but some IP stacks will quote more than the first 8 bytes of data.
+ Attack Prerequisites

    The ability to send a UDP datagram to a closed port and receive an ICMP Error Message Type 3, &quot;Port Unreachable&quot;</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-33-HTTPRequestSmuggling">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-220-ClientServerProtocolManipulation"/>
		<rdfs:label>HTTP Request Smuggling</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

HTTP Request Smuggling results from the discrepancies in parsing HTTP requests between HTTP entities such as web caching proxies or application firewalls. Entities such as web servers, web caching proxies, application firewalls or simple proxies often parse HTTP requests in slightly different ways. Under specific situations where there are two or more such entities in the path of the HTTP request, a specially crafted request is seen by two attacked entities as two different sets of requests. This allows certain requests to be smuggled through to a second entity without the first one realizing it.
+ Attack Prerequisites

    An additional HTTP entity such as an application firewall or a web caching proxy between the attacker and the second entity such as a web server

    Differences in the way the two HTTP entities parse HTTP requests

+ Solutions and Mitigations

HTTP Request Smuggling is usually targeted at web servers. Therefore, in such cases, careful analysis of the entities must occur during system design prior to deployment. If there are known differences in the way the entities parse HTTP requests, the choice of entities needs consideration.

Employing an application firewall can help. However, there are instances of the firewalls being susceptible to HTTP Request Smuggling as well.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-330-ICMPErrorMessageEchoingIntegrityProbe">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-316-ICMPFingerprintingProbes"/>
		<rdfs:label>ICMP Error Message Echoing Integrity Probe</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker uses a technique to generate an ICMP Error message (Port Unreachable, Destination Unreachable, Redirect, Source Quench, Time Exceeded, Parameter Problem) from a target and then analyze the integrity of data returned or &quot;Quoted&quot; from the originating request that generated the error message. For this purpose &quot;Port Unreachable&quot; error messages are often used, as generating them requires the attacker to send a UDP datagram to a closed port on the target. When replying with an ICMP error message some IP/ICMP stack implementations change aspects of the IP header, change or reverse certain byte orders, reset certain field values to default values which differ between operating system and firmware implementations, and make other changes. Some IP/ICMP stacks are decidedly broken, indicating an idiosyncratic behavior that differs from the RFC specifications, such as the case when miscalculations affect a field value. A tremendous amount of information about the host operating system can be deduced from its &apos;echoing&apos; characteristics. Notably, inspection of key protocol header fields, including the echoed header fields of the encapsulating protocol can yield a wealth of data about the host operating system or firmware version.
+ Attack Prerequisites

    The ability to send a UDP datagram to a closed port and receive an ICMP Error Message Type 3, &quot;Port Unreachable.&quot;</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-331-ICMPIPTotalLengthFieldProbe">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-316-ICMPFingerprintingProbes"/>
		<rdfs:label>ICMP IP Total Length Field Probe</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker sends a UDP packet to a closed port on the target machine to solicit an IP Header&apos;s total length field value within the echoed &apos;Port Unreachable&quot; error message. RFC1122 specifies that the Header of the request must be echoed back when an error is sent in response, but some operating systems and firmware alter the integrity of the original header. Non-standard ICMP/IP implementations result in response that are useful for individuating remote operating system or router firmware versions. There are four general response types that can be used to distinguish operating systems apart.

    1. The IP total length field may be calculated correctly.
    2. An operating system may add 20 or more additional bytes to the length calculation.
    3. The operating system may subtract 20 or more bytes from the correct length of the field
    4. The IP total length field is calculated with any other incorrect value.

This type of behavior is useful for building a signature-base of operating system responses, particularly when error messages contain other types of information that is useful identifying specific operating system responses.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-332-ICMPIPIDFieldErrorMessageProbe">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-316-ICMPFingerprintingProbes"/>
		<rdfs:label>ICMP IP ID Field Error Message Probe</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker sends a UDP datagram having an assigned value to its internet identification field (ID) to a closed port on a target to observe the manner in which this bit is echoed back in the ICMP error message. The internet identification field (ID) is typically utilized for reassembling a fragmented packet. RFC791 and RFC815 discusses about IP datagrams, fragmentation and reassembly. Some operating systems or router firmware reverse the bit order of the ID field when echoing the IP Header portion of the original datagram within the ICMP error message. There are 3 behaviors that can be used to distinguish remote operating systems or firmware.

    The IP ID field is echoed back identically to the bit order of the ID field in the original IP header.
    The IP ID field is echoed back, but the byte order has been reversed.
    The IP ID field contains an incorrect or unexpected value.

Different operating systems will respond by setting the IP ID field differently within error messaging. This allows the attacker to construct a fingerprint of specific OS behaviors.
+ Attack Prerequisites

    The ability to send a UDP datagram to a closed port and receive an ICMP Error Message Type 3, &quot;Port Unreachable.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-34-HTTPResponseSplitting">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-220-ClientServerProtocolManipulation"/>
		<rdfs:label>HTTP Response Splitting</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

This attack uses a maliciously-crafted HTTP request in order to cause a vulnerable web server to respond with an HTTP response stream that will be interpreted by the client as two separate responses instead of one. This is possible when user-controlled input is used unvalidated as part of the response headers. The target software, the client, will interpret the injected header as being a response to a second request, thereby causing the maliciously-crafted contents be displayed and possibly cached.

To achieve HTTP Response Splitting on a vulnerable web server, the attacker:
+ Attack Prerequisites

    User-controlled input used as part of HTTP header

    Ability of attacker to inject custom strings in HTTP header

    Insufficient input validation in application to check for input sanity before using it as part of response header

+ Solutions and Mitigations

To avoid HTTP Response Splitting, the application must not rely on user-controllable input to form part of its output response stream. Specifically, response splitting occurs due to injection of CR-LF sequences and additional headers. All data arriving from the user and being used as part of HTTP response headers must be subjected to strict validation that performs simple character-based as well as semantic filtering to strip it of malicious character sequences and headers.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-35-LeverageExecutableCodeInNonExecutableFiles">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-165-FileManipulation"/>
		<rdfs:label>Leverage Executable Code In Non Executable Files</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attack of this type exploits a system&apos;s trust in configuration and resource files, when the executable loads the resource (such as an image file or configuration file) the attacker has modified the file to either execute malicious code directly or manipulate the target process (e.g. application server) to execute based on the malicious configuration parameters. Since systems are increasingly interrelated mashing up resources from local and remote sources the possibility of this attack occurring is high.

The attack can be directed at a client system, such as causing buffer overrun through loading seemingly benign image files, as in Microsoft Security Bulletin MS04-028 where specially crafted JPEG files could cause a buffer overrun once loaded into the browser. Another example targets clients reading pdf files. In this case the attacker simply appends javascript to the end of a legitimate url for a pdf (http://www.gnucitizen.org/blog/danger-danger-danger/)

http://path/to/pdf/file.pdf#whatever_name_you_want=javascript:your_code_here

The client assumes that they are reading a pdf, but the attacker has modified the resource and loaded executable javascript into the client&apos;s browser process.

The attack can also target server processes. The attacker edits the resource or configuration file, for example a web.xml file used to configure security permissions for a J2EE app server, adding role name &quot;public&quot; grants all users with the public role the ability to use the administration functionality.
&lt; security-constraint&gt;
&lt;description&gt;Security processing rules for admin screens&lt;/description&gt;
&lt;url-pattern&gt;/admin/*&lt;/url-pattern&gt;
&lt;http-method&gt;POST&lt;/http-method&gt;
&lt;http-method&gt;GET&lt;/http-method&gt;
&lt;auth-constraint&gt;
&lt;role-name&gt;administrator&lt;/role-name&gt;
&lt;role-name&gt;public&lt;/role-name&gt;
&lt;/auth-constraint&gt;
&lt;/security-constraint&gt;

The server trusts its configuration file to be correct, but when they are manipulated, the attacker gains full control.
+ Attack Prerequisites

    The attacker must have the ability to modify non-executable files consumed by the target software.

+ Solutions and Mitigations

Design: Enforce principle of least privilege

Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.

Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.

Implementation: Implement host integrity monitoring to detect any unwanted altering of configuration files.

Implementation: Ensure that files that are not required to execute, such as configuration files, are not over-privileged, i.e. not allowed to execute.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-36-UsingUnpublishedAPIs">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-113-APIManipulation"/>
		<rdfs:label>Using Unpublished APIs</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An adversary searches for and invokes APIs that the target system designers did not intend to be publicly available. If these APIs fail to authenticate requests the attacker may be able to invoke functionality they are not authorized for.
+ Attack Prerequisites

    The architecture under attack must publish or otherwise make available services that clients can attach to, either in an unauthenticated fashion, or having obtained an authentication token elsewhere. The service need not be &apos;discoverable&apos;, but in the event it isn&apos;t it must have some way of being discovered by an attacker. This might include listening on a well-known port. Ultimately, the likelihood of exploit depends on discoverability of the vulnerable service.

+ Solutions and Mitigations

Authenticating both services and their discovery, and protecting that authentication mechanism simply fixes the bulk of this problem. Protecting the authentication involves the standard means, including: 1) protecting the channel over which authentication occurs, 2) preventing the theft, forgery, or prediction of authentication credentials or the resultant tokens, or 3) subversion of password reset and the like.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-37-RetrieveEmbeddedSensitiveData">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-167-WhiteBoxReverseEngineering"/>
		<rdfs:label>Retrieve Embedded Sensitive Data</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack.
+ Attack Prerequisites

    In order to feasibly execute this type of attack, some valuable data must be present in client software.

    Additionally, this information must be unprotected, or protected in a flawed fashion, or through a mechanism that fails to resist reverse engineering, statistical, or other attack.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-38-LeveragingManipulatingConfigurationFileSearchPaths">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-159-RedirectAccessToLibraries"/>
		<rdfs:label>Leveraging Manipulating Configuration File Search Paths</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

This attack loads a malicious resource into a program&apos;s standard path used to bootstrap and/or provide contextual information for a program like a path variable or classpath. J2EE applications and other component based applications that are built from multiple binaries can have very long list of dependencies to execute. If one of these libraries and/or references is controllable by the attacker then application controls can be circumvented by the attacker.

A standard UNIX path looks similar to this
/bin:/sbin:/usr/bin:/usr/local/bin:/usr/sbin

If the attacker modifies the path variable to point to a locale that includes malicious resources then the user unwittingly can execute commands on the attackers&apos; behalf:
/evildir/bin:/sbin:/usr/bin:/usr/local/bin:/usr/sbin

This is a form of usurping control of the program and the attack can be done on the classpath, database resources, or any other resources built from compound parts. At runtime detection and blocking of this attack is nearly impossible, because the configuration allows execution.
+ Attack Prerequisites

    The attacker must be able to write to redirect search paths on the victim host.

+ Solutions and Mitigations

Design: Enforce principle of least privilege

Design: Ensure that the program&apos;s compound parts, including all system dependencies, classpath, path, and so on, are secured to the same or higher level assurance as the program

Implementation: Host integrity monitoring</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-383-HarvestingUsernamesOrUserIDsViaApplicationAPIEventMonitoring">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-117-Interception"/>
		<rdfs:label>Harvesting Usernames Or User IDs Via Application API Event Monitoring</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker hosts an event within an application framework and then monitors the data exchanged during the course of the event for the purpose of harvesting any important data leaked during the transactions. One example could be harvesting lists of usernames or userIDs for the purpose of sending spam messages to those users. One example of this type of attack involves the attacker creating an event within the sub-application. Assume the attacker hosts a &quot;virtual sale&quot; of rare items. As other users enter the event, the attacker records via MITM proxy the user_ids and usernames of everyone who attends. The attacker would then be able to spam those users within the application using an automated script.
+ Attack Prerequisites

    Targeted software is utilizing application framework APIs</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-384-ApplicationAPIMessageManipulationViaManInTheMiddle">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-94-ManInTheMiddleAttack"/>
		<rdfs:label>Application API Message Manipulation Via Man In The Middle</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack can allow the attacker to gain unauthorized privileges within the application, or conduct attacks such as phishing, deceptive strategies to spread malware, or traditional web-application attacks. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system. Despite the use of MITM software, the attack is actually directed at the server, as the client is one node in a series of content brokers that pass information along to the application framework. Additionally, it is not true &quot;Man-in-the-Middle&quot; attack at the network layer, but an application-layer attack the root cause of which is the master applications trust in the integrity of code supplied by the client.
+ Attack Prerequisites

    Targeted software is utilizing application framework APIs</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-385-TransactionOrEventTamperingViaApplicationAPIManipulation">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-384-ApplicationAPIMessageManipulationViaManInTheMiddle"/>
		<rdfs:label>Transaction Or Event Tampering Via Application API Manipulation</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker hosts or joins an event or transaction within an application framework in order to change the content of messages or items that are being exchanged. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, substitute one item or another, spoof an existing item and conduct a false exchange, or otherwise change the amounts or identity of what is being exchanged. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system in order to change the content of various application elements. Often, items exchanged in game can be monetized via sales for coin, virtual dollars, etc. The purpose of the attack is for the attack to scam the victim by trapping the data packets involved the exchange and altering the integrity of the transfer process.
+ Attack Prerequisites

    Targeted software is utilizing application framework APIs</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-386-ApplicationAPINavigationRemapping">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-385-TransactionOrEventTamperingViaApplicationAPIManipulation"/>
		<rdfs:label>Application API Navigation Remapping</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of links/buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains links/buttons that point to an attacker controlled destination. Some applications make navigation remapping more difficult to detect because the actual HREF values of images, profile elements, and links/buttons are masked. One example would be to place an image in a user&apos;s photo gallery that when clicked upon redirected the user to an off-site location. Also, traditional web vulnerabilities (such as CSRF) can be constructed with remapped buttons or links. In some cases navigation remapping can be used for Phishing attacks or even means to artificially boost the page view, user site reputation, or click-fraud.
+ Attack Prerequisites

    Targeted software is utilizing application framework APIs</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-387-NavigationRemappingToPropagateMaliciousContent">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-386-ApplicationAPINavigationRemapping"/>
		<rdfs:label>Navigation Remapping To Propagate Malicious Content</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages and thereby circumvent the expected application logic. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, spam-like content, or links to the attackers&apos; code. In general, content-spoofing within an application API can be employed to stage many different types of attacks varied based on the attackers&apos; intent. When the goal is to spread malware, deceptive content is created such as modified links, buttons, or images, that entice users to click on those items, all of which point to a malicious URI. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system in order to change the destination of various application interface elements.
+ Attack Prerequisites

    Targeted software is utilizing application framework APIs</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-388-ApplicationAPIButtonHijacking">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-386-ApplicationAPINavigationRemapping"/>
		<rdfs:label>Application API Button Hijacking</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains buttons that point to an attacker controlled destination. For example, an in-game event occurs and the attacker traps the result, which turns out to be a form that will be populated to their primary profile. The attacker, using a MITM proxy, observes the following data:
[Button][Claim_Item]Sourdough_Cookie[URL_IMG]foo[/URL_IMG][Claim_Link]bar[/Claim_Link]

By altering the destination of &quot;Claim_Link&quot; to point to the attackers&apos; server an unwitting victim can be enticed to click the link. Another example would be for the attacker to rewrite the button destinations for an event so that clicking &quot;Yes&quot; or &quot;No&quot; causes the user to load the attackers&apos; code.
+ Attack Prerequisites

    Targeted software is utilizing application framework APIs</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-389-ContentSpoofingViaApplicationAPIManipulation">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-384-ApplicationAPIMessageManipulationViaManInTheMiddle"/>
		<rdfs:label>Content Spoofing Via Application API Manipulation</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, spam-like content, or links to the attackers&apos; code. In general, content-spoofing within an application API can be employed to stage many different types of attacks varied based on the attackers&apos; intent. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system.
+ Attack Prerequisites

    Targeted software is utilizing application framework APIs</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-39-ManipulatingOpaqueClientBasedDataTokens">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-22-ExploitingTrustInClient"/>
		<rdfs:label>Manipulating Opaque Client Based Data Tokens</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

In circumstances where an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) that data can be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker. In this pattern an attacker undermines the assumption that client side tokens have been adequately protected from tampering through use of encryption or obfuscation.
+ Attack Prerequisites

    An attacker already has some access to the system or can steal the client based data tokens from another user who has access to the system.

    For an Attacker to viably execute this attack, some data (later interpreted by the application) must be held client-side in a way that can be manipulated without detection. This means that the data or tokens are not CRCd as part of their value or through a separate meta-data store elsewhere.

+ Solutions and Mitigations

One solution to this problem is to protect encrypted data with a CRC of some sort. If knowing who last manipulated the data is important, then using a cryptographic &quot;message authentication code&quot; (or hMAC) is prescribed. However, this guidance is not a panacea. In particular, any value created by (and therefore encrypted by) the client, which itself is a &quot;malicious&quot; value, all the protective cryptography in the world can&apos;t make the value &apos;correct&apos; again. Put simply, if the client has control over the whole process of generating and encoding the value, then simply protecting its integrity doesn&apos;t help.

Make sure to protect client side authentication tokens for confidentiality (encryption) and integrity (signed hash)

Make sure that all session tokens use a good source of randomness

Perform validation on the server side to make sure that client side data tokens are consistent with what is expected.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-390-BypassingPhysicalSecurity">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Bypassing Physical Security</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

Facilities often used layered models for physical security such as traditional locks, Electronic-based card entry systems, coupled with physical alarms. Hardware security mechanisms range from the use of computer case and cable locks as well as RFID tags for tracking computer assets. This layered approach makes it difficult for random physical security breaches to go unnoticed, but is less effective at stopping deliberate and carefully planned break-ins. Avoiding detection begins with evading building security and surveillance and methods for bypassing the electronic or physical locks which secure entry points.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-391-BypassingPhysicalLocks">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-390-BypassingPhysicalSecurity"/>
		<rdfs:label>Bypassing Physical Locks</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker uses techniques and methods to bypass physical security measures of a building or facility. Physical locks may range from traditional lock and key mechanisms, cable locks used to secure laptops or servers, locks on server cases, or other such devices. Techniques such as lock bumping, lock forcing via snap guns, or lock picking can be employed to bypass those locks and gain access to the facilities or devices they protect, although stealth, evidence of tampering, and the integrity of the lock following an attack, are considerations that may determine the method employed. Physical locks are limited by the complexity of the locking mechanism. While some locks may offer protections such as shock resistant foam to prevent bumping or lock forcing methods, many commonly employed locks offer no such countermeasures.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-392-LockBumping">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-391-BypassingPhysicalLocks"/>
		<rdfs:label>Lock Bumping</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker uses a bump key to force a lock on a building or facility and gain entry. Lock Bumping is the use of a special type of key that can be tapped or bumped to cause the pins within the lock to fall into temporary alignment, allowing the lock to be opened. Lock bumping allows an attacker to open a lock without having the correct key. A standard lock is secured by a set of internal pins that prevent the device from turning. Spring loaded driver pins push down on the key pins. When the correct key is inserted, the ridges on the key push the key pins up and against the driver pins, causing correct alignment which allows the lock cylinder to rotate. A bump key is a specially constructed key that exploits this design. When the bump key is struck or firmly tapped, its teeth transfer the force of the tap into the key pins, causing the lock to momentarily shift into proper alignment for the mechanism to be opened.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-393-LockPicking">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-391-BypassingPhysicalLocks"/>
		<rdfs:label>Lock Picking</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker uses lock picking tools and techniques to bypass the locks on a building or facility. Lock picking is the use of a special set of tools to manipulate the pins within a lock. Different sets of tools are required for each type of lock. Lock picking attacks have the advantage of being non-invasive in that if performed correctly the lock will not be damaged. A standard lock pin-and-tumbler lock is secured by a set of internal pins that prevent the tumbler device from turning. Spring loaded driver pins push down on the key pins preventing rotation so that the bolt remains in a locked position.. When the correct key is inserted, the ridges on the key push the key pins up and against the driver pins, causing correct alignment which allows the lock cylinder to rotate. Most common locks, such as domestic locks in the US, can be picked using a standard 2 tools (i.e. a torsion wrench and a hook pick).</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-394-UsingASnapGunLockToForceALock">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-391-BypassingPhysicalLocks"/>
		<rdfs:label>Using A Snap Gun Lock To Force A Lock</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker uses a Snap Gun, also known as a Pick Gun, to force the lock on a building or facility. A Pick Gun is a special type of lock picking instrument that works on similar principles as lock bumping. A snap gun is a hand-held device with an attached metal pick. The metal pick strikes the pins within the lock, transferring motion from the key pins to the driver pins and forcing the lock into momentary alignment. A standard lock is secured by a set of internal pins that prevent the device from turning. Spring loaded driver pins push down on the key pins. When the correct key is inserted, the ridges on the key push the key pins up and against the driver pins, causing correct alignment which allows the lock cylinder to rotate. A Snap Gun exploits this design by using a metal pin to strike all of the key pins at once, forcing the driver pins to shift into an unlocked position. Unlike bump keys or lock picks, a Snap Gun may damage the lock more easily, leaving evidence that the lock has been tampered with.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-395-BypassingElectronicLocksAndAccessControls">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-390-BypassingPhysicalSecurity"/>
		<rdfs:label>Bypassing Electronic Locks And Access Controls</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker exploits security assumptions to bypass electronic locks or other forms of access controls. Most attacks against electronic access controls follow similar methods but utilize different tools. Some electronic locks utilize magnetic strip cards, others employ RFID tags embedded within a card or badge, or may involve more sophisticated protections such as voice-print, thumb-print, or retinal biometrics. Magnetic Strip and RFID technologies are the most widespread because they are cost effective to deploy and more easily integrated with other electronic security measures. These technologies share common weaknesses that an attacker can exploit to gain access to a facility protected by the mechanisms via copying legitimate cards or badges, or generating new cards using reverse-engineered algorithms.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-396-BypassingCardOrBadgeBasedSystems">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-395-BypassingElectronicLocksAndAccessControls"/>
		<rdfs:label>Bypassing Card Or Badge Based Systems</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker bypasses the security of a card-based system by using techniques such as cloning access cards or using brute-force techniques. Card-based systems are widespread throughout business, government, and supply-chain management. Attacks against card-based systems vary widely based on the attackers&apos; goals, but commonly include unauthorized reproduction of cards, brute-force creation of valid card-values, and attacks against systems which read or process card data. Due to the inherent weaknesses of card and badge security, high security environments will rarely rely upon the card or badge alone as a security mechanism. Common card based systems are used for financial transactions, user identification, and access control. Cloning attacks involve making an unauthorized copy of a user&apos;s card while brute-force attacks involve creating new cards with valid values. Denial of service attacks against card-based systems involve rendering the reader, or the card itself, to become disabled. Such attacks may be useful in a fail-closed system for keeping authorized users out of a location while a crime is in progress, whereas fail-open systems may grant access, or an alarm my fail to trigger, if an attacker disables or damages the card authentication device.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-397-CloningMagneticStripCards">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-396-BypassingCardOrBadgeBasedSystems"/>
		<rdfs:label>Cloning Magnetic Strip Cards</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker duplicates the data on a Magnetic strip card (i.e. &apos;swipe card&apos; or &apos;magstripe&apos;) to gain unauthorized access to a physical location or a person&apos;s private information. Magstripe cards encode data on a band of iron-based magnetic particles arrayed in a stripe along a rectangular card. Most magstripe card data formats conform to ISO standards 7810, 7811, 7813, 8583, and 4909. The primary advantage of magstripe technology is ease of encoding and portability, but this also renders magnetic strip cards susceptible to unauthorized duplication. If magstripe cards are used for access control, all an attacker need do is obtain a valid card long enough to make a copy of the card and then return the card to its location (i.e. a co-worker&apos;s desk). Magstripe reader/writers are widely available as well as software for analyzing data encoded on the cards. By swiping a valid card, it becomes trivial to make any number of duplicates that function as the original.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-398-MagneticStripCardBruteForceAttacks">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-396-BypassingCardOrBadgeBasedSystems"/>
		<rdfs:label>Magnetic Strip Card Brute Force Attacks</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker analyzes the data on two or more magnetic strip cards and is able to generate new cards containing valid sequences that allow unauthorized access and/or impersonation of individuals. Often, magnetic strip encoding methods follow a common format for a given system laid out in up to three tracks. A single card may allow access to a corporate office complex shared by multiple companies. By analyzing how the data is stored on a card, it is also possible to create valid cards via brute-force attacks. For example, a single card can grant access to a building, a floor, and a suite number. Reading and analyzing data on multiple cards, then performing a difference analysis between data encoded on three different cards, can reveal clues as to how to generate valid cards that grant access to restricted areas of a building or suites/rooms within that building. Data stored on magstripe cards is often unencrypted, therefore comparing which data changes when two or more cards are analyzed can yield results that aid in determining the structure of the card data. A trivial example would be a common system data format on a data track which binary encodes the suite number of a building that a card will open. By creating multiple cards with differing binary encoded segments it becomes possible to enter unauthorized areas or pass through checkpoints giving the electronic ID of other persons.
+ Attack Prerequisites

    The ability to calculate a card checksum and write out a valid checksum value. Some cards are protected by a checksum calculation, therefore it is necessary to determine what algorithm is being used to calculate the checksum and to employ that algorithm to calculate and write a new valid checksum for the card being created.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-399-CloningRFIDCardsOrChips">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-396-BypassingCardOrBadgeBasedSystems"/>
		<rdfs:label>Cloning RFID Cards Or Chips</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker analyzes data returned by an RFID chip and uses this information to duplicate a RFID signal that responds identically to the target chip. In some cases RFID chips are used for building access control, employee identification, or as markers on products being delivered along a supply chain. Some organizations also embed RFID tags inside computer assets to trigger alarms if they are removed from particular rooms, zones, or buildings. Similar to Magnetic strip cards, RFID cards are susceptible to duplication (cloning) and reuse. RFID (Radio Frequency Identification) are passive devices which consist of an integrated circuit for processing RF signals and an antenna. RFID devices are passive in that they lack an on on-board power source. The majority of RFID chips operate on either the 13.56 MHz or 135 KHz frequency. The chip is powered when a signal is received by the antenna on the chip, powering the chip long enough to send a reply message. An attacker is able to capture and analyze RFID data by either stimulating the chip to respond or being proximate to the chip when it sends a response to a remote transmitter. This allows the attacker to duplicate the signal and conduct attacks such as gaining unauthorized access to a building or impersonating a user&apos;s identification.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-4-UsingAlternativeIPAddressEncodings">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-267-LeverageAlternateEncoding"/>
		<rdfs:label>Using Alternative IP Address Encodings</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

This attack relies on the attacker using unexpected formats for representing IP addresses. Networked applications may expect network location information in a specific format, such as fully qualified domains names, URL, IP address, or IP Address ranges. The issue that the attacker can exploit is that these design assumptions may not be validated against a variety of different possible encodings and network address location formats. Applications that use naming for creating policy namespaces for managing access control may be susceptible to being queried directly by IP addresses, which is ultimately a more generally authoritative way of communicating on a network.

Alternative IP addresses can be used by the attacker to bypass application access control in order to gain access to data that is only protected by obscuring its location.

In addition this type of attack can be used as a reconnaissance mechanism to provide entry point information that the attacker gathers to penetrate deeper into the system.
+ Attack Prerequisites

    The target software must fail to anticipate all of the possible valid encodings of an IP/web address.

+ Solutions and Mitigations

Design: Default deny access control policies

Design: Input validation routines should check and enforce both input data types and content against a positive specification. In regards to IP addresses, this should include the authorized manner for the application to represent IP addresses and not accept user specified IP addresses and IP address formats (such as ranges)

Implementation: Perform input validation for all remote content.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-40-ManipulatingWriteableTerminalDevices">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-249-LinuxTerminalInjection"/>
		<rdfs:label>Manipulating Writeable Terminal Devices</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

This attack exploits terminal devices that allow themselves to be written to by other users. The attacker sends command strings to the target terminal device hoping that the target user will hit enter and thereby execute the malicious command with their privileges. The attacker can send the results (such as copying /etc/passwd) to a known directory and collect once the attack has succeeded.
+ Attack Prerequisites

    User terminals must have a permissive access control such as world writeable that allows normal users to control data on other user&apos;s terminals.

+ Solutions and Mitigations

Design: Ensure that terminals are only writeable by named owner user and/or administrator

Design: Enforce principle of least privilege</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-400-RFIDChipDeactivationOrDestruction">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-396-BypassingCardOrBadgeBasedSystems"/>
		<rdfs:label>RFID Chip Deactivation Or Destruction</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker uses methods to deactivate a passive RFID tag for the purpose of rendering the tag, badge, card, or object containing the tag unresponsive. RFID tags are used primarily for access control, inventory, or anti-theft devices. The purpose of attacking the RFID chip is to disable or damage the chip without causing damage to the object housing it. When correctly performed the RFID chip can be disabled or destroyed without visible damage or marking to whatever item or device containing the chip. Attacking the chip directly allows for the security device or method to be bypassed without directly damaging the device itself, such as an alarm system or computer system Various methods exist for damaging or deactivating RFID tags. For example, most common RFID chips can be permanently destroyed by creating a small electromagnetic pulse near the chip itself. One method employed requires the modifying a disposable camera by disconnecting the flash bulb and soldering a copper coil to the capacitor. Firing the camera in this configuration near any RFID chip-based device creates an EMP pulse sufficient to destroy the chip without leaving evidence of tampering. So far this attack has been demonstrated to work against RFID chips in the 13.56 MHz range.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-401-HackingHardware">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-440-HardwareIntegrityAttack"/>
		<rdfs:label>Hacking Hardware</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker changes or replaces a hardware component which undermines the system&apos;s integrity for the purpose of carrying out an attack. After deployment, it is not uncommon for upgrades and replacements to occur involving hardware and various replaceable parts. These upgrades and replacements are intended to correct defects, provide additional features, and to replace broken or worn-out parts. However, by forcing or tricking the replacement of a good component with a defective or corrupted component, an attacker can leverage known defects to obtain a desired malicious impact.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-402-BypassingATAPasswordSecurity">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-401-HackingHardware"/>
		<rdfs:label>Bypassing ATA Password Security</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker exploits a weakness in ATA security on a drive to gain access to the information the drive contains without supplying the proper credentials. ATA Security is often employed to protect hard disk information from unauthorized access. The mechanism requires the user to type in a password before the BIOS is allowed access to drive contents. Some implementations of ATA security will accept the ATA command to update the password without the user having authenticated with the BIOS. This occurs because the security mechanism assumes the user has first authenticated via the BIOS prior to sending commands to the drive. Various methods exist for exploiting this flaw, the most common being installing the ATA protected drive into a system lacking ATA security features (a.k.a. hot swapping). Once the drive is installed into the new system the BIOS can be used to reset the drive password.
+ Attack Prerequisites

    Access to the system containing the ATA Drive so that the drive can be physically removed from the system.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-41-UsingMetaCharactersInEmailHeadersToInjectMaliciousPayloads">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-242-CodeInjection"/>
		<rdfs:label>Using Meta Characters In Email Headers To Inject Malicious Payloads</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

This type of attack involves an attacker leveraging meta-characters in email headers to inject improper behavior into email programs.

Email software has become increasingly sophisticated and feature-rich. In addition, email applications are ubiquitous and connected directly to the Web making them ideal targets to launch and propagate attacks. As the user demand for new functionality in email applications grows, they become more like browsers with complex rendering and plug in routines. As more email functionality is included and abstracted from the user, this creates opportunities for attackers. Virtually all email applications do not list email header information by default, however the email header contains valuable attacker vectors for the attacker to exploit particularly if the behavior of the email client application is known. Meta-characters are hidden from the user, but can contain scripts, enumerations, probes, and other attacks against the user&apos;s system.
+ Attack Prerequisites

    This attack targets most widely deployed feature rich email applications, including web based email programs.

+ Solutions and Mitigations

Design: Perform validation on email header data

Implementation: Implement email filtering solutions on mail server or on MTA, relay server.

Implementation: Mail servers that perform strict validation may catch these attacks, because metacharacters are not allowed in many header variables such as dns names</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-41-UsingMetaCharactersinEmailHeadersToInjectMaliciousPayloads">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-134-EmaiIInjection"/>
		<rdfs:label>Using Meta Characters in Email Headers To Inject Malicious Payloads</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

This type of attack involves an attacker leveraging meta-characters in email headers to inject improper behavior into email programs.

Email software has become increasingly sophisticated and feature-rich. In addition, email applications are ubiquitous and connected directly to the Web making them ideal targets to launch and propagate attacks. As the user demand for new functionality in email applications grows, they become more like browsers with complex rendering and plug in routines. As more email functionality is included and abstracted from the user, this creates opportunities for attackers. Virtually all email applications do not list email header information by default, however the email header contains valuable attacker vectors for the attacker to exploit particularly if the behavior of the email client application is known. Meta-characters are hidden from the user, but can contain scripts, enumerations, probes, and other attacks against the user&apos;s system.
+ Attack Prerequisites

    This attack targets most widely deployed feature rich email applications, including web based email programs.

+ Solutions and Mitigations

Design: Perform validation on email header data

Implementation: Implement email filtering solutions on mail server or on MTA, relay server.

Implementation: Mail servers that perform strict validation may catch these attacks, because metacharacters are not allowed in many header variables such as dns names</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-416-TargetInfluenceViaSocialEngineering">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Target Influence Via Social Engineering</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker exploits inherent human psychological predispositions to influence a targeted individual or group to solicit information or manipulate the target into performing an action that serves the attackers&apos; interests. Many interpersonal social engineering techniques do not involve outright deception, although they can; many are subtle ways of manipulating a target to remove barriers, make the target feel comfortable, and produce an exchange in which the target is either more likely to share information directly, or let key information slip out unintentionally. A skilled attacker uses these techniques when appropriate to produce the desired outcome. Manipulation techniques vary from the overt, such as pretending to be a supervisor to a help desk, to the subtle, such as making the target feel comfortable with the attackers&apos; speech and thought patterns.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-417-TargetInfluenceViaPerceptionOfReciprocation">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-416-TargetInfluenceViaSocialEngineering"/>
		<rdfs:label>Target Influence Via Perception Of Reciprocation</rdfs:label>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-418-TargetInfluenceViaPerceptionOfObligation">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-417-TargetInfluenceViaPerceptionOfReciprocation"/>
		<rdfs:label>Target Influence Via Perception Of Obligation</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker uses a social engineering technique to produce a sense of obligation within the target to volunteer some key or sensitive piece of information. Obligation has to do with actions one feels they need to take due to some sort of social, legal, or moral requirement, duty, contract, or promise. In the context of social engineering, obligation is closely related to reciprocation but is not limited to it. There are various techniques for producing a sense of obligation during ordinary modes of communication. One method is to compliment the target, and follow up the compliment with a question. If performed correctly the target may volunteer a key piece of information, sometimes involuntarily. It can also be as simple as holding an outer door for someone will usually make them hold the inner door for you. It can be escalated to someone giving you private info because you create a sense of obligation. This is a common attack vector when targeting customer service people.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-419-TargetInfluenceViaPerceptionOfConcession">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-417-TargetInfluenceViaPerceptionOfReciprocation"/>
		<rdfs:label>Target Influence Via Perception Of Concession</rdfs:label>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-42-MIMEConversion">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-100-OverflowBuffers"/>
		<rdfs:label>MIME Conversion</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker exploits a weakness in the MIME conversion routine to cause a buffer overflow and gain control over the mail server machine. The MIME system is designed to allow various different information formats to be interpreted and sent via e-mail. Attack points exist when data are converted to MIME compatible format and back.
+ Attack Prerequisites

    The target system uses a mail server.

    Mail server vendor has not released a patch for the MIME conversion routine, the patch itself has a security hole or does not fix the original problem, or the patch has not been applied to the user&apos;s system.

+ Solutions and Mitigations

Stay up to date with third party vendor patches

Disable the 7 to 8 bit conversion. This can be done by removing the F=9 flag from all Mailer specifications in the sendmail.cf file.

For example, a sendmail.cf file with these changes applied should look similar to (depending on your system and configuration):
Mlocal, P=/usr/libexec/mail.local, F=lsDFMAw5:/|@qrmn, S=10/30, R=20/40,
T=DNS/RFC822/X-Unix,
A=mail -d $u
Mprog, P=/bin/sh, F=lsDFMoqeu, S=10/30, R=20/40,
D=$z:/,
T=X-Unix,
A=sh -c $u

This can be achieved for the &quot;Mlocal&quot; and &quot;Mprog&quot; Mailers by modifying the &quot;.mc&quot; file to include the following lines:
define(`LOCAL_MAILER_FLAGS&apos;,
ifdef(`LOCAL_MAILER_FLAGS&apos;,
`translit(LOCAL_MAILER_FLAGS, `9&apos;)&apos;,
`rmn&apos;))
define(`LOCAL_SHELL_FLAGS&apos;,
ifdef(`LOCAL_SHELL_FLAGS&apos;,
`translit(LOCAL_SHELL_FLAGS, `9&apos;)&apos;,
`eu&apos;))

and then rebuilding the sendmail.cf file using m4(1).

From &quot;Exploiting Software&quot;, please see reference below.

Use the sendmail restricted shell program (smrsh)

Use mail.local</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-420-TargetInfluenceViaPerceptionOfScarcity">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-416-TargetInfluenceViaSocialEngineering"/>
		<rdfs:label>Target Influence Via Perception Of Scarcity</rdfs:label>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-421-TargetInfluenceViaPerceptionOfAuthority">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-416-TargetInfluenceViaSocialEngineering"/>
		<rdfs:label>Target Influence Via Perception Of Authority</rdfs:label>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-422-TargetInfluenceViaPerceptionOfCommitmentAndConsistency">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-416-TargetInfluenceViaSocialEngineering"/>
		<rdfs:label>Target Influence Via Perception Of Commitment And Consistency</rdfs:label>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-423-TargetInfluenceViaPerceptionOfLiking">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-416-TargetInfluenceViaSocialEngineering"/>
		<rdfs:label>Target Influence Via Perception Of Liking</rdfs:label>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-424-TargetInfluenceViaPerceptionOfConsensusOrSocialProof">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-416-TargetInfluenceViaSocialEngineering"/>
		<rdfs:label>Target Influence Via Perception Of Consensus Or Social Proof</rdfs:label>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-425-TargetInfluenceViaFraming">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-416-TargetInfluenceViaSocialEngineering"/>
		<rdfs:label>Target Influence Via Framing</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker uses framing techniques to contextualize a conversation so that the target is more likely to be influenced by the attackers&apos; point of view. Framing is information and experiences in life that alter the way we react to decisions we must make. This type of persuasive technique exploits the way people are conditioned to perceive data and its significance, while avoiding negative or avoidance responses from the target. Rather than a specific technique framing is a methodology of conversation that slowly encourages the target to adopt to the attackers&apos; perspective. One technique of framing is to avoid the use of the word &quot;No&quot; and to contextualize responses in a manner that is positive. When performed skillfully the target is much more likely to volunteer information or perform actions favorable to the attacker.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-426-TargetInfluenceViaManipulationOfIncentives">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-416-TargetInfluenceViaSocialEngineering"/>
		<rdfs:label>Target Influence Via Manipulation Of Incentives</rdfs:label>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-427-TargetInfluenceViaPsychologicalPrinciples">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-416-TargetInfluenceViaSocialEngineering"/>
		<rdfs:label>Target Influence Via Psychological Principles</rdfs:label>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-428-TargetInfluenceViaModesOfThinking">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-427-TargetInfluenceViaPsychologicalPrinciples"/>
		<rdfs:label>Target Influence Via Modes Of Thinking</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker attunes their communication to the language and thought patterns of the target thereby weakening barriers or reluctance to communication. This method is a way of building rapport with a target by matching their speech patterns and the primary ways or dominant senses with which they make abstractions. This technique can be used to make the target more receptive to sharing information because the attacker has adapted their communication forms to match those of the target. When skillfully employed the target is likely to be unaware that they are being manipulated.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-429-TargetInfluenceViaEyeCues">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-427-TargetInfluenceViaPsychologicalPrinciples"/>
		<rdfs:label>Target Influence Via Eye Cues</rdfs:label>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-43-ExploitingMultipleInputInterpretationLayers">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-267-LeverageAlternateEncoding"/>
		<rdfs:label>Exploiting Multiple Input Interpretation Layers</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker supplies the target software with input data that contains sequences of special characters designed to bypass input validation logic. This exploit relies on the target making multiples passes over the input data and processing a &quot;layer&quot; of special characters with each pass. In this manner, the attacker can disguise input that would otherwise be rejected as invalid by concealing it with layers of special/escape characters that are stripped off by subsequent processing steps.

The goal is to first discover cases where the input validation layer executes before one or more parsing layers. That is, user input may go through the following logic in an application:
&lt;parser1&gt;
--&gt; &lt;input validator&gt; --&gt;
&lt;parser2&gt;

In such cases, the attacker will need to provide input that will pass through the input validator, but after passing through parser2, will be converted into something that the input validator was supposed to stop.
+ Attack Prerequisites

    User input is used to construct a command to be executed on the target system or as part of the file name.

    Multiple parser passes are performed on the data supplied by the user.

+ Solutions and Mitigations

An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.

Make sure to perform input validation on canonicalized data (i.e. data that is data in its most standard form). This will help avoid tricky encodings getting past the filters.

Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-430-TargetInfluenceViaMicroExpressions">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-427-TargetInfluenceViaPsychologicalPrinciples"/>
		<rdfs:label>Target Influence Via Micro Expressions</rdfs:label>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-431-TargetInfluenceViaNeuroLinguisticProgrammingNLP">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-430-TargetInfluenceViaMicroExpressions"/>
		<rdfs:label>Target Influence Via Neuro Linguistic Programming NLP</rdfs:label>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-432-TargetInfluenceViaVoiceInNLP">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-431-TargetInfluenceViaNeuroLinguisticProgrammingNLP"/>
		<rdfs:label>Target Influence Via Voice In NLP</rdfs:label>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-433-TargetInfluenceViaTheHumanBufferOverflow">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-427-TargetInfluenceViaPsychologicalPrinciples"/>
		<rdfs:label>Target Influence Via The Human Buffer Overflow</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker utilizes a technique to insinuate commands to the subconscious mind of the target via communication patterns. The human buffer overflow methodology does not rely on over-stimulating the mind of the target, but rather embedding messages within communication that the mind of the listener assembles at a subconscious level. The human buffer-overflow method is similar to subconscious programming to the extent that messages are embedded within the message. The fundamental difference is that embedded messages have a complete semantic quality, rather than mere imagery, and the mind of the target tends to key off of particular dominant patterns. The remaining information, carefully structured, speaks directly to the subconscious with a subtle, indirect, command. The effect is to produce a pattern of thinking that the attacker has predetermined but is buried within the message and not overtly stated. Structuring a human &quot;buffer overflow&quot; requires precise attention to detail and the use of information in a manner that distracts the conscious mind from the message the subconscious is receiving.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-434-TargetInfluenceViaInterviewAndInterrogation">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-427-TargetInfluenceViaPsychologicalPrinciples"/>
		<rdfs:label>Target Influence Via Interview And Interrogation</rdfs:label>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-435-TargetInfluenceViaInstantRapport">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-427-TargetInfluenceViaPsychologicalPrinciples"/>
		<rdfs:label>Target Influence Via Instant Rapport</rdfs:label>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-438-ModificationDuringManufacture">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Modification During Manufacture</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker modifies a technology, product, or component during a stage in its manufacture for the purpose of carrying out an attack against some entity involved in the supply chain lifecycle. There are an almost limitless number of ways an attacker can modify a technology when they are involved in its manufacture, as the attacker has potential inroads to the software composition, hardware design and assembly, firmware, or basic design mechanics. Additionally, manufacturing of key components is often outsourced with the final product assembled by the primary manufacturer. The greatest risk, however, is deliberate manipulation of design specifications to produce malicious hardware or devices. There are billions of transistors in a single integrated circuit and studies have shown that fewer than 10 transistors are required to create malicious functionality.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-439-ManipulationDuringDistribution">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Manipulation During Distribution</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker undermines the integrity of a product, software, or technology at some stage of the distribution channel. The core threat of modification or manipulation during distribution arise from the many stages of distribution, as a product may traverse multiple suppliers and integrators as the final asset is delivered. Components and services provided from a manufacturer to a supplier may be tampered with during integration or packaging.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-44-OverflowBinaryResourceFile">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-100-OverflowBuffers"/>
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-23-FileContentInjection"/>
		<rdfs:label>Overflow Binary Resource File</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attack of this type exploits a buffer overflow vulnerability in the handling of binary resources. Binary resources may include music files like MP3, image files like JPEG files, and any other binary file. These attacks may pass unnoticed to the client machine through normal usage of files, such as a browser loading a seemingly innocent JPEG file. This can allow the attacker access to the execution stack and execute arbitrary code in the target process. This attack pattern is a variant of standard buffer overflow attacks using an unexpected vector (binary files) to wrap its attack and open up a new attack vector. The attacker is required to either directly serve the binary content to the victim, or place it in a locale like a MP3 sharing application, for the victim to download. The attacker then is notified upon the download or otherwise locates the vulnerability opened up by the buffer overflow.
+ Attack Prerequisites

    Target software processes binary resource files.

    Target software contains a buffer overflow vulnerability reachable through input from a user-controllable binary resource file.

+ Solutions and Mitigations

Perform appropriate bounds checking on all buffers.

Design: Enforce principle of least privilege

Design: Static code analysis

Implementation: Execute program in less trusted process space environment, do not allow lower integrity processes to write to higher integrity processes

Implementation: Keep software patched to ensure that known vulnerabilities are not available for attackers to target on host.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-440-HardwareIntegrityAttack">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Hardware Integrity Attack</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker changes a technology, product, component, or sub-component during its deployed use at the victim location for the purpose of carrying out an attack.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-441-MaliciousLogicInsertion">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Malicious Logic Insertion</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker installs or adds malicious logic into a seemingly benign component of the system. This logic is often hidden from the user of the system and works behind the scenes to achieve negative impacts.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-442-MaliciousLogicInsertedIntoToProductSoftware">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-441-MaliciousLogicInsertion"/>
		<rdfs:label>Malicious Logic Inserted Into To Product Software</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker inserts malicious logic into software, typically in the form of a traditional virus or trojan backdoor.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-443-MaliciousLogicInsertedIntoProductSoftwareByAuthorizedDeveloper">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-444-DevelopmentAlteration"/>
		<rdfs:label>Malicious Logic Inserted Into Product Software By Authorized Developer</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker uses their privileged position within an authorized software development organization to inject malicious logic into a codebase or product. Supply chain attacks from approved or trusted developers are extremely difficult to detect as it is generally assumed the quality control and internal security measures of these organizations conform to best practices. In some cases the malicious logic is intentional, embedded by a disgruntled employee, programmer, or individual with an otherwise hidden agenda. In other cases, the integrity of the product is compromised by accident (e.g. by lapse in the internal security of the organization that results in a product becoming contaminated). In other cases, the developer embeds a backdoor into a product to serve some purpose, such as product support, but discovery of the backdoor results in its malicious use by adversaries.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-444-DevelopmentAlteration">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-438-ModificationDuringManufacture"/>
		<rdfs:label>Development Alteration</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker modifies a technology, product, or component during its development. The product is then delivered to the user where a negative impact is achieved.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-445-MaliciousLogicInsertionIntoProductSoftwareViaConfigurationManagementManipulation">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-444-DevelopmentAlteration"/>
		<rdfs:label>Malicious Logic Insertion Into Product Software Via Configuration Management Manipulation</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker exploits a configuration management system so that malicious logic is inserted into a software products build, update or deployed environment. If an attacker can control the elements included in a product&apos;s configuration management for build they can potentially replace, modify or insert code files containing malicious logic. If an attacker can control elements of a product&apos;s ongoing operational configuration management baseline they can potentially force clients receiving updates from the system to install insecure software when receiving updates from the server. Configuration management servers operate on the basis of a client pool, instructing each client on which software to install. In some cases the configuration management server will automate the software installation process. A malicious insider or an attacker who has compromised the server can alter the software baseline that clients must install, allowing the attacker to compromise a large number of satellite machines using the configuration management system. If an attacker can control elements of a product&apos;s configuration management for its deployed environment they can potentially alter fundamental security properties of the system based on assumptions that secure configurations are in place.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-446-MaliciousLogicInsertionIntoProductSoftwareViaInclusionOf3rdPartyComponentDependency">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-444-DevelopmentAlteration"/>
		<rdfs:label>Malicious Logic Insertion Into Product Software Via Inclusion Of 3rd Party Component Dependency</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker conducts supply chain attacks by the inclusion of insecure 3rd party components into a technology, product, or code-base, possibly packaging a malicious driver or component along with the product before shipping it to the consumer or acquirer. The result is a window of opportunity for exploiting the product or software until the insecure component is discovered. This supply chain threat can result in the installation of software that introduces widespread security vulnerabilities within an organization. One example could be the inclusion of an exploitable DLL (Dynamic Link Library) included within an antivirus technology. Because software often depends upon a large number of interdependent libraries and components to be present, security holes can be introduced merely by installing COTS software that comes pre-packaged with the components required for it to operate.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-447-DesignAlteration">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-438-ModificationDuringManufacture"/>
		<rdfs:label>Design Alteration</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker modifies the design of a technology, product, or component. The product is then delivered to the user where a negative impact is achieved.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-448-MalwareInfectionIntoProductSoftware">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-442-MaliciousLogicInsertedIntoToProductSoftware"/>
		<rdfs:label>Malware Infection Into Product Software</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker tampers with the code of a product and injects malicious logic into the device in order to infect any machine which interfaces with the product, and possibly steal private data or eavesdrop. With the proliferation of mass digital storage and inexpensive multimedia devices, Bluetooth and 802.11 support, new attack vectors for spreading malware are emerging for things we once thought of as innocuous greeting cards, picture frames, or digital projectors becomes important vectors of attack.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-45-BufferOverflowViaSymbolicLinks">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-100-OverflowBuffers"/>
		<rdfs:label>Buffer Overflow Via Symbolic Links</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

This type of attack leverages the use of symbolic links to cause buffer overflows. An attacker can try to create or manipulate a symbolic link file such that its contents result in out of bounds data. When the target software processes the symbolic link file, it could potentially overflow internal buffers with insufficient bounds checking.
+ Attack Prerequisites

    The attacker can create symbolic link on the target host.

    The target host does not perform correct boundary checking while consuming data from a resources.

+ Solutions and Mitigations

Pay attention to the fact that the resource you read from can be a replaced by a Symbolic link. You can do a Symlink check before reading the file and decide that this is not a legitimate way of accessing the resource.

Because Symlink can be modified by an attacker, make sure that the ones you read are located in protected directories.

Pay attention to the resource pointed to by your symlink links (See attack pattern named &quot;Forced Symlink race&quot;), they can be replaced by malicious resources.

Always check the size of the input data before copying to a buffer.

Use a language or compiler that performs automatic bounds checking.

Use an abstraction library to abstract away risky APIs. Not a complete solution.

Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.

Use OS-level preventative functionality. Not a complete solution.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-452-MaliciousLogicInsertionIntoProductHardware">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-441-MaliciousLogicInsertion"/>
		<rdfs:label>Malicious Logic Insertion Into Product Hardware</rdfs:label>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-456-MaliciousLogicInsertionIntoProductMemory">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-441-MaliciousLogicInsertion"/>
		<rdfs:label>Malicious Logic Insertion Into Product Memory</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker inserts malicious logic into memory enabling them to achieve a negative impact</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-457-USBMemoryAttacks">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-456-MaliciousLogicInsertionIntoProductMemory"/>
		<rdfs:label>USB Memory Attacks</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker loads malicious code onto a USB memory stick in order to infect any system which the device is plugged in to. USB drives present a significant security risk for business and government agencies. Given the ability to integrate wireless functionality into a USB stick, it is possible to design malware that not only steals confidential data, but sniffs the network, or monitor keystrokes, and then exfiltrates the stolen data off-site via a Wireless connection. Also, viruses can be transmitted via the USB interface without the specific use of a memory stick. The attacks from USB devices are often of such sophistication that experts conclude they are not the work of single individuals, but suggest state sponsorship.
+ Attack Prerequisites

    Some level of physical access to the device being attacked.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-458-FlashMemoryAttacks">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-456-MaliciousLogicInsertionIntoProductMemory"/>
		<rdfs:label>Flash Memory Attacks</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker inserts malicious logic into a product or technology via flashing the on-board memory with a code-base that contains malicious logic. Various attacks exist against the integrity of flash memory, the most direct being rootkits coded into the BIOS or chipset of a device. Such attacks are very difficult to detect because the malicious code resides outside the filesystem or RAM, and in the underlying byte-code that drives the processor. Many devices, such as the recent attacks against digital picture frames, contain only a microprocessor and a small amount of solid-state memory, rendering these devices ideal for &quot;flash&quot; based malware or malicious logic. One of the pernicious characteristics of flash memory based attacks is that the malicious code can survive even a total format of the hard-drive and reinstallation of the host operating system. Virtually any device which can be integrated into a computer system is susceptible to these attacks. Additionally, any peripheral device which interfaces with the computer bus could extract or sniff confidential data, even on systems employing full-disk encryption. Trojan code placed into a video card&apos;s chipset would continue to perform its function irrespective of the host operating system, and would be invisible to all known antivirus. The threats extend to consumer products such as camcorders, digital cameras, or any consumer electronic device with an embedded microcontroller.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-459-CreatingARogueCertificateAuthorityCertificate">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-473-SignatureSpoof"/>
		<rdfs:label>Creating A Rogue Certificate Authority Certificate</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker exploits a weakness in the MD5 hash algorithm (weak collision resistance) to generate a certificate signing request (CSR) that contains collision blocks in the &quot;to be signed&quot; part. The attacker specially crafts two different, but valid X.509 certificates that when hashed with the MD5 algorithm would yield the same value. The attacker then sends the CSR for one of the certificates to the Certification Authority which uses the MD5 hashing algorithm. That request is completely valid and the Certificate Authority issues an X.509 certificate to the attacker which is signed with its private key. An attacker then takes that signed blob and inserts it into another X.509 certificate that the attacker generated. Due to the MD5 collision, both certificates, though different, hash to the same value and so the signed blob works just as well in the second certificate.

The net effect is that the attackers&apos; second X.509 certificate, which the Certification Authority has never seen, is now signed and validated by that Certification Authority. To make the attack more interesting, the second certificate could be not just a regular certificate, but rather itself a signing certificate. Thus the attacker is able to start their own Certification Authority that is anchored in its root of trust in the legitimate Certification Authority that has signed the attackers&apos; first X.509 certificate. If the original Certificate Authority was accepted by default by browsers, so will now the Certificate Authority set up by the attacker and of course any certificates that it signs. So the attacker is now able to generate any SSL certificates to impersonate any web server, and the user&apos;s browser will not issue any warning to the victim. This can be used to compromise HTTPS communications and other types of systems where PKI and X.509 certificates may be used (e.g., VPN, IPSec) .
+ Attack Prerequisites

    Certification Authority is using the MD5 hash function to generate the certificate hash to be signed

+ Solutions and Mitigations

Certification Authorities need to stop using the weak collision prone MD5 hashing algorithm to hash the certificates that they are about to sign. Instead they should be using stronger hashing functions such as SHA-256 or SHA-512.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-46-OverflowVariablesAndTags">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-100-OverflowBuffers"/>
		<rdfs:label>Overflow Variables And Tags</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

This type of attack leverages the use of tags or variables from a formatted configuration data to cause buffer overflow. The attacker crafts a malicious HTML page or configuration file that includes oversized strings, thus causing an overflow.
+ Attack Prerequisites

    The target program consumes user-controllable data in the form of tags or variables.

    The target program does not perform sufficient boundary checking.

+ Solutions and Mitigations

Use a language or compiler that performs automatic bounds checking.

Use an abstraction library to abstract away risky APIs. Not a complete solution.

Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.

Use OS-level preventative functionality. Not a complete solution.

Do not trust input data from user. Validate all user input.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-460-HTTPParameterPollutionHPP">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-15-CommandDelimiters"/>
		<rdfs:label>HTTP Parameter Pollution HPP</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker overrides or adds HTTP GET/POST parameters by injecting query string delimiters. Via HPP it may be possible to override existing hardcoded HTTP parameters, modify the application behaviors, access and, potentially exploit, uncontrollable variables, and bypass input validation checkpoints and WAF rules.
+ Attack Prerequisites

    HTTP protocol is used with some GET/POST parameters passed

+ Solutions and Mitigations

Configuration: If using a Web Application Firewall (WAF), filters should be carefully configured to detect abnormal HTTP requests

Design: Perform URL encoding

Implementation: Use strict regular expressions in URL rewriting

Implementation: Beware of multiple occurrences of a parameter in a Query String</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-461-WebServicesAPISignatureForgeryLeveragingHashFunctionExtensionWeakness">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-115-AuthenticationBypass"/>
		<rdfs:label>Web Services API Signature Forgery Leveraging Hash Function Extension Weakness</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

When web services require callees to authenticate, they sometimes issue a token / secret to the caller that the caller is to use to sign their web service calls. In one such scheme the caller when constructing a request would concatenate all of the parameters passed to the web service with the provided authentication token and then generate a hash of the concatenated string (e.g., MD5, SHA1, etc.). That hash then forms the signature that is passed to the web service which is used on the server side to verify the origin authenticity and integrity of the message. There is a practical attack against an authentication scheme of this nature that makes use of the hash function extension / padding weakness. Leveraging this weakness, an attacker, who does not know the secret token, is able to modify the parameters passed to the web service by generating their own call and still generate a legitimate signature hash. For instance, consider the message to be passed to the web service is M (this message includes the parameters passed to the web service concatenated with the secret token / key bytes). The message M is hashed and that hash is passed to the web service and is used for authentication. The attacker does not know M, but can see Hash (M) and Length (M). The attacker can then compute Hash (M || Padding (M) II M&apos;) for any M&apos;. The attacker does not know the entire message M, specifically the attacker does not know the secret bytes, but that does not matter. The attacker is still able to sign their own message M&apos; and make the called web service verify the integrity of the message without an error. Because of the iterative design of the hash function, it is possible, from only the hash of a message and its length, to compute the hash of longer messages that start with the initial message and include the padding required for the initial message to reach a multiple of 512 bits. It is important to note that the attack not limited to MD5 and will work just as well with another hash function like SHA1.
+ Attack Prerequisites

    Web services check the signature of the API calls

    Authentication tokens / secrets are shared between the server and the legitimate client

    The API call signature is generated by concatenating the parameter list with the shared secret and hashing the result.

    An iterative hash function like MD5 and SHA1 is used.

    An attacker is able to intercept or in some other way gain access to the information passed between the legitimate client and the server in order to retrieve the hash value and length of the original message.

    The communication channel between the client and the server is not secured via channel security such as TLS

+ Solutions and Mitigations

Design: Use a secure message authentication code (MAC) function such as an HMAC-SHA1</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-462-CrossDomainSearchTiming">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-54-QuerySystemForInformation"/>
		<rdfs:label>Cross Domain Search Timing</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker initiates cross domain HTTP / GET requests and times the server responses. The timing of these responses may leak important information on what is happening on the server. Browser&apos;s same origin policy prevents the attacker from directly reading the server responses (in the absence of any other weaknesses), but does not prevent the attacker from timing the responses to requests that the attacker issued cross domain.

For GET requests an attacker could for instance leverage the &quot;img&quot; tag in conjunction with &quot;onload() / onerror()&quot; javascript events. For the POST requests, an attacker could leverage the &quot;iframe&quot; element and leverage the &quot;onload()&quot; event. There is nothing in the current browser security model that prevents an attacker to use these methods to time responses to the attackers&apos; cross domain requests.

The timing for these responses leaks information. For instance, if a victim has an active session with their online e-mail account, an attacker could issue search requests in the victim&apos;s mailbox. While the attacker is not able to view the responses, based on the timings of the responses, the attacker could ask yes / no questions as to the content of victim&apos;s e-mails, who the victim e-mailed, when, etc. This is but one example; There are other scenarios where an attacker could infer potentially sensitive information from cross domain requests by timing the responses while asking the right questions that leak information.
+ Attack Prerequisites

    Ability to issue GET / POST requests cross domain

    Java Script is enabled in the victim&apos;s browser

    The victim has an active session with the site from which the attacker would like to receive information

    The victim&apos;s site does not protect search functionality with cross site request forgery (CSRF) protection

+ Solutions and Mitigations

Design: The victim&apos;s site could protect all potentially sensitive functionality (e.g. search functions) with cross site request forgery (CSRF) protection and not perform any work on behalf of forged requests

Design: The browser&apos;s security model could be fixed to not leak timing information for cross domain requests</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-463-PaddingOracleCryptoAttack">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-97-Cryptanalysis"/>
		<rdfs:label>Padding Oracle Crypto Attack</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker is able to efficiently decrypt data without knowing the decryption key if a target system leaks data on whether or not a padding error happened while decrypting the ciphertext. A target system that leaks this type of information becomes the padding oracle and an attacker is able to make use of that oracle to efficiently decrypt data without knowing the decryption key by issuing on average 128*b calls to the padding oracle (where b is the number of bytes in the ciphertext block). In addition to performing decryption, an attacker is also able to produce valid ciphertexts (i.e., perform encryption) by using the padding oracle, all without knowing the encryption key.

Any cryptosystem can be vulnerable to padding oracle attacks if the encrypted messages are not authenticated to ensure their validity prior to decryption, and then the information about padding error is leaked to the attacker. This attack technique may be used, for instance, to break CAPTCHA systems or decrypt/modify state information stored in client side objects (e.g., hidden fields or cookies).

This attack technique is a side-channel attack on the cryptosystem that uses a data leak from an improperly implemented decryption routine to completely subvert the cryptosystem. The one bit of information that tells the attacker whether a padding error during decryption has occurred, in whatever form it comes, is sufficient for the attacker to break the cryptosystem. That bit of information can come in a form of an explicit error message about a padding error, a returned blank page, or even the server taking longer to respond (a timing attack).

This attack can be launched cross domain where an attacker is able to use cross-domain information leaks to get the bits of information from the padding oracle from a target system / service with which the victim is communicating. To do so an attacker sends a request containing ciphertext to the target system. Due to the browser&apos;s same origin policy, the attacker is not able to see the response directly, but can use cross-domain information leak techniques to still get the information needed (i.e., information on whether or not a padding error has occurred). For instance, this can be done using &quot;img&quot; tag plus the onerror()/onload() events. The attacker&apos;s JavaScript can make web browsers to load an image on the target site, and know if the image is loaded or not. This is 1-bit information needed for the padding oracle attack to work: if the image is loaded, then it is valid padding, otherwise it is not.
+ Attack Prerequisites

    The decryption routine does not properly authenticate the message / does not verify its integrity prior to performing the decryption operation

    The target system leaks data (in some way) on whether a padding error has occurred when attempting to decrypt the ciphertext.

    The padding oracle remains available for enough time / for as many requests as needed for the attacker to decrypt the ciphertext.

+ Solutions and Mitigations

Design: Use a message authentication code (MAC) or another mechanism to perform verification of message authenticity / integrity prior to decryption

Implementation: Do not leak information back to the user as to any cryptography (e.g., padding) encountered during decryption.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-464-Evercookie">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-554-FunctionalityBypass"/>
		<rdfs:label>Evercookie</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker creates a very persistent cookie that stays present even after the user thinks it has been removed. The cookie is stored on the victim&apos;s machine in over ten places to include: Standard HTTP Cookies, Local Shared Objects (Flash Cookies), Silverlight Isolated Storage, Storing cookies in RGB values of auto-generated, force-cached, PNGs using HTML5 Canvas tag to read pixels (cookies) back out, Storing cookies in Web History, Storing cookies in HTTP ETags, Storing cookies in Web cache, window.name caching, Internet Explorer userData storage, HTML5 Session Storage, HTML5 Local Storage, HTML5 Global Storage, HTML5 Database Storage via SQLite, among others.

When the victim clears the cookie cache via traditional means inside the browser, that operation removes the cookie from certain places but not others. The malicious code then replicates the cookie from all of the places where it was not deleted to all of the possible storage locations once again. So the victim again has the cookie in all of the original storage locations. In other words, failure to delete the cookie in even one location will result in the cookie&apos;s resurrection everywhere. The evercookie will also persist across different browsers because certain stores (e.g., Local Shared Objects) are shared between different browsers.
+ Attack Prerequisites

    The victim&apos;s browser is not configured to reject all cookies

    The victim visits a website that serves the attackers&apos; evercookie

+ Solutions and Mitigations

Design: Browser&apos;s design needs to be changed to limit where cookies can be stored on the client side and provide an option to clear these cookies in all places, as well as another option to stop these cookies from being written in the first place.

Design: Safari browser&apos;s private browsing mode is currently effective against evercookies.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-465-TransparentProxyAbuse">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-554-FunctionalityBypass"/>
		<rdfs:label>Transparent Proxy Abuse</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

A transparent proxy serves as an intermediate between the client and the internet at large. It intercepts all requests originating from the client and forwards them to the correct location. The proxy also intercepts all responses to the client and forwards these to the client. All of this is done in a manner transparent to the client. Transparent proxies are often used by enterprises and ISPs.

For requests originating at the client transparent proxies need to figure out the final destination of the client&apos;s data packet. Two ways are available to do that: either by looking at the layer three (network) IP address or by examining layer seven (application) HTTP header destination.

A browser has same origin policy that typically prevents scripts coming from one domain initiating requests to other websites from which they did not come. To circumvent that, however, malicious Flash or an Applet that is executing in the user&apos;s browser can attempt to create a cross-domain socket connection from the client to the remote domain. The transparent proxy will examine the HTTP header of the request and direct it to the remote site thereby partially bypassing the browser&apos;s same origin policy. This can happen if the transparent proxy uses the HTTP host header information for addressing rather than the IP address information at the network layer. This attack allows malicious scripts inside the victim&apos;s browser to issue cross-domain requests to any hosts accessible to the transparent proxy.
+ Attack Prerequisites

    Transparent proxy is used

    Vulnerable configuration of network topology involving the transparent proxy (e.g., no NAT happening between the client and the proxy)

    Execution of malicious Flash or Applet in the victim&apos;s browser

+ Solutions and Mitigations

Design: Ensure that the transparent proxy uses an actual network layer IP address for routing requests. On the transparent proxy, disable the use of routing based on address information in the HTTP host header.

Configuration: Disable in the browser the execution of Java Script, Flash, SilverLight, etc.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-466-LeveragingActiveManInTheMiddleAttacksToBypassSameOriginPolicy">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-94-ManInTheMiddleAttack"/>
		<rdfs:label>Leveraging Active Man In The Middle Attacks To Bypass Same Origin Policy</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker leverages a man in the middle attack in order to bypass the same origin policy protection in the victim&apos;s browser. This active man in the middle attack could be launched, for instance, when the victim is connected to a public WIFI hot spot. An attacker is able to intercept requests and responses between the victim&apos;s browser and some non-sensitive website that does not use TLS. For instance, the victim may be checking flight or weather information.

When an attacker intercepts a response bound to the victim, an attacker adds an iFrame (which is possibly invisible) to the response referencing some domain with sensitive functionality and forwards the response to the victim. The victim&apos;s browser than automatically initiates an unauthorized request to the site with sensitive functionality. The same origin policy would prevent making these requests to a site other than the one from which the Java Script came, but the attacker once again uses active man in the middle to intercept these automatic requests and redirect them to the domain / service with sensitive functionality. Any persistent cookies that the victim has in his or her browser would be used for these unauthorized requests. The attacker thus actively directs the victim to a site with sensitive functionality.

When the site with sensitive functionality responds back to the victim&apos;s request, an active man in the middle attacker intercepts these responses, injects his or her own malicious Java Script into these responses, and forwards to the victim&apos;s browser. In the victim&apos;s browser, that Java Script executes under the restrictions of the site with sensitive functionality and can essentially be used to continue to interact with the sensitive site. So an attacker can execute scripts within the victim&apos;s browser on any domains the attacker desires.

The attacker is able to use this technique to steal cookies from the victim&apos;s browser for whatever site the attacker wants. This applies to both persistent cookies and HTTP only cookies (unlike traditional XSS attacks).

An attacker is also able to use this technique to steal authentication credentials for sites that only encrypt the login form, but do not require a secure channel for the initial request to get to the page with the login form. Further the attacker is also able to steal any autocompletion information. This attack pattern can also be used to enable session fixation and cache poisoning attacks. Additional attacks can be enabled as well.
+ Attack Prerequisites

    The victim and the attacker are both in an environment where an active man in the middle attack is possible (e.g., public WIFI hot spot)

    The victim visits at least one website that does not use TLS / SSL

+ Solutions and Mitigations

Design: Tunnel communications through a secure proxy

Design: Trust level separation for privileged / non privileged interactions (e.g., two different browsers, two different users, two different operating systems, two different virtual machines)</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-467-CrossSiteIdentification">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-62-CrossSiteRequestForgery"/>
		<rdfs:label>Cross Site Identification</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker harvests identifying information about a victim via an active session that the victim&apos;s browser has with a social networking site. A victim may have the social networking site open in one tab or perhaps is simply using the &quot;remember me&quot; feature to keep his or her session with the social networking site active. An attacker induces a payload to execute in the victim&apos;s browser that transparently to the victim initiates a request to the social networking site (e.g., via available social network site APIs) to retrieve identifying information about a victim. While some of this information may be public, the attacker is able to harvest this information in context and may use it for further attacks on the user (e.g., spear phishing).

In one example of an attack, an attacker may post a malicious posting that contains an image with an embedded link. The link actually requests identifying information from the social networking site. A victim who views the malicious posting in his or her browser will have sent identifying information to the attacker, as long as the victim had an active session with the social networking site. There are many other ways in which the attacker may get the payload to execute in the victim&apos;s browser mainly by finding a way to hide it in some reputable site that the victim visits. The attacker could also send the link to the victim in an e-mail and trick the victim into clicking on the link.

This attack is basically a cross site request forgery attack with two main differences. First, there is no action that is performed on behalf of the user aside from harvesting information. So standard CSRF protection may not work in this situation. Second, what is important in this attack pattern is the nature of the data being harvested, which is identifying information that can be obtained and used in context. This real time harvesting of identifying information can be used as a prelude for launching real time targeted social engineering attacks on the victim.
+ Attack Prerequisites

    The victim has an active session with the social networking site.

+ Solutions and Mitigations

Usage: Users should always explicitly log out from the social networking sites when done using them.

Usage: Users should not open other tabs in the browser when using a social networking site.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-468-GenericCrossBrowserCrossDomainTheft">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-242-CodeInjection"/>
		<rdfs:label>Generic Cross Browser Cross Domain Theft</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker makes use of Cascading Style Sheets (CSS) injection to steal data cross domain from the victim&apos;s browser. The attack works by abusing the standards relating to loading of CSS: 1. Send cookies on any load of CSS (including cross-domain) 2. When parsing returned CSS ignore all data that does not make sense before a valid CSS descriptor is found by the CSS parser

By having control of some text in the victim&apos;s domain, the attacker is able to inject a seemingly valid CSS string. It does not matter if this CSS string is preceded by other data. The CSS parser will still locate the CSS string.

If the attacker is able to control two injection points, one before the cross domain data that the attacker is interested in receiving and the other one after, the attacker can use this attack to steal all of the data in between these two CSS injection points when referencing the injected CSS while performing rendering on the site that the attacker controls. When rendering, the CSS parser will detect the valid CSS string to parse and ignore the data that &quot;does not make sense&quot;. That data will simply be rendered. That data is in fact the data that the attacker just stole cross domain.

The stolen data may contain sensitive information, such CSRF protection tokens.
+ Attack Prerequisites

    No new lines can be present in the injected CSS string

    Proper HTML or URL escaping of the &quot; and &apos; characters is not present

    The attacker has control of two injection points: pre-string and post-string

+ Solutions and Mitigations

Design: Prior to performing CSS parsing, require the CSS to start with well-formed CSS when it is a cross-domain load and the MIME type is broken. This is a browser level fix.

Implementation: Perform proper HTML encoding and URL escaping</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-469-HTTPDoS">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-227-SustainedClientEngagement"/>
		<rdfs:label>HTTP DoS</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker performs flooding at the HTTP level to bring down only a particular web application rather than anything listening on a TCP/IP connection. This denial of service attack requires substantially fewer packets to be sent which makes DoS harder to detect. This is an equivalent of SYN flood in HTTP.

The idea is to keep the HTTP session alive indefinitely and then repeat that hundreds of times. This attack targets resource depletion weaknesses in web server software. The web server will wait to attacker&apos;s responses on the initiated HTTP sessions while the connection threads are being exhausted.
+ Attack Prerequisites

    HTTP protocol is used

    Web server used is vulnerable to denial of service via HTTP flooding

+ Solutions and Mitigations

Configuration: Configure web server software to limit the waiting period on opened HTTP sessions

Design: Use load balancing mechanisms</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-47-BufferOverflowViaParameterExpansion">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-100-OverflowBuffers"/>
		<rdfs:label>Buffer Overflow Via Parameter Expansion</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

In this attack, the target software is given input that the attacker knows will be modified and expanded in size during processing. This attack relies on the target software failing to anticipate that the expanded data may exceed some internal limit, thereby creating a buffer overflow.
+ Attack Prerequisites

    The program expands one of the parameters passed to a function with input controlled by the user, but a later function making use of the expanded parameter erroneously considers the original, not the expanded size of the parameter.

    The expanded parameter is used in the context where buffer overflow may become possible due to the incorrect understanding of the parameter size (i.e. thinking that it is smaller than it really is).

+ Solutions and Mitigations

Ensure that when parameter expansion happens in the code that the assumptions used to determine the resulting size of the parameter are accurate and that the new size of the parameter is visible to the whole system</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-470-ExpandingControlOverTheOperatingSystemFromTheDatabase">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-66-SQLInjection"/>
		<rdfs:label>Expanding Control Over The Operating System From The Database</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker is able to leverage access gained to the database to read / write data to the file system, compromise the operating system, create a tunnel for accessing the host machine, and use this access to potentially attack other machines on the same network as the database machine.

Traditionally SQL injections attacks are viewed as a way to gain unauthorized read access to the data stored in the database, modify the data in the database, delete the data, etc. However, almost every data base management system (DBMS) system includes facilities that if compromised allow an attacker complete access to the file system, operating system, and full access to the host running the database. The attacker can then use this privileged access to launch subsequent attacks.

These facilities include dropping into a command shell, creating user defined functions that can call system level libraries present on the host machine, stored procedures, etc.
+ Attack Prerequisites

    A vulnerable DBMS is used

    A SQL injection exists that gives an attacker access to the database or an attacker has access to the DBMS via other means

+ Solutions and Mitigations

Design: Follow the defensive programming practices needed to protect an application accessing the database from SQL injection

Configuration: Ensure that the DBMS is patched with the latest security patches

Design: Ensure that the DBMS login used by the application has the lowest possible level of privileges in the DBMS

Design: Ensure that DBMS runs with the lowest possible level of privileges on the host machine and that it runs as a separate user

Usage: Do not use the DBMS machine for anything else other than the database

Usage: Do not place any trust in the database host on the internal network. Authenticate and validate all network activity originating from the database host.

Usage: Use an intrusion detection system to monitor network connections and logs on the database host.

Implementation: Remove / disable all unneeded / unused functions of the DBMS system that may allow an attacker to elevate privileges if compromised</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-471-DLLSearchOrderHijacking">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-159-RedirectAccessToLibraries"/>
		<rdfs:label>DLL Search Order Hijacking</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

The attacker exploits the functionality of the Windows DLL loader where the process loading the DLL searches for the DLL to be loaded first in the same directory in which the process binary resides and then in other directories (e.g., System32). Exploitation of this preferential search order can allow an attacker to make the loading process load the attackers&apos; rogue DLL rather than the legitimate DLL.

For instance, an attacker with access to the file system may place a malicious ntshrui.dll in the C:\Windows directory. This DLL normally resides in the System32 folder. Process explorer.exe which also resides in C:\Windows, upon trying to load the ntshrui.dll from the System32 folder will actually load the DLL supplied by the attacker simply because of the preferential search order. Since the attacker has placed its malicious ntshrui.dll in the same directory as the loading explorer.exe process, the DLL supplied by the attacker will be found first and thus loaded in lieu of the legitimate DLL. Since explorer.exe is loaded during the boot cycle, the attackers&apos; malware is guaranteed to execute.

This attack can be leveraged with many different DLLs and with many different loading processes. No forensic trails are left in the system&apos;s registry or file system that an incorrect DLL had been loaded.
+ Attack Prerequisites

    Windows system is used

    Attacker has a mechanism to place its malicious DLLs in the needed location on the file system

+ Solutions and Mitigations

Design: Fix the Windows loading process to eliminate the preferential search order by looking for DLLs in the precise location where they are expected

Design: Sign system DLLs so that unauthorized DLLs can be detected.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-472-BrowserFingerprinting">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-541-ApplicationFingerprinting"/>
		<rdfs:label>Browser Fingerprinting</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker carefully crafts small snippets of Java Script to efficiently detect the type of browser the potential victim is using. Many web-based attacks need prior knowledge of the web browser including the version of browser to ensure successful exploitation of a vulnerability. Having this knowledge allows an attacker to target the victim with attacks that specifically exploit known or zero day weaknesses in the type and version of the browser used by the victim. Automating this process via Java Script as a part of the same delivery system used to exploit the browser is considered more efficient as the attacker can supply a browser fingerprinting method and integrate it with exploit code, all contained in Java Script and in response to the same web page request by the browser.
+ Attack Prerequisites

    Victim&apos;s browser visits a website that contains attacker&apos;s Java Script

    Java Script is not disabled in the victim&apos;s browser

+ Solutions and Mitigations

Configuration: Disable Java Script in the browser</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-473-SignatureSpoof">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-151-IdentitySpoofing"/>
		<rdfs:label>Signature Spoof</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker generates a message or datablock that causes the recipient to believe that the message or datablock was generated and cryptographically signed by an authoritative or reputable source, misleading a victim or victim operating system into performing malicious actions.
+ Attack Prerequisites

    The victim or victim system is dependent upon a cryptographic signature-based verification system for validation of one or more security events or actions.

    The validation can be bypassed via an attacker-provided signature that makes it appear that the legitimate authoritative or reputable source provided the signature.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-474-SignatureSpoofingByKeyTheft">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-473-SignatureSpoof"/>
		<rdfs:label>Signature Spoofing By Key Theft</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker obtains an authoritative or reputable signer&apos;s private signature key by theft and then uses this key to forge signatures from the original signer to mislead a victim into performing actions that benefit the attacker.
+ Attack Prerequisites

    An authoritative or reputable signer is storing their private signature key with insufficient protection.

+ Solutions and Mitigations

Restrict access to private keys from non-supervisory accounts

Restrict access to administrative personnel and processes only

Ensure all remote methods are secured

Ensure all services are patched and up to date</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-475-SignatureSpoofingByImproperValidation">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-459-CreatingARogueCertificateAuthorityCertificate"/>
		<rdfs:label>Signature Spoofing By Improper Validation</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker exploits a cryptographic weakness in the signature verification algorithm implementation to generate a valid signature without knowing the key.
+ Attack Prerequisites

    Recipient is using a weak cryptographic signature verification algorithm or a weak implementation of a cryptographic signature verification algorithm, or the configuration of the recipient&apos;s application accepts the use of keys generated using cryptographically weak signature verification algorithms.

+ Solutions and Mitigations

Use programs and products that contain cryptographic elements that have been thoroughly tested for flaws in the signature verification routines.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-476-SignatureSpoofingByMisrepresentation">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-473-SignatureSpoof"/>
		<rdfs:label>Signature Spoofing By Misrepresentation</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker exploits a weakness in the parsing or display code of the recipient software to generate a data blob containing a supposedly valid signature, but the signer&apos;s identity is falsely represented, which can lead to the attacker manipulating the recipient software or its victim user to perform compromising actions.
+ Attack Prerequisites

    Recipient is using signature verification software that does not clearly indicate potential homographs in the signer identity.

    Recipient is using signature verification software that contains a parsing vulnerability, or allows control characters in the signer identity field, such that a signature is mistakenly displayed as valid and from a known or authoritative signer.

+ Solutions and Mitigations

Ensure the application is using parsing and data display techniques that will accurately display control characters, international symbols and markings, and ultimately recognize potential homograph attacks.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-477-SignatureSpoofingByMixingSignedAndUnsignedContent">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-473-SignatureSpoof"/>
		<rdfs:label>Signature Spoofing By Mixing Signed And Unsigned Content</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker exploits the underlying complexity of a data structure that allows for both signed and unsigned content, to cause unsigned data to be processed as though it were signed data.
+ Attack Prerequisites

    Signer and recipient are using complex data storage structures that allow for a mix between signed and unsigned data

    Recipient is using signature verification software that does not maintain separation between signed and unsigned data once the signature has been verified.

+ Solutions and Mitigations

Ensure the application is fully patched and does not allow the processing of unsigned data as if it is signed data.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-48-PassingLocalFilenamesToFunctionsThatExpectAURL">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-212-FunctionalityMisuse"/>
		<rdfs:label>Passing Local Filenames To Functions That Expect A URL</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

This attack relies on client side code to access local files and resources instead of URLs. When the client browser is expecting a URL string, but instead receives a request for a local file, that execution is likely to occur in the browser process space with the browser&apos;s authority to local files. The attacker can send the results of this request to the local files out to a site that they control. This attack may be used to steal sensitive authentication data (either local or remote), or to gain system profile information to launch further attacks.
+ Attack Prerequisites

    The victim&apos;s software must not differentiate between the location and type of reference passed the client software, e.g. browser

+ Solutions and Mitigations

Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.

Implementation: Ensure all configuration files and resource are either removed or protected when promoting code into production.

Design: Use browser technologies that do not allow client side scripting.

Implementation: Perform input validation for all remote content.

Implementation: Perform output validation for all remote content.

Implementation: Disable scripting languages such as JavaScript in browser</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-482-TCPFlood">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-125-Flooding"/>
		<rdfs:label>TCP Flood</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An adversary may execute a flooding attack using the TCP protocol with the intent to deny legitimate users access to a service. These attacks exploit the weakness within the TCP protocol where there is some state information for the connection the server needs to maintain.
+ Attack Prerequisites

    This type of an attack requires the ability to generate a large amount of TCP traffic to send to the target port of a functioning server.

+ Solutions and Mitigations

To mitigate this type of an attack, an organization can monitor incoming packets and look for patterns in the TCP traffic to determine if the network is under an attack. The potential target may implement a rate limit on TCP SYN messages which would provide limited capabilities while under attack.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-485-SignatureSpoofingByKeyRecreation">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-473-SignatureSpoof"/>
		<rdfs:label>Signature Spoofing By Key Recreation</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker obtains an authoritative or reputable signer&apos;s private signature key by exploiting a cryptographic weakness in the signature algorithm or pseudorandom number generation and then uses this key to forge signatures from the original signer to mislead a victim into performing actions that benefit the attacker.
+ Attack Prerequisites

    An authoritative signer is using a weak method of random number generation or weak signing software that causes key leakage or permits key inference.

    An authoritative signer is using a signature algorithm with a direct weakness or with poorly chosen parameters that enable the key to be recovered using signatures from that signer.

+ Solutions and Mitigations

Ensure cryptographic elements have been sufficiently tested for weaknesses.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-486-UDPFlood">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-125-Flooding"/>
		<rdfs:label>UDP Flood</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An adversary may execute a flooding attack using the UDP protocol with the intent to deny legitimate users access to a service by consuming the available network bandwidth. Additionally, firewalls often open a port for each UDP connection destined for a service with an open UDP port, meaning the firewalls in essence save the connection state thus the high packet nature of a UDP flood can also overwhelm resources allocated to the firewall. UDP attacks can also target services like DNS or VoIP which utilize these protocols. Additionally, due to the session-less nature of the UDP protocol, the source of a packet is easily spoofed making it difficult to find the source of the attack.
+ Attack Prerequisites

    This type of an attack requires the ability to generate a large amount of UDP traffic to send to the desired port of a target service using UDP.

+ Solutions and Mitigations

To mitigate this type of an attack, modern firewalls drop UDP traffic destined for closed ports, and unsolicited UDP reply packets. A variety of other countermeasures such as universal reverse path forwarding and remote triggered black holing(RFC3704) along with modifications to BGP like black hole routing and sinkhole routing(RFC3882) help mitigate the spoofed source IP nature of these attacks.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-487-ICMPFlood">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-125-Flooding"/>
		<rdfs:label>ICMP Flood</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An adversary may execute a flooding attack using the ICMP protocol with the intent to deny legitimate users access to a service by consuming the available network bandwidth. A typical attack involves a victim server receiving ICMP packets at a high rate from a wide range of source addresses. Additionally, due to the session-less nature of the ICMP protocol, the source of a packet is easily spoofed making it difficult to find the source of the attack.
+ Attack Prerequisites

    This type of an attack requires the ability to generate a large amount of ICMP traffic to send to the target server.

+ Solutions and Mitigations

To mitigate this type of an attack, an organization can enable ingress filtering. Additionally modifications to BGP like black hole routing and sinkhole routing(RFC3882) help mitigate the spoofed source IP nature of these attacks.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-488-HTTPFlood">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-125-Flooding"/>
		<rdfs:label>HTTP Flood</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An adversary may execute a flooding attack using the HTTP protocol with the intent to deny legitimate users access to a service by consuming resources at the application layer such as web services and their infrastructure. These attacks use legitimate session-based HTTP GET requests designed to consume large amounts of a server&apos;s resources. Since these are legitimate sessions this attack is very difficult to detect.
+ Attack Prerequisites

    This type of an attack requires the ability to generate a large amount of HTTP traffic to send to a target server.

+ Solutions and Mitigations

To mitigate this type of an attack, an organization can monitor the typical traffic flow. When spikes in usage occur, filters could examine traffic for indicators of bad behavior with respect to the web servers, and then create firewall rules to deny the malicious IP addresses. These patterns in the filter could be a combination of trained behavior, knowledge of standards as they apply to the web server, known patterns, or anomaly detection. Firewalling source IPs works since the HTTP is sent using TCP so the source IP can&apos;t be spoofed; if the source IP is spoofed is, then it&apos;s not legitimate traffic. Special care should be taken care with rule sets to ensure low false positive rates along with a method at the application layer to allow a valid user to begin using the service again. Another possible solution is using 3rd party providers as they have experts, knowledge, experience, and resources to deal with the attack and mitigate it before hand or while it occurs. The best mitigation is preparation before an attack, but there is no bulletproof solution as with ample resources a brute force attack may succeed.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-489-SSLFlood">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-125-Flooding"/>
		<rdfs:label>SSL Flood</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An adversary may execute a flooding attack using the SSL protocol with the intent to deny legitimate users access to a service by consuming all the available resources on the server side. These attacks take advantage of the asymmetric relationship between the processing power used by the client and the processing power used by the server to create a secure connection. In this manner the attacker can make a large number of HTTPS requests on a low provisioned machine to tie up a disproportionately large number of resources on the server. The clients then continue to keep renegotiating the SSL connection. When multiplied by a large number of attacking machines, this attack can result in a crash or loss of service to legitimate users.
+ Attack Prerequisites

    This type of an attack requires the ability to generate a large amount of SSL traffic to send a target server.

+ Solutions and Mitigations

To mitigate this type of an attack, an organization can create rule based filters to silently drop connections if too many are attempted in a certain time period.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-49-PasswordBruteForcing">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-112-BruteForce"/>
		<rdfs:label>Password Brute Forcing</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

In this attack, the attacker tries every possible value for a password until they succeed. A brute force attack, if feasible computationally, will always be successful because it will essentially go through all possible passwords given the alphabet used (lower case letters, upper case letters, numbers, symbols, etc.) and the maximum length of the password.

A system will be particularly vulnerable to this type of an attack if it does not have a proper enforcement mechanism in place to ensure that passwords selected by users are strong passwords that comply with an adequate password policy.

In practice a pure brute force attack on passwords is rarely used, unless the password is suspected to be weak. Other password cracking methods exist that are far more effective (e.g. dictionary attacks, rainbow tables, etc.).
+ Attack Prerequisites

    An attacker needs to know a username to target.

    The system uses password based authentication as the one factor authentication mechanism.

    An application does not have a password throttling mechanism in place. A good password throttling mechanism will make it almost impossible computationally to brute force a password as it may either lock out the user after a certain number of incorrect attempts or introduce time out periods. Both of these would make a brute force attack impractical.

+ Solutions and Mitigations

Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.

Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.

Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-490-Amplification">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-125-Flooding"/>
		<rdfs:label>Amplification</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An adversary may execute an amplification where the size of a response is far greater than that of the request that generates it. The goal of this attack is to use a relatively few resources to create a large amount of traffic against a target server. To execute this attack, an adversary send a request to a 3rd party service, spoofing the source address to be that of the target server. The larger response that is generated by the 3rd party service is then sent to the target server. By sending a large number of initial requests, the adversary can generate a tremendous amount of traffic directed at the target. The greater the discrepancy in size between the initial request and the final payload delivered to the target increased the effectiveness of this attack.
+ Attack Prerequisites

    This type of an attack requires the existence of a 3rd party service that generates a response that is significantly larger than the request that triggers it.

+ Solutions and Mitigations

To mitigate this type of an attack, an organization can attempt to identify the 3rd party services being used in an active attack and blocking them until the attack ends. This can be accomplished by filtering traffic for suspicious message patterns such as a spike in traffic where each response contains the same large block of data. Care should be taken to prevent false positive rates so legitimate traffic isn&apos;t blocked.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-491-XMLQuadraticExpansion">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-230-XMLNestedPayloads"/>
		<rdfs:label>XML Quadratic Expansion</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An adversary exploits a few properties of XML(substitution entities and inline DTDs) to cause a denial of service situation due to excessive memory being allocated to fully expand the XML. The result of this denial of service could cause the application to freeze or crash.
+ Attack Prerequisites

    This type of attack requires a server that accepts XML data and parses the data.

+ Solutions and Mitigations

Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.

Implementation: Disable altogether the use of inline DTD schemas in your XML parsing objects. If must use DTD, normalize, filter and white list and parse with methods and routines that will detect entity expansion from untrusted sources.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-492-RegularExpressionExponentialBlowup">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-130-ExcessiveAllocation"/>
		<rdfs:label>Regular Expression Exponential Blowup</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An adversary may execute an attack on a program that uses a poor Regular Expression(Regex) implementation by choosing input that results in an extreme situation for the Regex. A typical extreme situation operates at exponential time compared to the input size. This is due to most implementations using a Nondeterministic Finite Automaton(NFA) state machine to be built by the Regex algorithm since NFA allows backtracking and thus more complex regular expressions. The algorithm builds a finite state machine and based on the input transitions through all the states until the end of the input is reached. NFA engines may evaluate each character in the input string multiple times during the backtracking. The algorithm tries each path through the NFA one by one until a match is found; the malicious input is crafted so every path is tried which results in a failure. Exploitation of the Regex results in programs hanging or taking a very long time to complete. These attacks may target various layers of the Internet due to regular expressions being used in validation.
+ Attack Prerequisites

    This type of an attack requires the ability to identify hosts running a poorly implemented Regex, and the ability to send crafted input to exploit the regular expression.

+ Solutions and Mitigations

Test custom written Regex with fuzzing to determine if the Regex is a poor one. Add timeouts to processes that handle the Regex logic. If an evil Regex is found rewrite it as a good Regex.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-493-SOAPArrayBlowup">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-130-ExcessiveAllocation"/>
		<rdfs:label>SOAP Array Blowup</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An adversary may execute an attack on a web service that uses SOAP messages in communication. By sending a very large SOAP array declaration to the web service, the attacker forces the web service to allocate space for the array elements before they are parsed by the XML parser. The attacker message is typically small in size containing a large array declaration of say 1,000,000 elements and a couple of array elements. This attack targets exhaustion of the memory resources of the web service.
+ Attack Prerequisites

    This type of an attack requires the attacker to know the endpoint of the web service, and be able to reach the endpoint with a malicious SOAP message.

+ Solutions and Mitigations

Enforce strict schema validation. The schema should enforce a maximum number of array elements. If the number of maximum array elements can&apos;t be limited another validation method should be used. One such method could be comparing the declared number of items in the array with the existing number of elements of the array. If these numbers don&apos;t match drop the SOAP packet at the web service layer.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-494-TCPFragmentation">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-130-ExcessiveAllocation"/>
		<rdfs:label>TCT Fragmentation</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker may execute a TCP Fragmentation attack against a target with the intention of avoiding filtering rules. IP fragmentation occurs when an IP datagram is larger than the MTU of the route the datagram has to traverse. The attacker attempts to fragment the TCP packet such that the headers flag field is pushed into the second fragment which typically is not filtered. This behavior defeats some IPS and firewall filters who typically check the FLAGS in the header of the first packet since dropping this packet prevents the following fragments from being processed and assembled. Another variation is overlapping fragments thus that an innocuous first segment passes the filter and the second segment overwrites the TCP header data with the true payload which is malicious in nature. The malicious payload manipulated properly may lead to a DoS due to resource consumption or kernel crash. Additionally the fragmentation could be used in conjunction with sending fragments at a rate slightly slower than the timeout to cause a DoS condition by forcing resources that assemble the packet to wait an inordinate amount of time to complete the task. The fragmentation identification numbers could also be duplicated very easily as there are only 16 bits in IPv4 so only 65536 packets are needed.
+ Attack Prerequisites

    This type of an attack requires the target system to be running a vulnerable implementation of IP, and the attacker needs to ability to send TCP packets of arbitrary size with crafted data.

+ Solutions and Mitigations

This attack may be mitigated by enforcing rules at the router following the guidance of RFC1858. The essential part of the guidance is creating the following rule &quot;IF FO=1 and PROTOCOL=TCP then DROP PACKET&quot; as this mitigated both tiny fragment and overlapping fragment attacks in IPv4. In IPv6 overlapping(RFC5722) additional steps may be required such as deep packet inspection. The delayed fragments may be mitigated by enforcing a timeout on the transmission to receive all packets by a certain time since the first packet is received. According to RFC2460 IPv6 implementations should enforce a rule to discard all fragments if the fragments are not ALL received within 60 seconds of the FIRST arriving fragment.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-495-UDPFragmentation">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-130-ExcessiveAllocation"/>
		<rdfs:label>UDP Fragmentation</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker may execute a UDP Fragmentation attack against a target server in an attempt to consume resources such as bandwidth and CPU. IP fragmentation occurs when an IP datagram is larger than the MTU of the route the datagram has to traverse. Typically the attacker will use large UDP packets over 1500 bytes of data which forces fragmentation as ethernet MTU is 1500 bytes. This attack is a variation on a typical UDP flood but it enables more network bandwidth to be consumed with fewer packets. Additionally it has the potential to consume server CPU resources and fill memory buffers associated with the processing and reassembling of fragmented packets.
+ Attack Prerequisites

    This type of an attack requires the attacker to be able to generate fragmented IP traffic containing crafted data.

+ Solutions and Mitigations

This attack may be mitigated by changing default cache sizes to be larger at the OS level. Additionally rules can be enforced to prune the cache with shorter timeouts for packet reassembly as the cache nears capacity.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-496-ICMPFragmentation">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-130-ExcessiveAllocation"/>
		<rdfs:label>ICMP Fragmentation</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker may execute a ICMP Fragmentation attack against a target with the intention of consuming resources or causing a crash. The attacker crafts a large number of identical fragmented IP packets containing a portion of a fragmented ICMP message. The attacker these sends these messages to a target host which causes the host to become non-responsive. Another vector may be sending a fragmented ICMP message to a target host with incorrect sizes in the header which causes the host to hang.
+ Attack Prerequisites

    This type of an attack requires the target system to be running a vulnerable implementation of IP, and the attacker needs to ability to send arbitrary sized ICMP packets to the target.

+ Solutions and Mitigations

This attack may be mitigated through egress filtering based on ICMP payload so a network is a &quot;good neighbor&quot; to other networks. Bad IP implementations become patched, so using the proper version of a browser or OS is recommended.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-498-ProbeIOSScreenshots">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-545-PullDataFromSystemResources"/>
		<rdfs:label>Probe IOS Screenshots</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An adversary examines screenshot images created by iOS in an attempt to obtain sensitive information. These images are used by iOS to aid in the visual transition between open applications and improve the user&apos;s experience with a device. An application can be at risk even if it properly protects sensitive information when at rest. If the application displays sensitive information on the screen, then the potential exists for iOS to unintentionally record that information in an image file. An adversary can retrieve these images either by gaining access to the image files, or by physically obtaining the device and leveraging the multitasking switcher interface.
+ Attack Prerequisites

    This type of an attack requires physical access to a device to either excavate the image files (potentially by leveraging a Jailbreak) or view the screenshots through the multitasking switcher (by double tapping the home button on the device).

+ Solutions and Mitigations

To mitigate this type of an attack, an application that may display sensitive information should clear the screen contents before a screenshot is taken. This can be accomplished by setting the key window&apos;s hidden property to YES. This code to hide the contents should be placed in both the applicationWillResignActive() and applicationDidEnterBackground() methods.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-499-IntentIntercept">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-117-Interception"/>
		<rdfs:label>Intent Intercept</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An adversary, through a previously installed malicious application, intercepts messages from a trusted Android-based application in an attempt to achieve a variety of different objectives including denial of service, information disclosure, and data injection. An implicit intent sent from a trusted application can be received by any application that has declared an appropriate intent filter. If the intent is not protected by a permission that the malicious application lacks, then the attacker can gain access to the data contained within the intent. Further, the intent can be either blocked from reaching the intended destination, or modified and potentially forwarded along.
+ Attack Prerequisites

    An adversary must be able install a purpose built malicious application onto the Android device and convince the user to execute it. The malicious application is used to intercept implicit intents.

+ Solutions and Mitigations

To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An explicit intent is delivered to a specific application as declared within the intent, whereas the Android operating system determines who receives an implicit intent which could potentially be a malicious application. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly. Implicit intents should never be used for inter-application communication.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-5-BlueBoxing">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-220-ClientServerProtocolManipulation"/>
		<rdfs:label>Blue Boxing</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

This type of attack against older telephone switches and trunks has been around for decades. A tone is sent by an adversary to impersonate a supervisor signal which has the effect of rerouting or usurping command of the line. While the US infrastructure proper may not contain widespread vulnerabilities to this type of attack, many companies are connected globally through call centers and business process outsourcing. These international systems may be operated in countries which have not upgraded Telco infrastructure and so are vulnerable to Blue boxing. Blue boxing is a result of failure on the part of the system to enforce strong authorization for administrative functions. While the infrastructure is different than standard current applications like web applications, there are historical lessons to be learned to upgrade the access control for administrative functions.
+ Attack Prerequisites

    System must use weak authentication mechanisms for administrative functions.

+ Solutions and Mitigations

Implementation: Upgrade phone lines. Note this may be prohibitively expensive

Use strong access control such as two factor access control for administrative access to the switch</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-50-PasswordRecoveryExploitation">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-212-FunctionalityMisuse"/>
		<rdfs:label>Password Recovery Exploitation</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker may take advantage of the application feature to help users recover their forgotten passwords in order to gain access into the system with the same privileges as the original user. Generally password recovery schemes tend to be weak and insecure. Most of them use only one security question . For instance, mother&apos;s maiden name tends to be a fairly popular one. Unfortunately in many cases this information is not very hard to find, especially if the attacker knows the legitimate user.

These generic security questions are also re-used across many applications, thus making them even more insecure. An attacker could for instance overhear a coworker talking to a bank representative at the work place and supplying their mother&apos;s maiden name for verification purposes. An attacker can then try to log in into one of the victim&apos;s accounts, click on &quot;forgot password&quot; and there is a good chance that the security question there will be to provide mother&apos;s maiden name.

A weak password recovery scheme totally undermines the effectiveness of a strong password scheme.
+ Attack Prerequisites

    The system allows users to recover their passwords and gain access back into the system.

    Password recovery mechanism has been designed or implemented insecurely.

    Password recovery mechanism relies only on something the user knows and not something the user has.

    No third party intervention is required to use the password recovery mechanism.

+ Solutions and Mitigations

Use multiple security questions (e.g. have three and make the user answer two of them correctly). Let the user select their own security questions or provide them with choices of questions that are not generic.

E-mail the temporary password to the registered e-mail address of the user rather than letting the user reset the password online.

Ensure that your password recovery functionality is not vulnerable to an injection style attack.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-500-WebViewInjection">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-253-RemoteCodeInclusion"/>
		<rdfs:label>WebView Injection</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An adversary, through a previously installed malicious application, injects code into the context of a web page displayed by a WebView component. Through the injected code, an adversary is able to manipulate the DOM tree and cookies of the page, expose sensitive information, and can launch attacks against the web application from within the web page.
+ Attack Prerequisites

    An adversary must be able install a purpose built malicious application onto the device and convince the user to execute it. The malicious application is designed to target a specific web application and is used to load the target web pages via the WebView component. For example, an adversary may develop an application that interacts with Facebook via WebView and adds a new feature that a user desires. The user would install this 3rd party app instead of the Facebook app.

+ Solutions and Mitigations

The only known mitigation to this type of attack is to keep the malicious application off the system. There is nothing that can be done to the target application to protect itself from a malicious application that has been installed and executed.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-501-ActivityHijack">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-173-ActionSpoofing"/>
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-499-IntentIntercept"/>
		<rdfs:label>Activity Hijack</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An adversary, through a previously installed malicious application, intercepts an implicit intent sent to launch a trusted activity and instead launches a counterfeit activity in its place. The malicious activity is then used to mimic the trusted activity&apos;s user interface and convince the user to enter sensitive data as if they were interacting with the trusted activity.
+ Solutions and Mitigations

To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An explicit intent is delivered to a specific application as declared within the intent, whereas the Android operating system determines who receives an implicit intent which could potentially be a malicious application. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly. Implicit intents should never be used for inter-application communication.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-502-IntentSpoof">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-148-ContentSpoofing"/>
		<rdfs:label>Intent Spoof</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An adversary, through a previously installed malicious application, issues an intent directed toward a specific trusted application&apos;s component in an attempt to achieve a variety of different objectives including modification of data, information disclosure, and data injection. Components that have been unintentionally exported and made public are subject to this type of an attack. If the component blindly trusts the intent&apos;s action, then the target application performs the functionality at the adversary&apos;s request, helping the adversary achieve the desired negative technical impact.
+ Attack Prerequisites

    An adversary must be able install a purpose built malicious application onto the Android device and convince the user to execute it. The malicious application will be used to issue spoofed intents.

+ Solutions and Mitigations

To limit one&apos;s exposure to this type of attack, developers should avoid exporting components unless the component is specifically designed to handle requests from untrusted applications. Developers should be aware that declaring an intent filter will automatically export the component, exposing it to public access. Critical, state-changing actions should not be placed in exported components. If a single component handles both inter- and intra-application requests, the developer should consider dividing that component into separate components. If a component must be exported (e.g., to receive system broadcasts), then the component should dynamically check the caller&apos;s identity prior to performing any operations. Requiring Signature or SignatureOrSystem permissions is an effective way of limiting a component&apos;s exposure to a set of trusted applications. Finally, the return values of exported components can also leak private data, so developers should check the caller&apos;s identity prior to returning sensitive values.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-503-WebViewExposure">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-122-PrivilegeAbuse"/>
		<rdfs:label>WebView Exposure</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An adversary, through a malicious web page, accesses application specific functionality by leveraging interfaces registered through WebView&apos;s addJavascriptInterface API. Once an interface is registered to WebView through addJavascriptInterface, it becomes global and all pages loaded in the WebView can call this interface.
+ Attack Prerequisites

    This type of an attack requires the adversary to convince the user to load the malicious web page inside the target application. Once loaded, the malicious web page will have the same permissions as the target application and will have access to all registered interfaces. Both the permission and the interface must be in place for the functionality to be exposed.

+ Solutions and Mitigations

To mitigate this type of an attack, an application should limit permissions to only those required and should verify the origin of all web content it loads.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-504-TaskImpersonation">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-173-ActionSpoofing"/>
		<rdfs:label>Task Impersonation</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An adversary, through a previously installed malicious application, monitors the task list maintained by the operating system and waits for a specific legitimate task to become active. Once the task is detected, the malicious application launches a new task in the foreground that mimics the user interface of the legitimate task. At this point, the user thinks that they are interacting with the legitimate task that they started, but instead they are interacting with the malicious application. This type of attack is most often used to obtain sensitive information (e.g., credentials) from the user. Once the adversary&apos;s goal is reached, the malicious application can exit, leaving the original trusted application visible and the appearance that nothing out of the ordinary has occurred.
+ Solutions and Mitigations

The only known mitigation to this attack is to avoid installing the malicious application on the device. However, the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-505-SchemeSquatting">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-173-ActionSpoofing"/>
		<rdfs:label>Scheme Squatting</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An adversary, through a previously installed malicious application, registers for a URL scheme intended for a target application that has not been installed. Thereafter, messages intended for the target application are handled by the malicious application. Upon receiving a message, the malicious application displays a screen that mimics the target application, thereby convincing the user to enter sensitive information. This type of attack is most often used to obtain sensitive information (e.g., credentials) from the user as they think that they are interacting with the intended target application.
+ Solutions and Mitigations

The only known mitigation to this attack is to avoid installing the malicious application on the device. Applications usually have to declare the schemes they wish to register, so detecting this during a review is feasible.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-506-Tapjacking">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-173-ActionSpoofing"/>
		<rdfs:label>Tapjacking</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An adversary, through a previously installed malicious application, displays an interface that misleads the user and convinces them to tap in an attacker desired location. This is often accomplished by overlaying one screen on top of another while giving the appearance of a single interface. There are two main techniques used to accomplish this. The first is to leverage transparent properties that allow taps on the screen to pass through the visible application to an application running in the background. The second is to strategically place a small object (e.g., a button or text field) on top of the visible screen and make it appear to be a part of the underlying application. In both cases, the user is convinced to tap on the screen but does not realize the application that they are interacting with.
+ Attack Prerequisites

    This pattern of attack requires the ability to execute a malicious application on the user&apos;s device. This malicious application is used to present the interface to the user and make the attack possible.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-507-PhysicalTheft">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Physical Theft</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An adversary gains physical access to a system or device through theft of the item. Possession of a system or device enables a number of unique attacks to be executed and often provides the adversary with an extended timeframe for which to perform an attack. Most protections put in place to secure sensitive information can be defeated when an adversary has physical access and enough time.
+ Attack Prerequisites

    This type of attack requires the existence of a physical target that an adversary believes hosts something of value.

+ Solutions and Mitigations

To mitigate this type of attack, physical security techniques such as locks doors, alarms, and monitoring of targets should be implemented.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-51-PoisenWebServiceRegistry">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-203-ManipulateApplicationRegistryValues"/>
		<rdfs:label>Poisen Web Service Registry</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

SOA and Web Services often use a registry to perform look up, get schema information, and metadata about services. A poisoned registry can redirect (think phishing for servers) the service requester to a malicious service provider, provide incorrect information in schema or metadata (to effect a denial of service), and delete information about service provider interfaces.

WS-Addressing is used to virtualize services, provide return addresses and other routing information, however, unless the WS-Addressing headers are protected they are vulnerable to rewriting. The attacker that can rewrite WS-addressing information gains the ability to route service requesters to any service providers, and the ability to route service provider response to any service.

Content in a registry is deployed by the service provider. The registry in an SOA or Web Services system can be accessed by the service requester via UDDI or other protocol. The basic flow for the attacker consists of either altering the data at rest in the registry or uploading malicious content by spoofing a service provider. The service requester is then redirected to send its requests and/or responses to services the attacker controls.
+ Attack Prerequisites

    The attacker must be able to write to resources or redirect access to the service registry.

+ Solutions and Mitigations

Design: Enforce principle of least privilege

Design: Harden registry server and file access permissions

Implementation: Implement communications to and from the registry using secure protocols</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-510-SaaSUserRequestForgery">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-21-ExploitationOfTrustedCredentials"/>
		<rdfs:label>Saas User Request Forgery</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An adversary, through a previously installed malicious application, performs malicious actions against a third-party Software as a Service (SaaS) application (also known as a cloud based application) by leveraging the persistent and implicit trust placed on a trusted user&apos;s session. This attack is executed after a trusted user is authenticated into a cloud service, &quot;piggy-backing&quot; on the authenticated session, and exploiting the fact that the cloud service believes it is only interacting with the trusted user. If successful, the actions embedded in the malicious application will be processed and accepted by the targeted SaaS application and executed at the trusted user&apos;s privilege level.
+ Attack Prerequisites

    An adversary must be able install a purpose built malicious application onto the trusted user&apos;s system and convince the user to execute it while authenticated to the SaaS application.

+ Solutions and Mitigations

To limit one&apos;s exposure to this type of attack, tunnel communications through a secure proxy service.

Detection of this type of attack can be done through heuristic analysis of behavioral anomalies (a la credit card fraud detection) which can be used to identify inhuman behavioral patterns. (e.g., spidering)</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-511-InfiltrationOfSoftwareDevelopmentEnvironment">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-444-DevelopmentAlteration"/>
		<rdfs:label>Infiltration Of Software Development Environment</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker uses common delivery mechanisms such as email attachments or removable media to infiltrate the IDE (Integrated Development Environment) of a victim manufacturer with the intent of implanting malware allowing for attack control of the victim IDE environment. The attack then uses this access to exfiltrate sensitive data or information, manipulate said data or information, and conceal these actions. This will allow and aid the attack to meet the goal of future compromise of a recipient of the victim&apos;s manufactured product further down in the supply chain.
+ Attack Prerequisites

    The victim must use email or removable media from systems running the IDE (or systems adjacent to the IDE systems).

    The victim must have a system running exploitable applications and/or a vulnerable configuration to allow for initial infiltration.

    The attacker must have working knowledge of some if not all of the components involved in the IDE system as well as the infrastructure.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-516-HardwareComponentSubstitutionDuringBaselining">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-444-DevelopmentAlteration"/>
		<rdfs:label>Hardware Component Substitution During Baselining</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker with access to system components during allocated baseline development can substitute a maliciously altered hardware component for a baseline component in the during the product development and research phase. This can lead to adjustments and calibrations being made in the product, so that when the final product with the proper components is deployed, it will not perform as designed and be advantageous to the attacker.
+ Attack Prerequisites

    The attacker will need either physical access or be able to supply malicious hardware components to the product development facility.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-517-DocumentationAlterationToCircumventDialDown">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-447-DesignAlteration"/>
		<rdfs:label>Documentation Alteration To Circumvent Dial Down</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker with access to a manufacturer&apos;s documentation, which include descriptions of advanced technology and/or specific components&apos; criticality, alters the documents to circumvent dial-down functionality requirements. This alteration would change the interpretation of implementation and manufacturing techniques, allowing for advanced technologies to remain in place even though these technologies might be restricted to certain customers, such as nations on the terrorist watch list, giving the attacker on the receiving end of a shipped product access to an advanced technology that might otherwise be restricted.
+ Attack Prerequisites

    Advanced knowledge of internal software and hardware components within manufacturer&apos;s development environment.

    Access to the manufacturer&apos;s documentation.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-518-DocumentationAlterationToProduceUnderPerformingSystems">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-447-DesignAlteration"/>
		<rdfs:label>Documentation Alteration To Produce Under Performing Systems</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker with access to a manufacturer&apos;s documentation alters the descriptions of system capabilities with the intent of causing errors in derived system requirements, impacting the overall effectiveness and capability of the system, allowing an attacker to take advantage of the introduced system capability flaw once the system is deployed.
+ Attack Prerequisites

    Advanced knowledge of software and hardware capabilities of a manufacturer&apos;s product.

    Access to the manufacturer&apos;s documentation.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-519-DocumentationAlterationToCauseErrorsInSystemDesign">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-447-DesignAlteration"/>
		<rdfs:label>Documentation Alteration To Cause Errors In System Design</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker with access to a manufacturer&apos;s documentation containing requirements allocation and software design processes maliciously alters the documentation in order to cause errors in system design. This allows the attacker to take advantage of a weakness in a deployed system of the manufacturer for malicious purposes.
+ Attack Prerequisites

    Advanced knowledge of software capabilities of a manufacturer&apos;s product.

    Access to the manufacturer&apos;s documentation.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-52-EmbeddingNULLBytes">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-267-LeverageAlternateEncoding"/>
		<rdfs:label>Embedding NULL Bytes</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker embeds one or more null bytes in input to the target software. This attack relies on the usage of a null-valued byte as a string terminator in many environments. The goal is for certain components of the target software to stop processing the input when it encounters the null byte(s).
+ Attack Prerequisites

    The program does not properly handle postfix NULL terminators

+ Solutions and Mitigations

Properly handle the NULL characters supplied as part of user input prior to doing anything with the data.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-520-CounterfeitHardwareComponentInsertedDuringProductAssembly">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-444-DevelopmentAlteration"/>
		<rdfs:label>Counterfeit Hardware Component Inserted During Product Assembly</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker with either direct access to the product assembly process or to the supply of subcomponents used in the product assembly process introduces counterfeit hardware components into product assembly. The assembly containing the counterfeit components results in a system specifically designed for malicious purposes.
+ Attack Prerequisites

    The attacker will need either physical access or be able to supply malicious hardware components to the product development facility.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-521-HardwareDesignSpecificationsAreAltered">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-447-DesignAlteration"/>
		<rdfs:label>Hardware Design Specifications Are Altered</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker with access to a manufacturer&apos;s hardware manufacturing process documentation alters the design specifications, which introduces flaws advantageous to the attacker once the system is deployed.
+ Attack Prerequisites

    Advanced knowledge of hardware capabilities of a manufacturer&apos;s product.

    Access to the manufacturer&apos;s documentation.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-522-MaliciousHardwareComponentReplacement">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-439-ManipulationDuringDistribution"/>
		<rdfs:label>Malicious Hardware Component Replacement</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker replaces legitimate hardware in the system with faulty counterfeit or tampered hardware in the supply chain distribution channel, with purpose of causing malicious disruption or allowing for additional compromise when the system is deployed.
+ Attack Prerequisites

    Physical access to the system after it has left the manufacturer but before it is deployed at the victim location.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-523-MaliciousSoftwareImplanted">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-439-ManipulationDuringDistribution"/>
		<rdfs:label>Malicious Software Implanted</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker implants malicious software into the system in the supply chain distribution channel, with purpose of causing malicious disruption or allowing for additional compromise when the system is deployed.
+ Attack Prerequisites

    Physical access to the system after it has left the manufacturer but before it is deployed at the victim location.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-524-RogueIntegrationProcedures">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-439-ManipulationDuringDistribution"/>
		<rdfs:label>Rogue Integration Procedures</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker alters or establishes rogue processes in an integration facility in order to insert maliciously altered components into the system. The attacker would then supply the malicious components. This would allow for malicious disruption or additional compromise when the system is deployed.
+ Attack Prerequisites

    Physical access to an integration facility that prepares the system before it is deployed at the victim location.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-528-XMLFlood">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-125-Flooding"/>
		<rdfs:label>XML Flood</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An adversary may execute a flooding attack using XML messages with the intent to deny legitimate users access to a web service. These attacks are accomplished by sending a large number of XML based requests and letting the service attempt to parse each one.
+ Attack Prerequisites

    This type of an attack requires the ability to generate a large amount of XML based messages to send to a target service.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-529-MalwareDirectedInternalReconnaissance">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-169-Footprinting"/>
		<rdfs:label>Malware Directed Internal Reconnaissance</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

Adversary uses malware or a similarly controlled application installed inside an organizational perimeter to gather information about the composition, configuration, and security mechanisms of a targeted application, system or network.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-53-PostfixNullTerminateAndBacklash">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-267-LeverageAlternateEncoding"/>
		<rdfs:label>Postfix Null Terminate And Backlash</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

If a string is passed through a filter of some kind, then a terminal NULL may not be valid. Using alternate representation of NULL allows an attacker to embed the NULL mid-string while postfixing the proper data so that the filter is avoided. One example is a filter that looks for a trailing slash character. If a string insertion is possible, but the slash must exist, an alternate encoding of NULL in mid-string may be used.
+ Attack Prerequisites

    Null terminators are not properly handled by the filter.

+ Solutions and Mitigations

Properly handle Null characters. Make sure canonicalization is properly applied. Do not pass Null characters to the underlying APIs.

Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-530-ProvideCounterfeitComponent">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-531-HardwareComponentSubstitution"/>
		<rdfs:label>Provide Counterfeit Component</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker provides a counterfeit component during the procurement process of a lower-tier component supplier to a sub-system developer or integrator, which is then built into the system being upgraded or repaired by the victim, allowing the attacker to cause disruption or additional compromise.
+ Attack Prerequisites

    Advanced knowledge about the target system and sub-components.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-531-HardwareComponentSubstitution">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-534-MaliciousHardwareUpdate"/>
		<rdfs:label>Hardware Component Substitution</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker substitutes out a tested and approved hardware component for a maliciously-altered hardware component. This type of attack is carried out directly on the system, enabling the attacker to then cause disruption or additional compromise.
+ Attack Prerequisites

    Physical access to the system or the integration facility where hardware components are kept.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-532-AlteredInstalledBIOS">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-442-MaliciousLogicInsertedIntoToProductSoftware"/>
		<rdfs:label>Altered Installed BIOS</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker with access to download and update system software sends a maliciously altered BIOS to the victim or victim supplier/integrator, which when installed allows for future exploitation.
+ Attack Prerequisites

    Advanced knowledge about the installed target system design.

    Advanced knowledge about the download and update installation processes.

    Access to the download and update system(s) used to deliver BIOS images.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-533-MaliciousManualSoftwareUpdate">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-186-MaliciousSoftwareUpdate"/>
		<rdfs:label>Malicious Manual Software Update</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker introduces malicious code to the victim&apos;s system by altering the payload of a software update, allowing for additional compromise or site disruption at the victim location. These manual, or user-assisted attacks, vary from requiring the user to download and run an executable, to as streamlined as tricking the user to click a URL. Attacks which aim at penetrating a specific network infrastructure often rely upon secondary attack methods to achieve the desired impact. Spamming, for example, is a common method employed as an secondary attack vector. Thus the attacker has in his or her arsenal a choice of initial attack vectors ranging from traditional SMTP/POP/IMAP spamming and its varieties, to web-application mechanisms which commonly implement both chat and rich HTML messaging within the user interface.
+ Attack Prerequisites

    Advanced knowledge about the download and update installation processes.

    Advanced knowledge about the deployed system and its various software subcomponents and processes.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-534-MaliciousHardwareUpdate">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-440-HardwareIntegrityAttack"/>
		<rdfs:label>Malicious Hardware Update</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker introduces malicious hardware during an update or replacement procedure, allowing for additional compromise or site disruption at the victim location.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-535-MaliciousGrayMarketHardware">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-531-HardwareComponentSubstitution"/>
		<rdfs:label>Malicious Gray Market Hardware</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker maliciously alters hardware components that will be sold on the gray market, allowing for victim disruption and compromise when the victim needs replacement hardware components for systems where the parts are no longer in regular supply from original suppliers, or where the hardware components from the attacker seems to be a great benefit from a cost perspective.
+ Attack Prerequisites

    Physical access to a gray market reseller&apos;s hardware components supply, or the ability to appear as a gray market reseller to the victim&apos;s buyer.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-536-DataInjectedDuringConfiguration">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-176-ConfigurationEnvironmentManipulation"/>
		<rdfs:label>Data Injected During Configuration</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker with access to data files and processes on a victim&apos;s system injects false data into critical operational data during configuration or recalibration, causing the victim&apos;s system to perform in a suboptimal manner that benefits the attacker.
+ Attack Prerequisites

    The attacker must have previously compromised the victim&apos;s systems or have physical access to the victim&apos;s systems.

    Advanced knowledge of software and hardware capabilities of a manufacturer&apos;s product.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-537-InfiltrationOfHardwareDevelopmentEnvironment">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-444-DevelopmentAlteration"/>
		<rdfs:label>Infiltration Of Hardware Development Environment</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker, leveraging the ability to manipulate components of primary support systems and tools within the development and production environments, inserts malicious software within the hardware and/or firmware development environment. The infiltration purpose is to alter developed hardware components in a system destined for deployment at the victim&apos;s organization, for the purpose of disruption or further compromise.
+ Attack Prerequisites

    The victim must use email or removable media from systems running the IDE (or systems adjacent to the IDE systems).

    The victim must have a system running exploitable applications and/or a vulnerable configuration to allow for initial infiltration.

    The attacker must have working knowledge of some if not all of the components involved in the IDE system as well as the infrastructure.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-538-OpenSourceLibrariesAltered">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-442-MaliciousLogicInsertedIntoToProductSoftware"/>
		<rdfs:label>Open Source Libraries Altered</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker with access to an open source code project and knowledge of its particular use for in a system being developed, manufactured, or supported for the victim, can insert malicious code into the open source software used for math libraries in anticipation of inclusion into the system for the purpose of disruption or further compromise within the victim organization.
+ Attack Prerequisites

    Access to the open source code base being used by the manufacturer in a system being developed or currently deployed at a victim location.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-539-ASICWithMaliciousFunctionality">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-444-DevelopmentAlteration"/>
		<rdfs:label>ASIC With Malicious Functionality</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker with access to the development environment process of an application-specific integrated circuit (ASIC) for a victim system being developed or maintained after initial deployment can insert malicious functionality into the system for the purpose of disruption or further compromise.
+ Attack Prerequisites

    The attacker must have working knowledge of some if not all of the components involved in the target system as well as the infrastructure and development environment of the manufacturer.

    Advanced knowledge about the ASIC installed within the target system.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-54-QuerySystemForInformation">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-116-Excavation"/>
		<rdfs:label>Query System For Information</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An adversary, aware of an application&apos;s location (and possibly authorized to use the application), probes an application&apos;s structure and evaluates its robustness by submitting requests and examining responses. Often, this is accomplished by sending variants of expected queries in the hope that these modified queries might return information beyond what the expected set of queries would provide.
+ Attack Prerequisites

    This class of attacks does not strictly require authorized access to the application. As Attackers use this attack process to classify, map, and identify vulnerable aspects of an application, it simply requires hypotheses to be verified, interaction with the application, and time to conduct trial-and-error activities.

+ Solutions and Mitigations

Application designers can construct a &apos;code book&apos; for error messages. When using a code book, application error messages aren&apos;t generated in string or stack trace form, but are cataloged and replaced with a unique (often integer-based) value &apos;coding&apos; for the error. Such a technique will require helpdesk and hosting personnel to use a &apos;code book&apos; or similar mapping to decode application errors/logs in order to respond to them normally.

Application designers can wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above &apos;code book&apos; suggestion.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-540-OverreadBuffers">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-123-BufferManipulation"/>
		<rdfs:label>Overread Buffers</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An adversary attacks a target by providing input that causes an application to read beyond the boundary of a defined buffer. This typically occurs when a value influencing where to start or stop reading is set to reflect positions outside of the valid memory location of the buffer. This type of attack may result in exposure of sensitive information, a system crash, or arbitrary code execution.
+ Attack Prerequisites

    For this type of attack to be successful, a few prerequisites must be met. First, the targeted software must be written in a language that enables fine grained buffer control. (e.g., c, c++) Second, the targeted software must actually perform buffer operations and inadequately perform bounds-checking on those buffer operations. Finally, the adversary must have the capability to influence the input that guides these buffer operations.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-541-ApplicationFingerprinting">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-224-Fingerprinting"/>
		<rdfs:label>Application Fingerprinting</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">An adversary engages in fingerprinting activities to determine the type or version of an application installed on a remote target.
+ Attack Prerequisites

    None</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-542-TargetedMalware">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-549-LocalExecutionOfCode"/>
		<rdfs:label>Targeted Malware</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An adversary develops targeted malware that takes advantage of a known vulnerability in an organizational information technology environment. The malware crafted for these attacks is based specifically on information gathered about the technology environment. Successfully executing the malware enables an adversary to achieve a wide variety of negative technical impacts.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-543-CounterfeitWebsites">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-194-FakeTheSourceOfData"/>
		<rdfs:label>Counterfeit Websites</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

Adversary creates duplicates of legitimate websites. When users visit a counterfeit site, the site can gather information or upload malware.
+ Attack Prerequisites

    None</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-544-CounterfeitOrganizations">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-194-FakeTheSourceOfData"/>
		<rdfs:label>Counterfeit Organizations</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An adversary creates a false front organizations with the appearance of a legitimate supplier in the critical life cycle path that then injects corrupted/malicious information system components into the organizational supply chain.
+ Attack Prerequisites

    None</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-545-PullDataFromSystemResources">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-116-Excavation"/>
		<rdfs:label>Pull Data From System Resources</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An adversary who is authorized or has the ability to search known system resources, does so with the intention of gathering useful information. System resources include files, memory, and other aspects of the target system. In this pattern of attack, the adversary does not necessarily know what they are going to find when they start pulling data. This is different than CAPEC-150 where the adversary knows what they are looking for due to the common location.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-546-ProbeApplicationMemory">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-545-PullDataFromSystemResources"/>
		<rdfs:label>Probe Application Memory</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An adversary obtains unauthorized information due to insecure or incomplete data deletion in a multi-tenant environment. (e.g., in a cloud computing environment)</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-547-PhysicalDestructionOfDeviceOrComponent">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-607-Obstruction"/>
		<rdfs:label>Physical Destruction Of Device Or Component</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An adversary conducts a physical attack a device or component, destroying it such that it no longer functions as intended.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-548-ContaminateResource">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Contaminate Resource</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An adversary contaminates organizational information systems (including devices and networks) by causing them to handle information of a classification/sensitivity for which they have not been authorized. The information is exposed to individuals who are not authorized access to such information, and the information system, device, or network is unavailable while the spill is investigated and mitigated.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-549-LocalExecutionOfCode">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Local Execution Of Code</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An adversary installs and executes malicious code on the target system in an effort to achieve a negative technical impact.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-55-RainbowTablePasswordCracking">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-49-PasswordBruteForcing"/>
		<rdfs:label>Rainbow Table Password Cracking</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker gets access to the database table where hashes of passwords are stored. He then uses a rainbow table of pre-computed hash chains to attempt to look up the original password. Once the original password corresponding to the hash is obtained, the attacker uses the original password to gain access to the system.

A password rainbow table stores hash chains for various passwords. A password chain is computed, starting from the original password, P, via a reduce(compression) function R and a hash function H. A recurrence relation exists where Xi+1 = R(H(Xi)), X0 = P. Then the hash chain of length n for the original password P can be formed: X1, X2, X3, ... , Xn-2, Xn-1, Xn, H(Xn). P and H(Xn) are then stored together in the rainbow table.

Constructing the rainbow tables takes a very long time and is computationally expensive. A separate table needs to be constructed for the various hash algorithms (e.g. SHA1, MD5, etc.). However, once a rainbow table is computed, it can be very effective in cracking the passwords that have been hashed without the use of salt.
+ Attack Prerequisites

    Hash of the original password is available to the attacker. For a better chance of success, an attacker should have more than one hash of the original password, and ideally the whole table.

    Salt was not used to create the hash of the original password. Otherwise the rainbow tables have to be re-computed, which is very expensive and will make the attack effectively infeasible (especially if salt was added in iterations).

    The system uses one factor password based authentication.

+ Solutions and Mitigations

Use salt when computing password hashes. That is, concatenate the salt (random bits) with the original password prior to hashing it.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-550-InstallNewService">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-542-TargetedMalware"/>
		<rdfs:label>Install New Service</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

When an operating system starts, it also starts programs called services or daemons. Adversaries may install a new service which will be executed at startup (on a Windows system, by modifying the registry). The service name may be disguised by using a name from a related operating system or benign software. Services are usually run with elevated privileges.
+ Solutions and Mitigations

Limit privileges of user accounts so new service creation can only be performed by authorized administrators.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-551-ModifyExistingService">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-542-TargetedMalware"/>
		<rdfs:label>Modify Existing Service</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

When an operating system starts, it also starts programs called services or daemons. Modifying existing services may break existing services or may enable services that are disabled/not commonly used.
+ Solutions and Mitigations

Limit privileges of user accounts so service changes can only be performed by authorized administrators. Also monitor any service changes that may occur inadvertently.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-552-InstallRootkit">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-542-TargetedMalware"/>
		<rdfs:label>Install Rootkit</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

A hypervisor is a software layer that sits between the operating system and the processor. It presents a virtual running environment to the operating system. An example of a common hypervisor is Xen. Because a hypervisor operates at a level below the operating system it can hide its existence from the operating system.
+ Solutions and Mitigations

Prevent adversary access to privileged accounts necessary to install a hypervisor rootkit.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-554-FunctionalityBypass">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Functionality Bypass</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An adversary attacks a system by bypassing some or all functionality intended to protect it. Often, a system user will think that protection is in place, but the functionality behind those protections has been disabled by the adversary.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-555-RemoteServicesWithStolenCredentials">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-560-UseOfKnownDomainCredentials"/>
		<rdfs:label>Remote Services With Stolen Credentials</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An adversary leverages remote services such as RDP, telnet, SSH, and VNC to log into a system with stolen credentials.
+ Solutions and Mitigations

Disable RDP, telnet, SSH and enable firewall rules to block such traffic. Limit users and accounts that have remote interactive login access. Remove the Local Administrators group from the list of groups allowed to login through RDP. Limit remote user permissions. Use remote desktop gateways and multifactor authentication for remote logins.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-556-ReplaceFileExtensionHandlers">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-542-TargetedMalware"/>
		<rdfs:label>Replace File Extension Handlers</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

When a file is opened, its file handler is checked to determine which program opens the file. File handlers are configuration properties of many operating systems. Applications can modify the file handler for a given file extension to call an arbitrary program when a file with the given extension is opened.
+ Solutions and Mitigations

Inspect registry for changes. Limit privileges of user accounts so changes to default file handlers can only be performed by authorized administrators.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-557-ScheduleSoftwareToRun">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-542-TargetedMalware"/>
		<rdfs:label>Schedule Software To Run</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

It is possible to schedule software to be run at a time in the future (Windows commands &quot;at&quot; and &quot;schtasks&quot;, along with the Windows Task Scheduler, cron in UNIX-based systems). Task scheduling may be used to execute programs on a scheduled basis to for various malicious purposes.
+ Solutions and Mitigations

Disable the execution scheduler commands. Limit the privileges of user accounts so scheduled task creation and modification can only be performed by authorized administrators.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-558-ReplaceTrustedExecutable">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-542-TargetedMalware"/>
		<rdfs:label>Replace Trusted Executable</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker replaces replaces a trusted executable to allow for the execution of malware when that trusted executable is called.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-560-UseOfKnownDomainCredentials">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-21-ExploitationOfTrustedCredentials"/>
		<rdfs:label>Use Of Known Domain Credentials</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An adversary uses stolen credentials (e.g., userid and password) to access systems managed under the same credential framework on a local network. Often, users are allowed to login to connected machines using the same password. Discovery of the password on one machine allows for lateral movement to those machines.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-561-WindowsAdminSharesWithStolenCredentials">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-560-UseOfKnownDomainCredentials"/>
		<rdfs:label>Windows Admin Shares With Stolen Credentials</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

Windows systems have hidden network shares that are only accessible to administrators and allow files to be written to the local computer. Example network shares include: C$, ADMIN$ and IPC$. Adversaries may use valid administrator credentials to remotely access a network share to transfer files and execute code. It is possible for adversaries to use NTLM hashes to access administrator shares on systems with certain configuration and patch levels.
+ Solutions and Mitigations

Do not reuse local administrator account passwords across systems. Ensure password complexity and uniqueness such that the passwords cannot be cracked or guessed. Deny remote use of local admin credentials to log into systems. Do not allow accounts to be a local administrator on more than one system.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-562-ModifySharedFile">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-17-AccessingModifyingOrExecutingExecutableFiles"/>
		<rdfs:label>Modify Shared File</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An adversary manipulates the files in a shared location by adding malicious programs, scripts, or exploit code to valid content. Once a user opens the shared content, the tainted content is executed.
+ Solutions and Mitigations

Disallow shared content. Protect shared folders by minimizing users that have write access. Use utilities that mitigate exploitation like the Microsoft Enhanced Mitigation Experience Toolkit (EMET) to prevent exploits from being run.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-563-AddMaliciousFileToSharedWebroot">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-17-AccessingModifyingOrExecutingExecutableFiles"/>
		<rdfs:label>Add Malicious File To Shared Webroot</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An adversaries may add malicious content to a website through the open file share and then browse to that content with a web browser to cause the server to execute the content. The malicious content will typically run under the context and permissions of the web server process, often resulting in local system or administrative privileges depending on how the web server is configured.
+ Solutions and Mitigations

Ensure proper permissions on directories that are accessible through a web server. Disallow remote access to the web root. Disable execution on directories within the web root. Ensure that permissions of the web server process are only what is required by not using built-in accounts and instead create specific accounts to limit unnecessary access or permissions overlap across multiple systems.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-564-RunSoftwareAtLogon">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-542-TargetedMalware"/>
		<rdfs:label>Run Software At Logon</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

Operating system allows logon scripts to be run whenever a specific user or users logon to a system. If adversaries can access these scripts, they may insert additional code into the logon script. This code can allow them to maintain persistence or move laterally within an enclave because it is executed every time the affected user or users logon to a computer. Modifying logon scripts can effectively bypass workstation and enclave firewalls. Depending on the access configuration of the logon scripts, either local credentials or a remote administrative account may be necessary.
+ Solutions and Mitigations

Restrict write access to logon scripts to necessary administrators.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-566-DumpPasswordHashes">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-567-ObtainDataViaUtilities"/>
		<rdfs:label>Dump Password Hashes</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An adversary obtains a collection of password hashes through the use of automated utilities designed specifically for gathering this type of information. Examples of credential dumpers include: pwdump7, Windows Credential Editor, Mimikatz, and gsecdump.

Current credential dumpers access the LSASS process to obtain credentials through a process open and may inject code into that process. A malicious process may inject into a process that is known to frequently access LSASS beforehand to evade whitelisting. NTLM hash dumpers open the Security Accounts Manager (SAM) on the local file system (%SystemRoot%/system32/config/SAM) to access stored account password hashes. Some hash dumpers will open the local file system as a device and parse to the SAM table to avoid file access defenses. Others will make an in memory copy of the SAM table before reading hashes.

Excavated credential data is often moved from the target system to some other adversary controlled system. Data found on a target system (e.g., hashes) might require extensive resources to be fully analyzed. Using these resources on the target system might enable a defender to detect the adversary. Additionally, proper analysis tools required might not be available on the target system.
+ Attack Prerequisites

    An adversary has the ability use or install the desired tools.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-567-ObtainDataViaUtilities">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-116-Excavation"/>
		<rdfs:label>Obtain Data Via Utilities</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

In this type of attack, information useful to adversaries in launching follow-on attacks is obtained through the use of helper tools or utilities. The utilities often gather information through well-known and documented system functionality, but can also exploit flaws in the system to retrieve information that is not meant to be obtainable. The information is gathered up and delivered to the adversary so that analysis can be performed.

Examples of such utilities include: pwdump7, Windows Credential Editor, Mimikatz, and gsecdump. Many of these utilities are in use by both professional security testers and adversaries.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-568-CaptueCredentialsViaKeylogger">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-569-CollectDataAsProvidedByUsers"/>
		<rdfs:label>Captue Credentials Via Keylogger</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An adversary deploys a keylogger in an effort to obtain credentials directly from a system&apos;s user. After capturing all the keystrokes made by a user, the adversary can analyze the data and determine which string are likely to be passwords or other credential related information.
+ Attack Prerequisites

    The ability to install the keylogger, either in person or remote.

+ Solutions and Mitigations

Strong physical security can help reduce the ability of an adversary to install a keylogger.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-569-CollectDataAsProvidedByUsers">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-116-Excavation"/>
		<rdfs:label>Collect Data As Provided By Users</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker leverages a tool, device, or program to obtain specific information as provided by a user of the target system. This information is often needed by the attacker to launch a follow-on attack. This attack is different than Social Engineering as the adversary is not tricking or deceiving the user. Instead the adversary is putting a mechanism in place that captures the information that a user legitimately enters into a system. Deploying a keylogger, performing a UAC prompt, or wrapping the Windows default credential provider are all examples of such interactions.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-57-UtilizingRESTsTrustInTheSystemResourceToRegisterManInTheMiddle">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-94-ManInTheMiddleAttack"/>
		<rdfs:label>Utilizing RESTs Trust In The System Resource To Register Man In The Middle</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

This attack utilizes a REST(REpresentational State Transfer)-style applications&apos; trust in the system resources and environment to place man in the middle once SSL is terminated. Rest applications premise is that they leverage existing infrastructure to deliver web services functionality. An example of this is a Rest application that uses HTTP Get methods and receives a HTTP response with an XML document. These Rest style web services are deployed on existing infrastructure such as Apache and IIS web servers with no SOAP stack required. Unfortunately from a security standpoint, there frequently is no interoperable identity security mechanism deployed, so Rest developers often fall back to SSL to deliver security. In large data centers, SSL is typically terminated at the edge of the network - at the firewall, load balancer, or router. Once the SSL is terminated the HTTP request is in the clear (unless developers have hashed or encrypted the values, but this is rare). The attacker can utilize a sniffer such as Wireshark to snapshot the credentials, such as username and password that are passed in the clear once SSL is terminated.

Once the attacker gathers these credentials, they can submit requests to the web service provider just as authorized user do. There is not typically an authentication on the client side, beyond what is passed in the request itself so once this is compromised, then this is generally sufficient to compromise the service&apos;s authentication scheme.
+ Attack Prerequisites

    Opportunity to intercept must exist beyond the point where SSL is terminated.

    The attacker must be able to insert a listener actively (proxying the communication) or passively (sniffing the communication) in the client-server communication path.

+ Solutions and Mitigations

Implementation: Implement message level security such as HMAC in the HTTP communication

Design: Utilize defense in depth, do not rely on a single security mechanism like SSL

Design: Enforce principle of least privilege</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-570-SignatureBasedAvoidance">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-148-ContentSpoofing"/>
		<rdfs:label>Signature Based Avoidance</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

Software packing is a method of compressing or encrypting an executable. The act of packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Utilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques to evade defenses that do not leave the same artifacts as well-known packers.
+ Solutions and Mitigations

Ensure updated virus definitions. Create custom signatures for observed malware. Employ heuristic-based malware detection.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-571-BlockLoggingToCentralRepository">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-161-InfrastructureManipulation"/>
		<rdfs:label>Block Logging To Central Repository</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An adversary may attempt to block indicators from leaving the host machine. In the case of network based reporting of indicators, an adversary may block traffic associated with reporting to prevent central station analysis. This may be accomplished by many means such as stopping a local process to creating a host-based firewall rule to block traffic to a specific server.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-572-ArtificiallyInflateFileSizes">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-148-ContentSpoofing"/>
		<rdfs:label>Artificially Inflate File Sizes</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

Security tools often inspect executables to determine if they are malicious. Adversaries may add data to executables to increase the executable size beyond what security tools are capable of handling. Adding data to an executable also changes the file&apos;s hash, frustrating security tools that look for known bad files by their hash.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-573-ProcessFootprinting">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-169-Footprinting"/>
		<rdfs:label>Process Footprinting</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

Adversaries may attempt to get information about running processes. An example Windows command that would display information about processes is &quot;tasklist&quot;.
+ Solutions and Mitigations

Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by process whitelisting.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-574-ServicesFootprinting">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-169-Footprinting"/>
		<rdfs:label>Services Footprinting</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

Adversaries may try to get information about registered services. Window commands that may obtain information about services are &quot;sc&quot; and &quot;net start&quot;.
+ Solutions and Mitigations

Identify programs that may be used to acquire service information and block them by using a software restriction policy or tools that restrict program execution by process whitelisting.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-575-AccountFootprinting">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-169-Footprinting"/>
		<rdfs:label>Account Footprinting</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

Adversaries may attempt to get a listing of all local or domain accounts and their permissions. Example Windows commands which can acquire this information are: &quot;net user&quot; and &quot;dsquery&quot;.
+ Solutions and Mitigations

Identify programs that may be used to acquire account information and block them by using a software restriction policy or tools that restrict program execution by process whitelisting.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-576-GroupPermissionFootprinting">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-169-Footprinting"/>
		<rdfs:label>Group Permission Footprinting</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

Adversaries may get a listing of all local groups and their permissions and members. An example Windows command which can list local groups is &quot;net localgroup&quot;.
+ Solutions and Mitigations

Identify programs (such as &quot;net&quot;) that may be used to enumerate local group permissions and block them by using a software restriction Policy or tools that restrict program execution by process whitelisting.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-577-OwnerFootprinting">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-169-Footprinting"/>
		<rdfs:label>Owner Footprinting</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

Adversaries may attempt to identify the primary users of the system. They may do this, for example, by reviewing logins or file modification times. An example Windows command that may accomplish this is &quot;dir /A ntuser.dat&quot;. Which will display the last modified time of a user&apos;s ntuser.dat file when run within the root folder of a user. This time is synonymous with the last time that user was logged in. Administrator permissions are required to view the home folder of other users.
+ Solutions and Mitigations

Ensure that proper permissions on files and folders are enacted to limit accessibility.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-578-DisableSecuritySoftware">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-176-ConfigurationEnvironmentManipulation"/>
		<rdfs:label>Disable Security Software</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

Adversaries may disable security tools so that detection does not occur. This can take the form of killing processes, deleting registry keys so that tools do not start at run time, deleting log files, or other methods.
+ Solutions and Mitigations

Ensure proper registry and file permissions are in place.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-579-ReplaceWinlogonHelperDLL">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-542-TargetedMalware"/>
		<rdfs:label>Replace Winlogon Helper DLL</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

Winlogon is a part of Windows that performs logon actions. In Windows systems prior to Windows Vista, a registry key can be modified that causes Winlogon to load a DLL on startup. Adversaries may take advantage of this feature to load adversarial code at startup.
+ Solutions and Mitigations

Changes to registry entries in &quot;HKLM\Software\Microsoft\Windows NT\Winlogon\Notify&quot; that do not correlate with known software, patch cycles, etc are suspicious. New DLLs written to System32 which do not correlate with known good software or patching may be suspicious.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-58-RestfulPrivilegeElevation">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-1-AccessingFunctionalityNotProperlyConstrainedByACLs"/>
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-233-PrivilegeEscalation"/>
		<rdfs:label>Restful Privilege Elevation</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

Rest uses standard HTTP (Get, Put, Delete) style permissions methods, but these are not necessarily correlated generally with back end programs. Strict interpretation of HTTP get methods means that these HTTP Get services should not be used to delete information on the server, but there is no access control mechanism to back up this logic. This means that unless the services are properly ACL&apos;d and the application&apos;s service implementation are following these guidelines then an HTTP request can easily execute a delete or update on the server side.

The attacker identifies a HTTP Get URL such as http://victimsite/updateOrder, which calls out to a program to update orders on a database or other resource. The URL is not idempotent so the request can be submitted multiple times by the attacker, additionally, the attacker may be able to exploit the URL published as a Get method that actually performs updates (instead of merely retrieving data). This may result in malicious or inadvertent altering of data on the server.
+ Attack Prerequisites

    The attacker needs to be able to identify HTTP Get URLs. The Get methods must be set to call applications that perform operations other than get such as update and delete.

+ Solutions and Mitigations

Design: Enforce principle of least privilege

Implementation: Ensure that HTTP Get methods only retrieve state and do not alter state on the server side

Implementation: Ensure that HTTP methods have proper ACLs based on what the functionality they expose</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-580-ApplicationFootprinting">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-169-Footprinting"/>
		<rdfs:label>Application Footprinting</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An adversary engages in active probing and exploration activities to determine the type or version of an application installed on a remote target. This differs from fingerprinting where the attacker&apos;s action is passive through the examination of application output.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-581-SecuritySoftwareFootprinting">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-580-ApplicationFootprinting"/>
		<rdfs:label>Security Software Footprinting</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

Adversaries may attempt to get a listing of security tools that are installed on the system and their configurations. This may include security related system features (such as a built-in firewall or anti-spyware) as well as third-party security software.
+ Solutions and Mitigations

Identify programs that may be used to acquire security tool information and block them by using a software restriction policy or tools that restrict program execution by process whitelisting.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-59-SessionCredentialFalsificationThroughPrediction">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-196-SessionCredentialFalsificationThroughForging"/>
		<rdfs:label>Session Credential Falsification Through Prediction</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

This attack targets predictable session ID in order to gain privileges. The attacker can predict the session ID used during a transaction to perform spoofing and session hijacking.
+ Attack Prerequisites

    The target host uses session IDs to keep track of the users.

    Session IDs are used to control access to resources.

    The session IDs used by the target host are predictable. For example, the session IDs are generated using predictable information (e.g., time).

+ Solutions and Mitigations

Use a strong source of randomness to generate a session ID.

Use adequate length session IDs

Do not use information available to the user in order to generate session ID (e.g., time).

Ideas for creating random numbers are offered by Eastlake [RFC1750]

Encrypt the session ID if you expose it to the user. For instance session ID can be stored in a cookie in encrypted format.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-594-TrafficInjection">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Traffic Injection</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An adversary injects traffic into the targets connection. The attacker is therefore able to degrade or disrupt the connection, and potentially modify the content. This is not a flooding attack, as the attacker is not focusing on exhausting resources. Instead, he is crafting a specific input to affect the system in a particular way.
+ Attack Prerequisites

    The target application must permit raw socket connections.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-595-ConnectionReset">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-594-TrafficInjection"/>
		<rdfs:label>Connection Reset</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

In this attack pattern, an adversary injects a connection reset packet to one or both ends of a target&apos;s connection. The attacker is therefore able to have the target and/or the destination server sever the connection without having to directly filter the traffic between them.
+ Attack Prerequisites

    This attack requires the ability to monitor the target&apos;s network connection.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-596-TCPRSTInjection">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-595-ConnectionReset"/>
		<rdfs:label>TCP RST Injection</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An adversary injects one or more TCP RST packets to a target after the target has made a HTTP GET request. The goal of this attack is to have the target and/or destination web server terminate the TCP connection.
+ Attack Prerequisites

    An On/In Path Device</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-597-AbsolutePathTraversal">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-126-PathTraversal"/>
		<rdfs:label>Absolute Path Traversal</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An adversary with access to file system resources, either directly or via application logic, will use various file absolute paths and navigation mechanisms such as &quot;..&quot; to extend their range of access to inappropriate areas of the file system. The goal of the adversary is to access directories and files that are intended to be restricted from their access.
+ Attack Prerequisites

    The target must leverage and access an underlying file system.

+ Solutions and Mitigations

Design: Configure the access control correctly.

Design: Enforce principle of least privilege.

Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.

Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.

Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.

Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.

Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.

Implementation: Perform input validation for all remote content, including remote and user-generated content.

Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.

Implementation: Use indirect references rather than actual file names.

Implementation: Use possible permissions on file access when developing and deploying web applications.

Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- whitelisting approach.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-598-DNSSpoofing">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-194-FakeTheSourceOfData"/>
		<rdfs:label>DNS Spoofing</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An adversary sends a malicious (&quot;NXDOMAIN&quot; (&quot;No such domain&quot;) code, or DNS A record) response to a targets route request before a legitimate resolver can. This technique requires an On-path or In-path device that can monitor and respond to the targets DNS requests. This attack differs from BGP Tampering in that it directly responds to requests made by the target instead of polluting the routing the targets infrastructure uses.
+ Attack Prerequisites

    On/In Path Device

+ Solutions and Mitigations

Design: Avoid dependence on DNS

Design: Include &quot;hosts file&quot;/IP address in the application

Implementation: Utilize a .onion domain with Tor support

Implementation: DNSSEC

Implementation: DNS-hold-open</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-6-ArgumentInjection">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-137-ParameterInjection"/>
		<rdfs:label>Argument Injection</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker changes the behavior or state of a targeted application through injecting data or command syntax through the targets use of non-validated and non-filtered arguments of exposed services or methods.
+ Attack Prerequisites

    Target software fails to strip all user-supplied input of any content that could cause the shell to perform unexpected actions.

    Software must allow for unvalidated or unfiltered input to be executed on operating system shell, and, optionally, the system configuration must allow for output to be sent back to client.

+ Solutions and Mitigations

Design: Do not program input values directly on command shell, instead treat user input as guilty until proven innocent. Build a function that takes user input and converts it to applications specific types and values, stripping or filtering out all unauthorized commands and characters in the process.

Design: Limit program privileges, so if metacharacters or other methods circumvent program input validation routines and shell access is attained then it is not running under a privileged account. chroot jails create a sandbox for the application to execute in, making it more difficult for an attacker to elevate privilege even in the case that a compromise has occurred.

Implementation: Implement an audit log that is written to a separate host, in the event of a compromise the audit log may be able to provide evidence and details of the compromise.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-60-ReusingSessionIDsAkaSessionReplay">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-21-ExploitationOfTrustedCredentials"/>
		<rdfs:label>Reusing Session IDs aka Session Replay</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">entation Filter:
+ Summary

This attack targets the reuse of valid session ID to spoof the target system in order to gain privileges. The attacker tries to reuse a stolen session ID used previously during a transaction to perform spoofing and session hijacking. Another name for this type of attack is Session Replay.
+ Attack Prerequisites

    The target host uses session IDs to keep track of the users.

    Session IDs are used to control access to resources.

    The session IDs used by the target host are not well protected from session theft.

+ Solutions and Mitigations

Always invalidate a session ID after the user logout.

Setup a session time out for the session IDs.

Protect the communication between the client and server. For instance it is best practice to use SSL to mitigate man in the middle attack.

Do not code send session ID with GET method, otherwise the session ID will be copied to the URL. In general avoid writing session IDs in the URLs. URLs can get logged in log files, which are vulnerable to an attacker.

Encrypt the session data associated with the session ID.

Use multifactor authentication.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:null</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-601-Jamming">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-607-Obstruction"/>
		<rdfs:label>Jamming</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An adversary uses radio noise or signals in an attempt to disrupt communications.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-603-Blockage">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-607-Obstruction"/>
		<rdfs:label>Blockage</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An adversary blocks the delivery of an important system resource causing the system to fail or stop working.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-604-WiFiJamming">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-601-Jamming"/>
		<rdfs:label>WiFi Jamming</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

In this attack scenario, the attacker actively transmits on the Wi-Fi channel to prevent users from transmitting or receiving data from the targeted Wi-Fi network. There are several known techniques to perform this attack – for example: the attacker may flood the Wi-Fi access point (e.g. the retransmission device) with deauthentication frames. Another method is to transmit high levels of noise on the RF band used by the Wi-Fi network.
+ Attack Prerequisites

    Lack of anti-jam features in 802.11

    Lack of authentication on deauthentication/disassociation packets on 802.11-based networks

+ Solutions and Mitigations

Countermeasures have been proposed for both disassociation flooding and RF jamming, however these cou</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-605-CellularJamming">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-601-Jamming"/>
		<rdfs:label>CellularJamming</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

In this attack scenario, the attacker actively transmits signals to overpower and disrupt the communication between a cellular user device and a cell tower. Several existing techniques are known in the open literature for this attack for 2G, 3G, and 4G LTE cellular technology. For example, some attacks target cell towers by overwhelming them with false status messages, while others introduce high levels of noise on signaling channels.
+ Attack Prerequisites

    Lack of anti-jam features in cellular technology (2G, 3G, 4G, LTE)

+ Solutions and Mitigations

Mitigating this attack requires countermeasures employed on both the retransmission device as well as on the cell tower. Therefore, any system that relies on existing commercial cell towards will likely be vulnerable to this attack. By using a private cellular LTE network (i.e., a custom cell tower), jamming countermeasures could be developed and employed.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-606-WeakeningOfCellularEncryption">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-620-DropEncryptionLevel"/>
		<rdfs:label>Weakening Of Cellular Encryption</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker, with control of a Cellular Rogue Base Station or through cooperation with a Malicious Mobile Network Operator can force the mobile device (e.g., the retransmission device) to use no encryption (A5/0 mode) or to use easily breakable encryption (A5/1 or A5/2 mode).
+ Attack Prerequisites

    Cellular devices that allow negotiating security modes to facilitate backwards compatibility and roaming on legacy networks.

+ Solutions and Mitigations

Use of hardened baseband firmware on retransmission device to detect and prevent the use of weak cellular encryption.

Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-607-Obstruction">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Obstruction</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker obstructs the interactions between system components. By interrupting or disabling these interactions, an adversary can often force the system into a degraded state or even a failure more.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-608-CryptanalysisOfCellularEncryption">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-97-Cryptanalysis"/>
		<rdfs:label>Cryptanalysis Of Cellular Encryption</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

The use of cryptanalytic techniques to derive cryptographic keys or otherwise effectively defeat cellular encryption to reveal traffic content. Some cellular encryption algorithms such as A5/1 and A5/2 (specified for GSM use) are known to be vulnerable to such attacks and commercial tools are available to execute these attacks and decrypt mobile phone conversations in real-time. Newer encryption algorithms in use by UMTS and LTE are stronger and currently believed to be less vulnerable to these types of attacks. Note, however, that an attacker with a Cellular Rogue Base Station can force the use of weak cellular encryption even by newer mobile devices.
+ Attack Prerequisites

    None

+ Solutions and Mitigations

Use of hardened baseband firmware on retransmission device to detect and prevent the use of weak cellular encryption.

Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-609-CellularTrafficIntercept">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-157-SniffingAttacks"/>
		<rdfs:label>Cellular Traffic Intercept</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

Cellular traffic for voice and data from mobile devices and retransmission devices can be intercepted via numerous methods. Malicious actors can deploy their own cellular tower equipment and intercept cellular traffic surreptitiously. Additionally, government agencies of adversaries and malicious actors can intercept cellular traffic via the telecommunications backbone over which mobile traffic is transmitted.
+ Attack Prerequisites

    None

+ Solutions and Mitigations

Encryption of all data packets emanating from the smartphone to a retransmission device via two encrypted tunnels with Suite B cryptography, all the way to the VPN gateway at the datacenter.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-61-SessionFixation">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-21-ExploitationOfTrustedCredentials"/>
		<rdfs:label>Session Fixation</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

The attacker induces a client to establish a session with the target software using a session identifier provided by the attacker. Once the user successfully authenticates to the target software, the attacker uses the (now privileged) session identifier in their own transactions. This attack leverages the fact that the target software either relies on client-generated session identifiers or maintains the same session identifiers after privilege elevation.
+ Attack Prerequisites

    Session identifiers that remain unchanged when the privilege levels change.

    Permissive session management mechanism that accepts random user-generated session identifiers

    Predictable session identifiers

+ Solutions and Mitigations

Use a strict session management mechanism that only accepts locally generated session identifiers: This prevents attackers from fixating session identifiers of their own choice.

Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes.

Use session identifiers that are difficult to guess or brute-force: One way for the attackers to obtain valid session identifiers is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-610-CellularDataInjection">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-240-ResourceInjection"/>
		<rdfs:label>Cellular Data Injection</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

Adversaries inject data into mobile technology traffic (data flows or signaling data) to disrupt communications or conduct additional surveillance operations.
+ Attack Prerequisites

    None

+ Solutions and Mitigations

Commercial defensive technology to detect and alert to any attempts to modify mobile technology data flows or to inject new data into existing data flows and signaling data.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-611-BitSquatting">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-616-PatientlyWaitingAtIncorrectLocation"/>
		<rdfs:label>BitSquatting</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

Bitsquatting refers to the registration of a domain names one bit different than a popular domain. A bitsquatting attack leverages random errors in memory to direct Internet traffic to attacker-controlled destinations. Bitsquatting requires no exploitation or complicated reverse engineering, and is operating system and architecture agnostic. Experimental observations show that bitsquatting popular websites could redirect non-trivial amounts of Internet traffic to a malicious entity.
+ Attack Prerequisites

    None

+ Solutions and Mitigations

Authenticate all servers and perform redundant checks when using DNS hostnames.

When possible, use error-correcting (ECC) memory in local devices as non-ECC memory is significantly more vulnerable to faults.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-612-WiFiMACAddressTracking">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-292-HostDiscovery"/>
		<rdfs:label>WiFi MAC Address Tracking</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

In this attack scenario, the attacker passively listens for WiFi messages and logs the associated Media Access Control (MAC) addresses. These addresses are intended to be unique to each wireless device (although they can be configured and changed by software). Once the attacker is able to associate a MAC address with a particular user or set of users (for example, when attending a public event), the attacker can then scan for that MAC address to track that user in the future.
+ Attack Prerequisites

    None

+ Solutions and Mitigations

Automatic randomization of WiFi MAC addresses

Frequent changing of handset and retransmission device</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-613-WiFiSSIDTracking">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-292-HostDiscovery"/>
		<rdfs:label>WiFi SSID Tracking</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

In this attack scenario, the attacker passively listens for WiFi management frame messages containing the Service Set Identifier (SSID) for the WiFi network. These messages are frequently transmitted by WiFi access points (e.g., the retransmission device) as well as by clients that are accessing the network (e.g., the handset/mobile device). Once the attacker is able to associate an SSID with a particular user or set of users (for example, when attending a public event), the attacker can then scan for this SSID to track that user in the future.
+ Attack Prerequisites

    None

+ Solutions and Mitigations

Do not enable the feature of &quot;Hidden SSIDs” (also known as “Network Cloaking”) – this option disables the usual broadcasting of the SSID by the access point, but forces the mobile handset to send requests on all supported radio channels which contains the SSID. The result is that tracking of the mobile device becomes easier since it is transmitting the SSID more frequently.

Frequently change the SSID to new and unrelated values</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-614-RootingSIMCards">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-186-MaliciousSoftwareUpdate"/>
		<rdfs:label>Rooting SIM Cards</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

SIM cards are the de facto trust anchor of mobile devices worldwide. The cards protect the mobile identity of subscribers, associate devices with phone numbers, and increasingly store payment credentials, for example in NFC-enabled phones with mobile wallets. This attack leverages over-the-air (OTA) updates deployed via cryptographically-secured SMS messages to deliver executable code to the SIM. By cracking the DES key, an attacker can send properly signed binary SMS messages to a device, which are treated as Java applets and are executed on the SIM. These applets are allowed to send SMS, change voicemail numbers, and query the phone location, among many other predefined functions. These capabilities alone provide plenty of potential for abuse.
+ Attack Prerequisites

    A SIM card that relies on the DES cipher.

+ Solutions and Mitigations

Upgrade the SIM card to use the state-of-the-art AES or the somewhat outdated 3DES algorithm for OTA.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-615-EvilTwinWiFiAttack">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-616-PatientlyWaitingAtIncorrectLocation"/>
		<rdfs:label>Evil Twin WiFi Attack</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

Adversaries install Wi-Fi equipment that acts as a legitimate Wi-Fi network access point. When a device connects to this access point, Wi-Fi data traffic is intercepted, captured, and analyzed. This also allows the adversary to act as a “man-in-the-middle” for all communications.
+ Attack Prerequisites

    None

+ Solutions and Mitigations

Commercial defensive technology that monitors for rogue Wi-Fi access points, man-in-the-middle attacks, and anomalous activity with the mobile device baseband radios.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-616-PatientlyWaitingAtIncorrectLocation">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-154-ResourceLocationSpoofing"/>
		<rdfs:label>Patiently Waiting At Incorrect Location</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

This pattern or attack covers applications that mistakenly look for a resource in an incorrect location. An adversary understands that this could happen,provides a malicious resource at the incorrect location, and then waits for the user to visit that location.
+ Attack Prerequisites

    None</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-617-CellularRogueBaseStation">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-616-PatientlyWaitingAtIncorrectLocation"/>
		<rdfs:label>Cellular Rogue Base Station</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

In this attack scenario, the attacker imitates a cellular base station with his own “rogue” base station equipment. Since cellular devices connect to whatever station has the strongest signal, the attacker can easily convince a targeted cellular device (e.g. the retransmission device) to talk to the rogue base station.
+ Attack Prerequisites

    None

+ Solutions and Mitigations

Passively monitor cellular network connection for real-time threat detection and logging for manual review.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:null</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-618-CellularBroadcastMessageRequest">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-292-HostDiscovery"/>
		<rdfs:label>Cellular Broadcast Message Request</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

In this attack scenario, the attacker uses knowledge of the target’s mobile phone number (i.e., the number associated with the SIM used in the retransmission device) to cause the cellular network to send broadcast messages to alert the mobile device. Since the network knows which cell tower the target’s mobile device is attached to, the broadcast messages are only sent in the Location Area Code (LAC) where the target is currently located. By triggering the cellular broadcast message and then listening for the presence of absence of that message, an attacker could verify that the target is in (or not in) a given location.
+ Attack Prerequisites

    The attacker must have knowledge of the target’s mobile phone number.

+ Solutions and Mitigations

Frequent changing of mobile number.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-619-SignalStrengthTracking">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-292-HostDiscovery"/>
		<rdfs:label>Signal Strength Tracking</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

In this attack scenario, the attacker passively monitors the signal strength of the target’s cellular RF signal or WiFi RF signal and uses the strength of the signal (with directional antennas and/or from multiple listening points at once) to identify the source location of the signal. Obtaining the signal of the target can be accomplished through multiple techniques such as through Cellular Broadcast Message Request or through the use of IMSI Tracking or WiFi MAC Address Tracking.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-62-CrossSiteRequestForgery">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-21-ExploitationOfTrustedCredentials"/>
		<rdfs:label>Cross Site Request Forgery</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker crafts malicious web links and distributes them (via web pages, email, etc.), typically in a targeted manner, hoping to induce users to click on the link and execute the malicious action against some third-party application. If successful, the action embedded in the malicious link will be processed and accepted by the targeted application with the users&apos; privilege level.

This type of attack leverages the persistence and implicit trust placed in user session cookies by many web applications today. In such an architecture, once the user authenticates to an application and a session cookie is created on the user&apos;s system, all following transactions for that session are authenticated using that cookie including potential actions initiated by an attacker and simply &quot;riding&quot; the existing session cookie.
+ Solutions and Mitigations

Use cryptographic tokens to associate a request with a specific action. The token can be regenerated at every request so that if a request with an invalid token is encountered, it can be reliably discarded. The token is considered invalid if it arrived with a request other than the action it was supposed to be associated with.

Although less reliable, the use of the optional HTTP Referrer header can also be used to determine whether an incoming request was actually one that the user is authorized for, in the current context.

Additionally, the user can also be prompted to confirm an action every time an action concerning potentially sensitive data is invoked. This way, even if the attacker manages to get the user to click on a malicious link and request the desired action, the user has a chance to recover by denying confirmation. This solution is also implicitly tied to using a second factor of authentication before performing such actions.

In general, every request must be checked for the appropriate authentication token as well as authorization in the current session context.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-620-DropEncryptionLevel">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-212-FunctionalityMisuse"/>
		<rdfs:label>Drop Encryption Level</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker forces the encryption level to be lowered, thus enabling a successful attack against the encrypted data.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-621-AnalysisOfPacketTimingAndSizes">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-189-BlackBoxReverseEngineering"/>
		<rdfs:label>Analysis Of Packet Timing And Sizes</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker may intercept and log encrypted transmissions for the purpose of analyzing metadata such as packet timing and sizes. Although the actual data may be encrypted, this metadata may reveal valuable information to an attacker. Note that this attack is applicable to VOIP data as well as application data, especially for interactive apps that require precise timing and low-latency (e.g. thin-clients).
+ Attack Prerequisites

    Use of untrusted communication paths enables an attacker to intercept and log communications, including metadata such as packet timing and sizes.

+ Solutions and Mitigations

Distort packet sizes and timing at VPN layer by adding padding to normalize packet sizes and timing delays to reduce information leakage via timing.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-622-ElectromagneticSideChannelAttack">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-189-BlackBoxReverseEngineering"/>
		<rdfs:label>Electromagnetic Side Channel Attack</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

In this attack scenario, the attacker passively monitors electromagnetic emanations that are produced by the targeted electronic device as an unintentional side-effect of its processing. From these emanations, the attacker derives information about the data that is being processed (e.g. the attacker can recover cryptographic keys by monitoring emanations associated with cryptographic processing).

This style of attack requires proximal access to the device, however attacks have been demonstrated at public conferences that work at distances of up to 10-15 feet. There have not been any significant studies to determine the maximum practical distance for such attacks. Since the attack is passive, it is nearly impossible to detect and the targeted device will continue to operate as normal after a successful attack.
+ Attack Prerequisites

    Proximal access to the device.

+ Solutions and Mitigations

Utilize side-channel resistant implementations of all crypto algorithms.

Strong physical security of all devices that contain secret key information. (even when devices are not in use)</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-623-CompromisingEmanationsAttack">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-189-BlackBoxReverseEngineering"/>
		<rdfs:label>Compromising Emanations Attack</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

Compromising Emanations (CE) are defined as unintentional signals which an attacker may intercept and analyze to disclose the information processed by the targeted equipment. Commercial mobile devices and retransmission devices have displays, buttons, microchips, and radios that emit mechanical emissions in the form of sound or vibrations. Capturing these emissions can help an adversary understand what the device is doing.
+ Attack Prerequisites

    Proximal access to the device.

+ Solutions and Mitigations

None are known.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-624-FaultInjection">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Fault Injection</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

Fault injection attacks use disruptive signals or events (e.g. electromagnetic pulses, laser pulses, clock glitches, etc.) to cause faulty behavior in electronic devices. When performed in a controlled manner on devices performing cryptographic operations, this faulty behavior can be exploited to derive secret key information.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-625-MobileDeviceFaultInjection">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-624-FaultInjection"/>
		<rdfs:label>Mobile Device Fault Injection</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

Fault injection attacks against mobile devices use disruptive signals or events (e.g. electromagnetic pulses, laser pulses, clock glitches, etc.) to cause faulty behavior. When performed in a controlled manner on devices performing cryptographic operations, this faulty behavior can be exploited to derive secret key information. Although this attack usually requires physical control of the mobile device, it is non-destructive, and the device can be used after the attack without any indication that secret keys were compromised.
+ Solutions and Mitigations

Strong physical security of all devices that contain secret key information. (even when devices are not in use)

Frequent changes to secret keys and certificates.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-626-SmudgeAttack">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-167-WhiteBoxReverseEngineering"/>
		<rdfs:label>Smudge Attack</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

Attacks that reveal the password/passcode pattern on a touchscreen device by detecting oil smudges left behind by the user’s fingers.
+ Attack Prerequisites

    The attacker must have physical access to the device.

+ Solutions and Mitigations

Strong physical security of the device.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-627-CounterfeitGPSSignals">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-194-FakeTheSourceOfData"/>
		<rdfs:label>Counterfeit GPS Signals</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

This attack attempts to deceive a GPS receiver by broadcasting counterfeit GPS signals, structured to resemble a set of normal GPS signals. These spoofed signals may be structured in such a way as to cause the receiver to estimate its position to be somewhere other than where it actually is, or to be located where it is but at a different time, as determined by the attacker.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-628-CarryOffGPSAttack">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-148-ContentSpoofing"/>
		<rdfs:label>Carry Off GPS Attack</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

A GPS spoofing attack attempts to deceive a GPS receiver by broadcasting counterfeit GPS signals, structured to resemble a set of normal GPS signals, or by rebroadcasting genuine signals captured elsewhere or at a different time. These spoofed signals may be modified in such a way as to cause the receiver to estimate its position to be somewhere other than where it actually is, or to be located where it is but at a different time, as determined by the attacker. One common form of a GPS spoofing attack, commonly termed a carry-off attack begins by broadcasting signals synchronized with the genuine signals observed by the target receiver. The power of the counterfeit signals is then gradually increased and drawn away from the genuine signals.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-629-UnauthorizedUseOfDeviceResources">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-114-AuthenticationAbuse"/>
		<rdfs:label>Unauthorized Use Of Device Resources</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An adversary that has previously obtained unauthorized access to certain device resources, uses that access to obtain information such as location and .</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-63-SimpleScriptInjection">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-242-CodeInjection"/>
		<rdfs:label>Simple Script Injection</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attacker embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users&apos; privilege level.

An attack of this type exploits a programs&apos; vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.
+ Attack Prerequisites

    Target client software must be a client that allows scripting communication from remote hosts, such as a JavaScript-enabled Web Browser

+ Solutions and Mitigations

Design: Use browser technologies that do not allow client side scripting.

Design: Utilize strict type, character, and encoding enforcement

Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client&apos;s browser has no way of discerning where the data is originating from.

Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.

Implementation: Perform input validation for all remote content.

Implementation: Perform output validation for all remote content.

Implementation: Session tokens for specific host

Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-64-UsingSlashesAndURLEncodingCombinedToBypassValidationLogic">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-267-LeverageAlternateEncoding"/>
		<rdfs:label>Using Slashes And URL Encoding Combined To Bypass Validation Logic</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

This attack targets the encoding of the URL combined with the encoding of the slash characters. An attacker can take advantage of the multiple way of encoding an URL and abuse the interpretation of the URL. An URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc.
+ Attack Prerequisites

    The application accepts and decodes URL string request.

    The application performs insufficient filtering/canonicalization on the URLs.

+ Solutions and Mitigations

Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system. Test your decoding process against malicious input.

Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.

When client input is required from web-based forms, avoid using the &quot;GET&quot; method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the &quot;POST method whenever possible.

Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.

Refer to the RFCs to safely decode URL.

Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.

There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-65-SniffApplicationCode">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-157-SniffingAttacks"/>
		<rdfs:label>Sniff Application Code</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An adversary passively sniffs network communications and captures application code bound for an authorized client. Once obtained, they can use it as-is, or through reverse-engineering glean sensitive information or exploit the trust relationship between the client and server. Such code may belong to a dynamic update to the client, a patch being applied to a client component or any such interaction where the client is authorized to communicate with the server.
+ Attack Prerequisites

    The attacker must have the ability to place himself in the communication path between the client and server.

    The targeted application must receive some application code from the server; for example, dynamic updates, patches, applets or scripts.

    The attacker must be able to employ a sniffer on the network without being detected.

+ Solutions and Mitigations

Design: Encrypt all communication between the client and server.

Implementation: Use SSL, SSH, SCP.

Operation: Use &quot;ifconfig/ipconfig&quot; or other tools to detect the sniffer installed in the network.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-66-SQLInjection">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-248-CommandInjection"/>
		<rdfs:label>SQL Injection</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended.

SQL Injection results from failure of the application to appropriately validate input. When specially crafted user-controlled input consisting of SQL syntax is used without proper validation as part of SQL queries, it is possible to glean information from the database in ways not envisaged during application design. Depending upon the database and the design of the application, it may also be possible to leverage injection to have the database execute system-related commands of the attackers&apos; choice. SQL Injection enables an attacker to talk directly to the database, thus bypassing the application completely. Successful injection can cause information disclosure as well as ability to add or modify data in the database. In order to successfully inject SQL and retrieve information from a database, an attacker:
+ Attack Prerequisites

    SQL queries used by the application to store, retrieve or modify data.

    User-controllable input that is not properly validated by the application as part of SQL queries.

+ Solutions and Mitigations

Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(&apos;) or SQL-comments (--) based on the context in which they appear.

Use of parameterized queries or stored procedures - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails. Note that SQL Injection is possible even in the presence of stored procedures if the eventual query is constructed dynamically.

Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-67-StringFormatOverflowInSyslog">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-100-OverflowBuffers"/>
		<rdfs:label>String Format Overflow In Syslog</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

This attack targets the format string vulnerabilities in the syslog() function. An attacker would typically inject malicious input in the format string parameter of the syslog function. This is a common problem, and many public vulnerabilities and associated exploits have been posted.
+ Attack Prerequisites

    The format string argument of the Syslog function can be tainted with user supplied data.

+ Solutions and Mitigations

The code should be reviewed for misuse of the Syslog function call. Manual or automated code review can be used. The reviewer needs to ensure that all format string functions are passed a static string which cannot be controlled by the user and that the proper number of arguments are always sent to that function as well. If at all possible, do not use the %n operator in format strings. The following code shows a correct usage of Syslog():
(Good Code)
 
syslog(LOG_ERR, &quot;%s&quot;, cmdBuf);

The following code shows a vulnerable usage of Syslog():
(Bad Code)
 
syslog(LOG_ERR, cmdBuf);
// the buffer cmdBuff is taking user supplied data.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-68-SubvertCodeSigningFacilities">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-233-PrivilegeEscalation"/>
		<rdfs:label>Subvert Code Signing Facilities</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

Because languages use code signing facilities to vouch for code&apos;s identity and to thus tie code to its assigned privileges within an environment, subverting this mechanism can be instrumental in an attacker escalating privilege.

Any means of subverting the way that a virtual machine enforces code signing classifies for this style of attack. This pattern does not include circumstances through which a signing key has been stolen.
+ Attack Prerequisites

    A framework-based language that supports code signing (such as, and most commonly, Java or .NET)

    Deployed code that has been signed by its authoring vendor, or a partner.

    The attacker will, for most circumstances, also need to be able to place code in the victim container. This does not necessarily mean that they will have to subvert host-level security, except when explicitly indicated.

+ Solutions and Mitigations

A given code signing scheme may be fallible due to improper use of cryptography. Developers must never roll out their own cryptography, nor should existing primitives be modified or ignored.

If an attacker cannot attack the scheme directly, he might try to alter the environment that affects the signing and verification processes. A possible mitigation is to avoid reliance on flags or environment variables that are user-controllable.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-69-TargetProgramsWithElevatedPrivileges">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-233-PrivilegeEscalation"/>
		<rdfs:label>Target Programs With Elevated Privileges</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

This attack targets programs running with elevated privileges. The attacker would try to leverage a bug in the running program and get arbitrary code to execute with elevated privileges. For instance an attacker would look for programs that write to the system directories or registry keys (such as HKLM, which stores a number of critical Windows environment variables). These programs are typically running with elevated privileges and have usually not been designed with security in mind. Such programs are excellent exploit targets because they yield lots of power when they break. The malicious user try to execute its code at the same level as a privileged system call.
+ Attack Prerequisites

    The targeted program runs with elevated OS privileges.

    The targeted program accepts input data from the user or from another program.

    The targeted program does not perform input validation properly.

    The targeted program does not fail safely. For instance when a program fails it may authorize restricted access to anyone.

    The targeted program has a vulnerability such as buffer overflow which may be exploited if a malicious user can inject unvalidated data. For instance a buffer overflow interrupts the program as it executes, and makes it run additional code supplied by the attacker. If the program under attack has elevated privileges to the OS, the attacker can elevate its privileges (such as having root level access).

    The targeted program is giving away information about itself. Before performing such attack, an eventual attacker may need to gather information about the services running on the host target. The more the host target is verbose about the services that are running (version number of application, etc.) the more information can be gather by an attacker.

    This attack often requires communicating with the host target services directly. For instance Telnet may be enough to communicate with the host target.

+ Solutions and Mitigations

Apply the principle of least privilege.

Validate all untrusted data.

Apply the latest patches.

Scan your services and disable the ones which are not needed and are exposed unnecessarily. Exposing programs increases the attack surface. Only expose the services which are needed and have security mechanisms such as authentication built around them.

Avoid revealing information about your system (e.g., version of the program) to anonymous users.

Make sure that your program or service fail safely. What happen if the communication protocol is interrupted suddenly? What happen if a parameter is missing? Does your system have resistance and resilience to attack? Fail safely when a resource exhaustion occurs.

If possible use a sandbox model which limits the actions that programs can take. A sandbox restricts a program to a set of privileges and commands that make it difficult or impossible for the program to cause any damage.

Check your program for buffer overflow and format String vulnerabilities which can lead to execution of malicious code.

Monitor traffic and resource usage and pay attention if resource exhaustion occurs.

Protect your log file from unauthorized modification and log forging.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-7-BlindSQLInjection">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-66-SQLInjection"/>
		<rdfs:label>Blind SQL Injection</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

Blind SQL Injection results from an insufficient mitigation for SQL Injection. Although suppressing database error messages are considered best practice, the suppression alone is not sufficient to prevent SQL Injection. Blind SQL Injection is a form of SQL Injection that overcomes the lack of error messages. Without the error messages that facilitate SQL Injection, the attacker constructs input strings that probe the target through simple Boolean SQL expressions. The attacker can determine if the syntax and structure of the injection was successful based on whether the query was executed or not. Applied iteratively, the attacker determines how and where the target is vulnerable to SQL Injection.

For example, an attacker may try entering something like &quot;username&apos; AND 1=1; --&quot; in an input field. If the result is the same as when the attacker entered &quot;username&quot; in the field, then the attacker knows that the application is vulnerable to SQL Injection. The attacker can then ask yes/no questions from the database server to extract information from it. For example, the attacker can extract table names from a database using the following types of queries:
&quot;username&apos; AND ascii(lower(substring((SELECT TOP 1 name FROM sysobjects WHERE xtype=&apos;U&apos;), 1, 1))) &gt; 108&quot;.

If the above query executes properly, then the attacker knows that the first character in a table name in the database is a letter between m and z. If it doesn&apos;t, then the attacker knows that the character must be between a and l (assuming of course that table names only contain alphabetic characters). By performing a binary search on all character positions, the attacker can determine all table names in the database. Subsequently, the attacker may execute an actual attack and send something like:
&quot;username&apos;; DROP TABLE trades; --
+ Attack Prerequisites

    SQL queries used by the application to store, retrieve or modify data.

    User-controllable input that is not properly validated by the application as part of SQL queries.

+ Solutions and Mitigations

Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.

Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(&apos;) or SQL-comments (--) based on the context in which they appear.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-70-TryCommonDefaultUsernamesAndPasswords">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-49-PasswordBruteForcing"/>
		<rdfs:label>Try Common Default Usernames And Passwords</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker may try certain common (default) usernames and passwords to gain access into the system and perform unauthorized actions. An attacker may try an intelligent brute force using known vendor default credentials as well as a dictionary of common usernames and passwords.

Many vendor products come preconfigured with default (and thus well-known) usernames and passwords that should be deleted prior to usage in a production environment. It is a common mistake to forget to remove these default login credentials. Another problem is that users would pick very simple (common) passwords (e.g. &quot;secret&quot; or &quot;password&quot;) that make it easier for the attacker to gain access to the system compared to using a brute force attack or even a dictionary attack using a full dictionary.
+ Attack Prerequisites

    The system uses one factor password based authentication.

+ Solutions and Mitigations

Delete all default account credentials that may be put in by the product vendor.

Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.

Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.

Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-71-UsingUnicodeEncodingToBypassValidationLogic">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-267-LeverageAlternateEncoding"/>
		<rdfs:label>Using Unicode Encoding To Bypass Validation Logic</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker may provide a Unicode string to a system component that is not Unicode aware and use that to circumvent the filter or cause the classifying mechanism to fail to properly understanding the request. That may allow the attacker to slip malicious data past the content filter and/or possibly cause the application to route the request incorrectly.
+ Attack Prerequisites

    Filtering is performed on data that has not be properly canonicalized.

+ Solutions and Mitigations

Ensure that the system is Unicode aware and can properly process Unicode data. Do not make an assumption that data will be in ASCII.

Ensure that filtering or input validation is applied to canonical data.

Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-72-URLEncoding">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-267-LeverageAlternateEncoding"/>
		<rdfs:label>URL Encoding</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

This attack targets the encoding of the URL. An attacker can take advantage of the multiple way of encoding an URL and abuse the interpretation of the URL. An URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc. The attacker could also subvert the meaning of the URL string request by encoding the data being sent to the server through a GET request. For instance an attacker may subvert the meaning of parameters used in a SQL request and sent through the URL string (See Example section).
+ Attack Prerequisites

    The application should accepts and decodes URL input.

    The application performs insufficient filtering/canonicalization on the URLs.

+ Solutions and Mitigations

Refer to the RFCs to safely decode URL.

Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.

There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).

Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.

Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system. Test your decoding process against malicious input.

Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)

When client input is required from web-based forms, avoid using the &quot;GET&quot; method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the &quot;POST method whenever possible.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-73-UserControlledFilename">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-165-FileManipulation"/>
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-63-SimpleScriptInjection"/>
		<rdfs:label>User Controlled Filename</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">An attack of this type involves an attacker inserting malicious characters (such as a XSS redirection) into a filename, directly or indirectly that is then used by the target software to generate HTML text or other potentially executable content. Many websites rely on user-generated content and dynamically build resources like files, filenames, and URL links directly from user supplied data. In this attack pattern, the attacker uploads code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns. All XSS attack payload variants can be used to pass and exploit these vulnerabilities.
+ Attack Prerequisites

    The victim must trust the name and locale of user controlled filenames.

+ Solutions and Mitigations

Design: Use browser technologies that do not allow client side scripting.

Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.

Implementation: Perform input validation for all remote content.

Implementation: Perform output validation for all remote content.

Implementation: Disable scripting languages such as JavaScript in browser

Implementation: Scan dynamically generated content against validation specification</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-74-ManipulatingUserState">
		<rdfs:subClassOf rdf:resource="http://capec.mitre.org/capec#AttackPattern"/>
		<rdfs:label>Manipulating User State</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

This pattern of attack modifies state information maintained by the target software in user-accessible locations. If successful, the target software will use this tainted state information and execute in an unintended manner. State management is an important function within an application. User state maintained by the application can include usernames, payment information, browsing history as well as application-specific contents such as items in a shopping cart. Manipulating user state can be employed by an adversary to elevate privilege, conduct fraudulent transactions or otherwise modify the flow of the application to derive certain benefits.
+ Solutions and Mitigations

Do not rely solely on user-controllable locations, such as cookies or URL parameters, to maintain user state

Do not store sensitive information, such as usernames or authentication and authorization information, in user-controllable locations.

At all times sensitive information that is part of the user state must be appropriately protected to ensure confidentiality and integrity at each request</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-75-ManipulatingWriteableConfigurationFiles">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-176-ConfigurationEnvironmentManipulation"/>
		<rdfs:label>Manipulating Writeable Configuration Files</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

Generally these are manually edited files that are not in the preview of the system administrators, any ability on the attackers&apos; behalf to modify these files, for example in a CVS repository, gives unauthorized access directly to the application, the same as authorized users.
+ Attack Prerequisites

    Configuration files must be modifiable by the attacker

+ Solutions and Mitigations

Design: Enforce principle of least privilege

Design: Backup copies of all configuration files

Implementation: Integrity monitoring for configuration files

Implementation: Enforce audit logging on code and configuration promotion procedures.

Implementation: Load configuration from separate process and memory space, for example a separate physical device like a CD</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-76-ManipulatingWebInputToFileSystemCalls">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-126-PathTraversal"/>
		<rdfs:label>Manipulating Web Input To File System Calls</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker manipulates inputs to the target software which the target software passes to file system calls in the OS. The goal is to gain access to, and perhaps modify, areas of the file system that the target software did not intend to be accessible.
+ Attack Prerequisites

    Program must allow for user controlled variables to be applied directly to the filesystem

+ Solutions and Mitigations

Design: Enforce principle of least privilege.

Design: Ensure all input is validated, and does not contain file system commands

Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.

Design: For interactive user applications, consider if direct file system interface is necessary, instead consider having the application proxy communication.

Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-77-ManipulatingUserControlledVariables">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-22-ExploitingTrustInClient"/>
		<rdfs:label>Manipulating User Controlled Variables</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

This attack targets user controlled variables (DEBUG=1, PHP Globals, and So Forth). An attacker can override environment variables leveraging user-supplied, untrusted query variables directly used on the application server without any data sanitization. In extreme cases, the attacker can change variables controlling the business logic of the application. For instance, in languages like PHP, a number of poorly set default configurations may allow the user to override variables.
+ Attack Prerequisites

    A variable consumed by the application server is exposed to the client.

    A variable consumed by the application server can be overwritten by the user.

    The application server trusts user supplied data to compute business logic.

    The application server does not perform proper input validation.

+ Solutions and Mitigations

Do not allow override of global variables and do Not Trust Global Variables.

If the register_globals option is enabled, PHP will create global variables for each GET, POST, and cookie variable included in the HTTP request. This means that a malicious user may be able to set variables unexpectedly. For instance make sure that the server setting for PHP does not expose global variables.

A software system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary.

Separate the presentation layer and the business logic layer. Variables at the business logic layer should not be exposed at the presentation layer. This is to prevent computation of business logic from user controlled input data.

Use encapsulation when declaring your variables. This is to lower the exposure of your variables.

Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should be rejected by the program.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-78-UsingEscapedSlashesInAlternateEncoding">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-267-LeverageAlternateEncoding"/>
		<rdfs:label>Using Escaped Slashes In Alternate Encoding</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

This attack targets the use of the backslash in alternate encoding. An attacker can provide a backslash as a leading character and causes a parser to believe that the next character is special. This is called an escape. By using that trick, the attacker tries to exploit alternate ways to encode the same character which leads to filter problems and opens avenues to attack.
+ Attack Prerequisites

    The application accepts the backlash character as escape character.

    The application server does incomplete input data decoding, filtering and validation.

+ Solutions and Mitigations

Verify that the user-supplied data does not use backslash character to escape malicious characters.

Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.

Be aware of the threat of alternative method of data encoding.

Regular expressions can be used to filter out backslash. Make sure you decode before filtering and validating the untrusted input data.

In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.

Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.

Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-79-UsingSlashesInAlternateEncoding">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-267-LeverageAlternateEncoding"/>
		<rdfs:label>Using Slashes In Alternate Encoding</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

This attack targets the encoding of the Slash characters. An attacker would try to exploit common filtering problems related to the use of the slashes characters to gain access to resources on the target host. Directory-driven systems, such as file systems and databases, typically use the slash character to indicate traversal between directories or other container components. For murky historical reasons, PCs (and, as a result, Microsoft OSs) choose to use a backslash, whereas the UNIX world typically makes use of the forward slash. The schizophrenic result is that many MS-based systems are required to understand both forms of the slash. This gives the attacker many opportunities to discover and abuse a number of common filtering problems. The goal of this pattern is to discover server software that only applies filters to one version, but not the other.
+ Attack Prerequisites

    The application server accepts paths to locate resources.

    The application server does insufficient input data validation on the resource path requested by the user.

    The access right to resources are not set properly.

+ Solutions and Mitigations

Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process. Refer to the RFCs to safely decode URL.

When client input is required from web-based forms, avoid using the &quot;GET&quot; method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the &quot;POST method whenever possible.

There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)

Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)

Test your path decoding process against malicious input.

In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.

Assume all input is malicious. Create a white list that defines all valid input to the application based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-8-BufferOverflowInAnAPICall">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-100-OverflowBuffers"/>
		<rdfs:label>Buffer Overflow In An API Call</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

This attack targets libraries or shared code modules which are vulnerable to buffer overflow attacks. An attacker who has access to an API may try to embed malicious code in the API function call and exploit a buffer overflow vulnerability in the function&apos;s implementation. All clients that make use of the code library thus become vulnerable by association. This has a very broad effect on security across a system, usually affecting more than one software process.
+ Attack Prerequisites

    The target host exposes an API to the user.

    One or more API functions exposed by the target host has a buffer overflow vulnerability.

+ Solutions and Mitigations

Use a language or compiler that performs automatic bounds checking.

Use secure functions not vulnerable to buffer overflow.

If you have to use dangerous functions, make sure that you do boundary checking.

Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.

Use OS-level preventative functionality. Not a complete solution.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-80-UsingUTF8EncodingToBypassValidationLogic">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-267-LeverageAlternateEncoding"/>
		<rdfs:label>Using UTF 8 Encoding To Bypass Validation Logic</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

This attack is a specific variation on leveraging alternate encodings to bypass validation logic. This attack leverages the possibility to encode potentially harmful input in UTF-8 and submit it to applications not expecting or effective at validating this encoding standard making input filtering difficult. UTF-8 (8-bit UCS/Unicode Transformation Format) is a variable-length character encoding for Unicode. Legal UTF-8 characters are one to four bytes long. However, early version of the UTF-8 specification got some entries wrong (in some cases it permitted overlong characters). UTF-8 encoders are supposed to use the &quot;shortest possible&quot; encoding, but naive decoders may accept encodings that are longer than necessary. According to the RFC 3629, a particularly subtle form of this attack can be carried out against a parser which performs security-critical validity checks against the UTF-8 encoded form of its input, but interprets certain illegal octet sequences as characters.
+ Attack Prerequisites

    The application&apos;s UTF-8 decoder accepts and interprets illegal UTF-8 characters or non-shortest format of UTF-8 encoding.

    Input filtering and validating is not done properly leaving the door open to harmful characters for the target host.

+ Solutions and Mitigations

The Unicode Consortium recognized multiple representations to be a problem and has revised the Unicode Standard to make multiple representations of the same code point with UTF-8 illegal. The UTF-8 Corrigendum lists the newly restricted UTF-8 range (See references). Many current applications may not have been revised to follow this rule. Verify that your application conform to the latest UTF-8 encoding specification. Pay extra attention to the filtering of illegal characters.

The exact response required from an UTF-8 decoder on invalid input is not uniformly defined by the standards. In general, there are several ways a UTF-8 decoder might behave in the event of an invalid byte sequence:

    1. Insert a replacement character (e.g. &apos;?&apos;, &apos;&apos;).
    2. Ignore the bytes.
    3. Interpret the bytes according to a different character encoding (often the ISO-8859-1 character map).
    4. Not notice and decode as if the bytes were some similar bit of UTF-8.
    5. Stop decoding and report an error (possibly giving the caller the option to continue).

It is possible for a decoder to behave in different ways for different types of invalid input.

RFC 3629 only requires that UTF-8 decoders must not decode &quot;overlong sequences&quot; (where a character is encoded in more bytes than needed but still adheres to the forms above). The Unicode Standard requires a Unicode-compliant decoder to &quot;...treat any ill-formed code unit sequence as an error condition. This guarantees that it will neither interpret nor emit an ill-formed code unit sequence.&quot;

Overlong forms are one of the most troublesome types of UTF-8 data. The current RFC says they must not be decoded but older specifications for UTF-8 only gave a warning and many simpler decoders will happily decode them. Overlong forms have been used to bypass security validations in high profile products including Microsoft&apos;s IIS web server. Therefore, great care must be taken to avoid security issues if validation is performed before conversion from UTF-8, and it is generally much simpler to handle overlong forms before any input validation is done.

To maintain security in the case of invalid input, there are two options. The first is to decode the UTF-8 before doing any input validation checks. The second is to use a decoder that, in the event of invalid input, returns either an error or text that the application considers to be harmless. Another possibility is to avoid conversion out of UTF-8 altogether but this relies on any other software that the data is passed to safely handling the invalid data.

Another consideration is error recovery. To guarantee correct recovery after corrupt or lost bytes, decoders must be able to recognize the difference between lead and trail bytes, rather than just assuming that bytes will be of the type allowed in their position.

For security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms).

Look for overlong UTF-8 sequences starting with malicious pattern. You can also use a UTF-8 decoder stress test to test your UTF-8 parser (See Markus Kuhn&apos;s UTF-8 and Unicode FAQ in reference section)

Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system. Test your decoding process against malicious input.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-81-WebLogsTampering">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-268-AuditLogManipulation"/>
		<rdfs:label>Web Logs Tampering</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

Web Logs Tampering attacks involve an attacker injecting, deleting or otherwise tampering with the contents of web logs typically for the purposes of masking other malicious behavior. Additionally, writing malicious data to log files may target jobs, filters, reports, and other agents that process the logs in an asynchronous attack pattern. This pattern of attack is similar to &quot;Log Injection-Tampering-Forging&quot; except that in this case, the attack is targeting the logs of the web server and not the application.
+ Attack Prerequisites

    Target server software must be a HTTP server that performs web logging.

+ Solutions and Mitigations

Design: Use input validation before writing to web log

Design: Validate all log data before it is output</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-83-XPathInjection">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-250-XMLInjection"/>
		<rdfs:label>XPath Injection</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker can craft special user-controllable input consisting of XPath expressions to inject the XML database and bypass authentication or glean information that he normally would not be able to. XPath Injection enables an attacker to talk directly to the XML database, thus bypassing the application completely. XPath Injection results from the failure of an application to properly sanitize input used as part of dynamic XPath expressions used to query an XML database. In order to successfully inject XML and retrieve information from a database, an attacker:
+ Attack Prerequisites

    XPath queries used to retrieve information stored in XML documents

    User-controllable input not properly sanitized before being used as part of XPath queries

+ Solutions and Mitigations

Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XPath expression. Characters such as a single-quote(&apos;) or operators such as or (|), and (&amp;) and such should be filtered if the application does not expect them in the context in which they appear. If such content cannot be filtered, it must at least be properly escaped to avoid them being interpreted as part of XPath expressions.

Use of parameterized XPath queries - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails.

Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-84-XQueryInjection">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-250-XMLInjection"/>
		<rdfs:label>XQuery Injection</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

This attack utilizes XQuery to probe and attack server systems; in a similar manner that SQL Injection allows an attacker to exploit SQL calls to RDBMS, XQuery Injection uses improperly validated data that is passed to XQuery commands to traverse and execute commands that the XQuery routines have access to. XQuery injection can be used to enumerate elements on the victim&apos;s environment, inject commands to the local host, or execute queries to remote files and data sources.
+ Attack Prerequisites

    The XQL must execute unvalidated data

+ Solutions and Mitigations

Design: Perform input white list validation on all XML input

Implementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-85-AJAXFingerprinting">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-541-ApplicationFingerprinting"/>
		<rdfs:label>AJAX Fingerprinting</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. In many XSS attacks the attacker must get a &quot;hole in one&quot; and successfully exploit the vulnerability on the victim side the first time, once the client is redirected the attacker has many chances to engage in follow on probes, but there is only one first chance. In a widely used web application this is not a major problem because 1 in a 1,000 is good enough in a widely used application.

A common first step for an attacker is to footprint the environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on.
+ Attack Prerequisites

    The user must allow JavaScript to execute in their browser

+ Solutions and Mitigations

Design: Use browser technologies that do not allow client side scripting.

Design: Utilize strict type, character, and encoding enforcement

Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.

Implementation: Perform input validation for all remote content.

Implementation: Perform output validation for all remote content.

Implementation: Disable scripting languages such as JavaScript in browser

Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-86-EmbeddingScriptXSSInHTTPHeaders">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-220-ClientServerProtocolManipulation"/>
		<rdfs:label>Embedding Script XSS In HTTP Headers</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attack of this type exploits web applications that generate web content, such as links in a HTML page, based on unvalidated or improperly validated data submitted by other actors. XSS in HTTP Headers attacks target the HTTP headers which are hidden from most users and may not be validated by web applications.
+ Attack Prerequisites

    Target software must be a client that allows scripting communication from remote hosts, and attacker must control a remote site of some sort to redirect client and data to.

+ Solutions and Mitigations

Design: Use browser technologies that do not allow client side scripting.

Design: Utilize strict type, character, and encoding enforcement

Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client&apos;s browser has no way of discerning where the data is originating from.

Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.

Implementation: Perform input validation for all remote content.

Implementation: Perform output validation for all remote content.

Implementation: Disable scripting languages such as JavaScript in browser

Implementation: Session tokens for specific host

Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-86-EmbeddingScriptXXSInHTTPHeaders">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-18-EmbeddingScriptsInNonScriptElements"/>
		<rdfs:label>Embedding Script XXS In HTTP Headers</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

An attack of this type exploits web applications that generate web content, such as links in a HTML page, based on unvalidated or improperly validated data submitted by other actors. XSS in HTTP Headers attacks target the HTTP headers which are hidden from most users and may not be validated by web applications.
+ Attack Prerequisites

    Target software must be a client that allows scripting communication from remote hosts, and attacker must control a remote site of some sort to redirect client and data to.

+ Solutions and Mitigations

Design: Use browser technologies that do not allow client side scripting.

Design: Utilize strict type, character, and encoding enforcement

Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client&apos;s browser has no way of discerning where the data is originating from.

Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.

Implementation: Perform input validation for all remote content.

Implementation: Perform output validation for all remote content.

Implementation: Disable scripting languages such as JavaScript in browser

Implementation: Session tokens for specific host

Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-87-ForcefulBrowsing">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-115-AuthenticationBypass"/>
		<rdfs:label>Forceful Browsing</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An attacker employs forceful browsing to access portions of a website that are otherwise unreachable through direct URL entry.

Usually, a front controller or similar design pattern is employed to protect access to portions of a web application.

Forceful browsing enables an attacker to access information, perform privileged operations and otherwise reach sections of the web application that have been improperly protected.
+ Attack Prerequisites

    The forcibly browseable pages or accessible resources must be discoverable and improperly protected.

+ Solutions and Mitigations

Authenticate request to every resource. In addition, every page or resource must ensure that the request it is handling has been made in an authorized context.

Forceful browsing can also be made difficult to a large extent by not hard-coding names of application pages or resources. This way, the attacker cannot figure out, from the application alone, the resources available from the present context.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-88-OSCommandInjection">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-248-CommandInjection"/>
		<rdfs:label>OS Command Injection</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

In this type of an attack, an adversary injects operating system commands into existing application functions. An application that uses untrusted input to build command strings is vulnerable. An adversary can leverage OS command injection in an application to elevate privileges, execute arbitrary commands and compromise the underlying operating system.
+ Attack Prerequisites

    User controllable input used as part of commands to the underlying operating system.

+ Solutions and Mitigations

Use language APIs rather than relying on passing data to the operating system shell or command line. Doing so ensures that the available protection mechanisms in the language are intact and applicable.

Filter all incoming data to escape or remove characters or strings that can be potentially misinterpreted as operating system or shell commands

All application processes should be run with the minimal privileges required. Also, processes must shed privileges as soon as they no longer require them.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-89-Pharming">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-151-IdentitySpoofing"/>
		<rdfs:label>Pharming</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to his site rather than the originally intended one.

Pharming does not require script injection or clicking on malicious links for the attack to succeed.
+ Attack Prerequisites

    Vulnerable DNS software or improperly protected hosts file or router that can be poisoned

    A website that handles sensitive information but does not use a secure connection and a certificate that is valid is also prone to pharming

+ Solutions and Mitigations

All sensitive information must be handled over a secure connection.

Known vulnerabilities in DNS or router software or in operating systems must be patched as soon as a fix has been released and tested.

End users must ensure that they provide sensitive information only to websites that they trust, over a secure connection with a valid certificate issued by a well-known certificate authority.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-9-BufferOverflowInLocalCommandLineUtilities">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-100-OverflowBuffers"/>
		<rdfs:label>Buffer Overflow In Local Command Line Utilities</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

This attack targets command-line utilities available in a number of shells. An attacker can leverage a vulnerability found in a command-line utility to escalate privilege to root.
+ Attack Prerequisites

    The target host exposes a command-line utility to the user.

    The command-line utility exposed by the target host has a buffer overflow vulnerability that can be exploited.

+ Solutions and Mitigations

Carefully review the service&apos;s implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as buffer overflow.

Use a language or compiler that performs automatic bounds checking.

Use an abstraction library to abstract away risky APIs. Not a complete solution.

Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.

Operational: Use OS-level preventative functionality. Not a complete solution.

Apply the latest patches to your user exposed services. This may not be a complete solution, especially against a zero day attack.

Do not unnecessarily expose services.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-90-ReflectionAttackInAuthenticationProtocol">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-114-AuthenticationAbuse"/>
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-220-ClientServerProtocolManipulation"/>
		<rdfs:label>Reflection Attack In Authentication Protocol</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">sentation Filter:
+ Summary

An attacker can abuse an authentication protocol susceptible to reflection attack in order to defeat it. Doing so allows the attacker illegitimate access to the target system, without possessing the requisite credentials.

Reflection attacks are of great concern to authentication protocols that rely on a challenge-handshake or similar mechanism. An attacker can impersonate a legitimate user and can gain illegitimate access to the system by successfully mounting a reflection attack during authentication.
+ Attack Prerequisites

    The attacker must have direct access to the target server in order to successfully mount a reflection attack. An intermediate entity, such as a router or proxy, that handles these exchanges on behalf of the attacker inhibits the attackers&apos; ability to attack the authentication protocol.

+ Solutions and Mitigations

The server must initiate the handshake by issuing the challenge. This ensures that the client has to respond before the exchange can move any further

The use of HMAC to hash the response from the server can also be used to thwart reflection. The server responds by returning its own challenge as well as hashing the client&apos;s challenge, its own challenge and the pre-shared secret. Requiring the client to respond with the HMAC of the two challenges ensures that only the possessor of a valid pre-shared secret can successfully hash in the two values.

Introducing a random nonce with each new connection ensures that the attacker cannot employ two connections to attack the authentication protocol</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-91-XSSInIMGTags">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-18-EmbeddingScriptsInNonScriptElements"/>
		<rdfs:label>XSS In IMG Tags</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

Image tags are an often overlooked, but convenient, means for a Cross Site Scripting attack. The attacker can inject script contents into an image (IMG) tag in order to steal information from a victim&apos;s browser and execute malicious scripts.
+ Attack Prerequisites

    Application permitting the inclusion or use of IMG tags

+ Solutions and Mitigations

In addition to the traditional input fields, all other user controllable inputs, such as image tags within messages or the likes, must also be subjected to input validation. Such validation should ensure that content that can be potentially interpreted as script by the browser is appropriately filtered.

All output displayed to clients must be properly escaped. Escaping ensures that the browser interprets special scripting characters literally and not as script to be executed.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-92-ForcedIntegerOverflow">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-128-IntegerAttacks"/>
		<rdfs:label>Forced Integer Overflow</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

This attack forces an integer variable to go out of range. The integer variable is often used as an offset such as size of memory allocation or similarly. The attacker would typically control the value of such variable and try to get it out of range. For instance the integer in question is incremented past the maximum possible value, it may wrap to become a very small, or negative number, therefore providing a very incorrect value which can lead to unexpected behavior. At worst the attacker can execute arbitrary code.
+ Attack Prerequisites

    The attacker can manipulate the value of an integer variable utilized by the target host.

    The target host does not do proper range checking on the variable before utilizing it.

    When the integer variable is incremented or decremented to an out of range value, it gets a very different value (e.g. very small or negative number)

+ Solutions and Mitigations

Use a language or compiler that performs automatic bounds checking.

Carefully review the service&apos;s implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as integer overflow.

Use an abstraction library to abstract away risky APIs. Not a complete solution.

Always do bound checking before consuming user input data.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-93-LogInjectionTamperingForging">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-268-AuditLogManipulation"/>
		<rdfs:label>Log Injection Tampering Forging</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

This attack targets the log files of the target host. The attacker injects, manipulates or forges malicious log entries in the log file, allowing him to mislead a log audit, cover traces of attack, or perform other malicious actions. The target host is not properly controlling log access. As a result tainted data is resulting in the log files leading to a failure in accountability, non-repudiation and incident forensics capability.
+ Attack Prerequisites

    The target host is logging the action and data of the user.

    The target host insufficiently protects access to the logs or logging mechanisms.

+ Solutions and Mitigations

Carefully control access to physical log files.

Do not allow tainted data to be written in the log file without prior input validation. Whitelisting may be used to properly validate the data.

Use synchronization to control the flow of execution.

Use static analysis tools to identify log forging vulnerabilities.

Avoid viewing logs with tools that may interpret control characters in the file, such as command-line shells.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-94-ManInTheMiddleAttack">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-22-ExploitingTrustInClient"/>
		<rdfs:label>Man In The Middle Attack</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

This type of attack targets the communication between two components (typically client and server). The attacker places himself in the communication channel between the two components. Whenever one component attempts to communicate with the other (data flow, authentication challenges, etc.), the data first goes to the attacker, who has the opportunity to observe or alter it, and it is then passed on to the other component as if it was never intercepted. This interposition is transparent leaving the two compromised components unaware of the potential corruption or leakage of their communications. The potential for Man-in-the-Middle attacks yields an implicit lack of trust in communication or identify between two components.
+ Attack Prerequisites

    There are two components communicating with each other.

    An attacker is able to identify the nature and mechanism of communication between the two target components.

    An attacker can eavesdrop on the communication between the target components.

    Strong mutual authentication is not used between the two target components yielding opportunity for attacker interposition.

    The communication occurs in clear (not encrypted) or with insufficient and spoofable encryption.

+ Solutions and Mitigations

Get your Public Key signed by a Certificate Authority

Encrypt your communication using cryptography (SSL,...)

Use Strong mutual authentication to always fully authenticate both ends of any communications channel.

Exchange public keys using a secure channel</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-95-WSDLScanning">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-54-QuerySystemForInformation"/>
		<rdfs:label>WSDL Scanning</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

This attack targets the WSDL interface made available by a web service. The attacker may scan the WSDL interface to reveal sensitive information about invocation patterns, underlying technology implementations and associated vulnerabilities. This type of probing is carried out to perform more serious attacks (e.g. parameter tampering, malicious content injection, command injection, etc.). WSDL files provide detailed information about the services ports and bindings available to consumers. For instance, the attacker can submit special characters or malicious content to the Web service and can cause a denial of service condition or illegal access to database records. In addition, the attacker may try to guess other private methods by using the information provided in the WSDL files.
+ Attack Prerequisites

    A client program connecting to a web service can read the WSDL to determine what functions are available on the server.

    The target host exposes vulnerable functions within its WSDL interface.

+ Solutions and Mitigations

It is important to protect WSDL file or provide limited access to it.

Review the functions exposed by the WSDL interface (especially if you have used a tool to generate it). Make sure that none of them is vulnerable to injection.

Ensure the WSDL does not expose functions and APIs that were not intended to be exposed.

Pay attention to the function naming convention (within the WSDL interface). Easy to guess function name may be an entry point for attack.

Validate the received messages against the WSDL Schema. Incomplete solution.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-96-BlockAccessToLibraries">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-603-Blockage"/>
		<rdfs:label>Block Access To Libraries</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">Summary

An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. It is possible that the application does not handle situations properly where access to these libraries has been blocked. Depending on the error handling within the application, blocked access to libraries may leave the system in an insecure state that could be leveraged by an attacker.
+ Attack Prerequisites

    An application requires access to external libraries.

    An attacker has the privileges to block application access to external libraries.

+ Solutions and Mitigations

Ensure that application handles situations where access to APIs in external libraries is not available securely. If the application cannot continue its execution safely it should fail in a consistent and secure fashion.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-97-Cryptanalysis">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-192-ProtocolAnalysis"/>
		<rdfs:label>Cryptanalysis</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

Cryptanalysis is a process of finding weaknesses in cryptographic algorithms and using these weaknesses to decipher the ciphertext without knowing the secret key (instance deduction). Sometimes the weakness is not in the cryptographic algorithm itself, but rather in how it is applied that makes cryptanalysis successful. An attacker may have other goals as well, such as:

    1. Total Break - Finding the secret key
    2. Global Deduction - Finding a functionally equivalent algorithm for encryption and decryption that does not require knowledge of the secret key.
    3. Information Deduction - Gaining some information about plaintexts or ciphertexts that was not previously known
    4. Distinguishing Algorithm - The attacker has the ability to distinguish the output of the encryption (ciphertext) from a random permutation of bits

The goal of the attacker performing cryptanalysis will depend on the specific needs of the attacker in a given attack context. In most cases, if cryptanalysis is successful at all, an attacker will not be able to go past being able to deduce some information about the plaintext (goal 3). However, that may be sufficient for an attacker, depending on the context.
+ Attack Prerequisites

    The target software utilizes some sort of cryptographic algorithm.

    An underlying weaknesses exists either in the cryptographic algorithm used or in the way that it was applied to a particular chunk of plaintext.

    The encryption algorithm is known to the attacker.

    An attacker has access to the ciphertext.

+ Solutions and Mitigations

Use proven cryptographic algorithms with recommended key sizes.

Ensure that the algorithms are used properly. That means:

    1. Not rolling out your own crypto; Use proven algorithms and implementations.
    2. Choosing initialization vectors with sufficiently random numbers
    3. Generating key material using good sources of randomness and avoiding known weak keys
    4. Using proven protocols and their implementations.
    5. Picking the most appropriate cryptographic algorithm for your usage context and data</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>
	
	<owl:Class rdf:about="&ctcapec;CAPEC-98-Phishing">
		<rdfs:subClassOf rdf:resource="&ctcapec;CAPEC-151-IdentitySpoofing"/>
		<rdfs:label>Phishing</rdfs:label>
		<rdfs:comment rdf:datatype="&xsd;string">+ Summary

Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or &quot;fishing&quot; for information.
+ Attack Prerequisites

    An attacker needs to have a way to initiate contact with the victim. Typically that will happen through e-mail.

    An attacker needs to correctly guess the entity with which the victim does business and impersonate it. Most of the time phishers just use the most popular banks/services and send out their &quot;hooks&quot; to many potential victims.

    An attacker needs to have a sufficiently compelling call to action to prompt the user to take action.

    The replicated website needs to look extremely similar to the original website and the URL used to get to that website needs to look like the real URL of the said business entity.

+ Solutions and Mitigations

Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.</rdfs:comment>
		<core:appIconId rdf:datatype="&xsd;string">dl:com.champtc.champ.ui.core.stix.attackPattern</core:appIconId>
	</owl:Class>

</rdf:RDF>